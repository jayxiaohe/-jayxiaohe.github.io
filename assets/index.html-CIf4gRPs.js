import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e}from"./app-BUJ2iQsf.js";const n={},l=e(`<h3 id="spring-mvc-运行流程" tabindex="-1"><a class="header-anchor" href="#spring-mvc-运行流程"><span>Spring MVC 运行流程</span></a></h3><p>第一步：发起请求到前端控制器(<code>DispatcherServlet</code>)</p><p>第二步：前端控制器请求<code>HandlerMapping</code>查找处理器<code>Handler</code>（ 可以根据xml配置、注解进行查找）</p><p>第三步：处理器映射器<code>HandlerMapping</code>向前端控制器返回<code>Handler</code></p><p>第四步：前端控制器调用处理器适配器去执行<code>Handler</code></p><p>第五步：处理器适配器去<strong>执行</strong><code>Handler</code></p><p>第六步：Handler执行完成给处理器适配器返回<code>ModelAndView</code></p><p>第七步：处理器适配器向前端控制器返回<code>ModelAndView</code>（<code>ModelAndView</code>是<code>Springmvc</code>框架的一个底层对象，包括<code>Model</code>和<code>view</code>）</p><p>第八步：前端控制器请求视图解析器(<code>ViewResolver</code>)去进行视图解析（根据逻辑视图名称进行查找，生成视图对象）</p><p>第九步：视图解析器向前端控制器返回视图对象<strong>View</strong></p><p>第十步：前端控制器进行视图渲染（ 视图渲染将模型数据(在ModelAndView对象中)填充到request域）</p><p>第十一步：前端控制器向用户响应结果</p><figure><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205262243183.png" alt="image-20220526224304005" tabindex="0" loading="lazy"><figcaption>image-20220526224304005</figcaption></figure><h3 id="说说对spring-mvc的理解" tabindex="-1"><a class="header-anchor" href="#说说对spring-mvc的理解"><span>说说对Spring MVC的理解？</span></a></h3><p>MVC 是一种设计模式,Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的Web层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service层（处理业务）、Dao层（数据库操作）、Entity层（实体类）、Controller层(控制层，返回数据给前台页面)。</p><h3 id="springmvc的优点" tabindex="-1"><a class="header-anchor" href="#springmvc的优点"><span>Springmvc的优点</span></a></h3><ul><li>可以支持各种视图技术,而不仅仅局限于JSP；</li><li>与Spring框架集成（如<code>IoC</code>容器、<code>AOP</code>等）；</li><li>清晰的角色分配：前端控制器(<code>dispatcherServlet</code>) , 请求到处理器映射（<code>handlerMapping</code>), 处理器适配器（<code>HandlerAdapter</code>), 视图解析器（<code>ViewResolver</code>）。</li><li>支持各种请求资源的映射策略。</li></ul><h3 id="什么是mvc模式" tabindex="-1"><a class="header-anchor" href="#什么是mvc模式"><span>什么是MVC模式？</span></a></h3><p>MVC的全名是<code>Model View Controller</code>，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。它是用一种业务逻辑、数据与界面显示分离的方法来组织代码，将众多的业务逻辑聚集到一个部件里面，在需要改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑，达到减少编码的时间。</p><p><strong>V</strong> 即View视图，是指用户看到并与之交互的界面。比如由html元素组成的网页界面，或者软件的客户端界面。MVC的好处之一在于它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，它只是作为一种输出数据并允许用户操纵的方式。</p><p><strong>M</strong> 即model模型，是指模型表示业务规则。在MVC的三个部件中，模型拥有最多的处理任务。被模型返回的数据是中立的，模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</p><p><strong>C</strong> 即controller控制器，是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</p><h3 id="spring-mvc的主要组件" tabindex="-1"><a class="header-anchor" href="#spring-mvc的主要组件"><span>Spring MVC的主要组件？</span></a></h3><ul><li>前端控制器<code>DispatcherServlet</code>：其作用是接收用户请求，然后给用户反馈结果。它的作用相当于一个转发器或中央处理器，控制整个流程的执行，对各个组件进行统一调度，以降低组件之间的耦合性，有利于组件之间的拓展。</li><li>处理器映射器<code>HandlerMapping</code>：其作用是根据请求的URL路径，通过注解或者XML配置，寻找匹配的处理器信息。</li><li>处理器适配器<code>HandlerAdapter</code>：其作用是根据映射器处理器找到的处理器信息，按照特定规则执行相关的处理器（Handler）。</li><li>处理器<code>Handler</code>：其作用是执行相关的请求处理逻辑，并返回相应的数据和视图信息，将其封装至ModelAndView对象中。</li><li>视图解析器<code>ViewResolver</code>：其作用是进行解析操作，通过ModelAndView对象中的View信息将逻辑视图名解析成真正的视图View（如通过一个JSP路径返回一个真正的JSP页面）。</li><li>视图**<code>View</code>：View**是一个接口，实现类支持不同的View类型（JSP、FreeMarker、Excel等）。</li></ul><h3 id="servlet原理" tabindex="-1"><a class="header-anchor" href="#servlet原理"><span>Servlet原理？</span></a></h3><h3 id="过滤器跟拦截器的区别" tabindex="-1"><a class="header-anchor" href="#过滤器跟拦截器的区别"><span>过滤器跟拦截器的区别？</span></a></h3><p><strong>过滤器：</strong></p><p>Servlet中的过滤器Filter是实现了<code>javax.servlet.Filter</code>接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等。其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可以进行逻辑判断，如用户是否已经登录、有没有权限访问该页面等等工作，它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关的请求，只有当你的web应用停止或重新部署的时候才能销毁。</p><p><strong>拦截器：</strong></p><p>拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</p><p>拦截器不是在web.xml配置的，比如struts在struts.xml配置，而springMVC在Spring与springMVC整合的配置文件中配置。在springmvc中，定义拦截器要实现HandlerInterceptor接口，并实现该接口中提供的三个方法。</p><ol><li><p>拦截器是基于Java的反射机制的，而过滤器是基于函数回调</p></li><li><p>过滤器依赖与servlet容器，而拦截器不依赖与servlet容器</p></li><li><p>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用</p></li><li><p>拦截器可以访问action上下文、值栈里的对象，而过滤器不能</p></li><li><p>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次</p></li><li><p>Filter需要在web.xml中配置，依赖于Servlet</p></li><li><p>Interceptor需要在SpringMVC中配置，依赖于框架</p></li><li><p>Filter的执行顺序在Interceptor之前。Filter包裹servlet，servlet包裹Interceptor <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205262236753.png" alt="" loading="lazy"></p></li></ol><h3 id="springmvc-中如何解决-get-post请求中文乱码问题" tabindex="-1"><a class="header-anchor" href="#springmvc-中如何解决-get-post请求中文乱码问题"><span>Springmvc 中如何解决 GET | POST请求中文乱码问题？</span></a></h3><p><strong>GET方式：</strong></p><p>在服务器端配置URL编码格式：修改tomcat的配置文件server.xml：</p><p>只需增加 URIEncoding=“UTF-8” 这一句，然后重启tomcat即可。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">ConnectorURIEncoding</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">UTF-8</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">    port</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">8080</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">  maxHttpHeaderSize</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">8192</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">  maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">150</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">    minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">25</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">  maxSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">75</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">connectionTimeout=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">20000</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">    disableUploadTimeout</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> URIEncoding</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">UTF-8</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>POST方式：</strong></p><p>SpringMVC默认提供一个解决post请求乱码的过滤器，在web.xml中配置即可（要注意的是它的位置一定要是第一个执行的过滤器）：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">characterEncodingFilter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.web.filter.CharacterEncodingFilter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">encoding</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">UTF-8</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-mapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">characterEncodingFilter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">/*</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">filter-mapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该过滤器要做的其实就是强制为所有请求和响应设置编码格式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">setCharacterEncoding</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“utf</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">response</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">setCharacterEncoding</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“utf</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springmvc-如何做异常处理" tabindex="-1"><a class="header-anchor" href="#springmvc-如何做异常处理"><span>Springmvc 如何做异常处理 ？</span></a></h3><p>可以将异常抛给Spring框架，由Spring框架来处理；自定义实现spring的全局异常解析器<code>HandlerExceptionResolver</code>，在异常处理器中添视图页面即可。</p><p>若与SpringBoot搭配使用，建议使用SpringBoot提供的全局异常处理：<code>@ControllerAdvise</code></p><h3 id="springmvc-常用注解都有哪些" tabindex="-1"><a class="header-anchor" href="#springmvc-常用注解都有哪些"><span>SpringMVC 常用注解都有哪些？</span></a></h3><p><code>@requestMapping</code>：用于请求 url 映射。</p><p><code>@RequestBody</code>： 注解实现接收 http 请求的 json 数据，将 json 数据转换为 java 对象。</p><p><code>@ResponseBody</code> ：注解实现将 controller 方法返回对象转化为 json 响应给客户。</p><p><code>@Conntroller</code>：控制器的注解，表示是表现层,不能用用别的注解代替。</p><p><code>@Valid</code>：标志参数被<code>Hibernate-Validator校验框架</code>校验。</p><p><code>@PathVariable</code>：用于接收uri地址传过来的参数，Url中可以通过一个或多个{Xxx}占位符映射，通过@PathVariable可以绑定占位符参数到方法参数中，在RestFul接口风格中经常使用。 例如：请求URL：http://localhost/user/21/张三/query (Long类型可以根据需求改变为String或int，SpringMVC会自动做转换)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">/user/{userId}/{userName}/query</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">userId</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> Long userId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">userName</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String userName</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@RequestParam</code>：用于将请求参数映射到控制器方法的形参上，有如下三个属性</p><ul><li>value：参数名。</li><li>required：是否必需，默认为true，表示请求参数中必须包含该参数，如果不包含抛出异常。</li><li>defaultValue：默认参数值，如果设置了该值自动将required设置为false，如果参数中没有包含该参数则使用默认值。 示例：<code>@RequestParam(value = &quot;pageNum”, required = false, defaultValue = &quot;1&quot;)</code></li></ul><h3 id="如何开启注解处理器和适配器" tabindex="-1"><a class="header-anchor" href="#如何开启注解处理器和适配器"><span>如何开启注解处理器和适配器？</span></a></h3><p>在配置文件中（一般命名为<strong>springmvc.xml</strong> ）通过开启 <code>&lt;mvc:annotation-driven&gt;</code>来实现注解处理器和适配器的开启。</p><h3 id="springmvc-的控制器是不是单例模式-如果是-有什么问题-怎么解决" tabindex="-1"><a class="header-anchor" href="#springmvc-的控制器是不是单例模式-如果是-有什么问题-怎么解决"><span>Springmvc 的控制器是不是单例模式,如果是,有什么问题,怎么解决？</span></a></h3><p>是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段；或者使用<code>ThreadLocal</code>。</p><h3 id="springmvc-和struts2的区别有哪些" tabindex="-1"><a class="header-anchor" href="#springmvc-和struts2的区别有哪些"><span>Springmvc 和struts2的区别有哪些?</span></a></h3><p>Springmvc的入口是一个servlet，即前端控制器（<code>DispatchServlet</code>），而struts2入口是一个filter过虑器（<code>StrutsPrepareAndExecuteFilter</code>）。</p><p>Springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p><p>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</p><h3 id="springmvc-中对于文件的上传有哪些需要注意" tabindex="-1"><a class="header-anchor" href="#springmvc-中对于文件的上传有哪些需要注意"><span>Springmvc 中对于文件的上传有哪些需要注意</span></a></h3><ul><li>在页面form中提交enctype=&quot;multipart/form-data&quot;的数据时，需要springmvc对multipart类型的数据进行解析。</li><li>在springmvc.xml中配置multipart类型解析器。</li><li>方法中使用：MultipartFile attach (单个文件上传) 或者 MultipartFile[] attachs (多个文件上传)</li></ul><h3 id="springmvc-中拦截器如何使用" tabindex="-1"><a class="header-anchor" href="#springmvc-中拦截器如何使用"><span>Springmvc 中拦截器如何使用？</span></a></h3><p><strong>定义拦截器</strong></p><p>实现<code>HandlerInterceptor</code>接口。接口中提供三个方法：</p><ul><li><code>preHandle()</code> ：进入 Handler方法之前执行，用于<strong>身份认证、身份授权</strong>，比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</li><li><code>postHandle()</code>：进入Handler方法之后，返回modelAndView之前执行，应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</li><li><code>afterCompletion()</code>：执行Handler完成执行此方法，应用场景：<strong>统一异常处理，统一日志处理</strong></li></ul><p><strong>拦截器配置：</strong></p><ul><li>针对HandlerMapping配置(不推荐)：springmvc拦截器针对HandlerMapping进行拦截设置，如果在某个HandlerMapping中配置拦截，经过该 HandlerMapping映射成功的handler最终使用该 拦截器。(一般不推荐使用)</li><li>类似全局的拦截器：springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中。</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">&lt;!-- 写法参考 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#999999;--shiki-dark:#85E89D;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">interceptors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">    &lt;!-- 可配置多个。下面的例子只针对部分请求拦截。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#999999;--shiki-dark:#85E89D;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">interceptor</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	   	&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#999999;--shiki-dark:#85E89D;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mapping</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">/modelMap.do</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">com.et.action.MyHandlerInterceptorAdapter</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#999999;--shiki-dark:#85E89D;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">interceptor</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#999999;--shiki-dark:#85E89D;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">interceptors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),t=[l];function p(h,r){return a(),s("div",null,t)}const g=i(n,[["render",p],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/20frame/20.SpringMVC/interview/","title":"SpringMVC面试题","lang":"zh-CN","frontmatter":{"title":"SpringMVC面试题","date":"2021-03-17T20:14:17.000Z","permalink":"/20frame/20.SpringMVC/interview/","order":1,"icon":"wenzhang","description":"Spring MVC 运行流程 第一步：发起请求到前端控制器(DispatcherServlet) 第二步：前端控制器请求HandlerMapping查找处理器Handler（ 可以根据xml配置、注解进行查找） 第三步：处理器映射器HandlerMapping向前端控制器返回Handler 第四步：前端控制器调用处理器适配器去执行Handler 第五...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/20frame/20.SpringMVC/interview/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"SpringMVC面试题"}],["meta",{"property":"og:description","content":"Spring MVC 运行流程 第一步：发起请求到前端控制器(DispatcherServlet) 第二步：前端控制器请求HandlerMapping查找处理器Handler（ 可以根据xml配置、注解进行查找） 第三步：处理器映射器HandlerMapping向前端控制器返回Handler 第四步：前端控制器调用处理器适配器去执行Handler 第五..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205262243183.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2021-03-17T20:14:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC面试题\\",\\"image\\":[\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205262243183.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205262236753.png\\"],\\"datePublished\\":\\"2021-03-17T20:14:17.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":3,"title":"Spring MVC 运行流程","slug":"spring-mvc-运行流程","link":"#spring-mvc-运行流程","children":[]},{"level":3,"title":"说说对Spring MVC的理解？","slug":"说说对spring-mvc的理解","link":"#说说对spring-mvc的理解","children":[]},{"level":3,"title":"Springmvc的优点","slug":"springmvc的优点","link":"#springmvc的优点","children":[]},{"level":3,"title":"什么是MVC模式？","slug":"什么是mvc模式","link":"#什么是mvc模式","children":[]},{"level":3,"title":"Spring MVC的主要组件？","slug":"spring-mvc的主要组件","link":"#spring-mvc的主要组件","children":[]},{"level":3,"title":"Servlet原理？","slug":"servlet原理","link":"#servlet原理","children":[]},{"level":3,"title":"过滤器跟拦截器的区别？","slug":"过滤器跟拦截器的区别","link":"#过滤器跟拦截器的区别","children":[]},{"level":3,"title":"Springmvc 中如何解决 GET | POST请求中文乱码问题？","slug":"springmvc-中如何解决-get-post请求中文乱码问题","link":"#springmvc-中如何解决-get-post请求中文乱码问题","children":[]},{"level":3,"title":"Springmvc 如何做异常处理 ？","slug":"springmvc-如何做异常处理","link":"#springmvc-如何做异常处理","children":[]},{"level":3,"title":"SpringMVC 常用注解都有哪些？","slug":"springmvc-常用注解都有哪些","link":"#springmvc-常用注解都有哪些","children":[]},{"level":3,"title":"如何开启注解处理器和适配器？","slug":"如何开启注解处理器和适配器","link":"#如何开启注解处理器和适配器","children":[]},{"level":3,"title":"Springmvc 的控制器是不是单例模式,如果是,有什么问题,怎么解决？","slug":"springmvc-的控制器是不是单例模式-如果是-有什么问题-怎么解决","link":"#springmvc-的控制器是不是单例模式-如果是-有什么问题-怎么解决","children":[]},{"level":3,"title":"Springmvc 和struts2的区别有哪些?","slug":"springmvc-和struts2的区别有哪些","link":"#springmvc-和struts2的区别有哪些","children":[]},{"level":3,"title":"Springmvc 中对于文件的上传有哪些需要注意","slug":"springmvc-中对于文件的上传有哪些需要注意","link":"#springmvc-中对于文件的上传有哪些需要注意","children":[]},{"level":3,"title":"Springmvc 中拦截器如何使用？","slug":"springmvc-中拦截器如何使用","link":"#springmvc-中拦截器如何使用","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":10.27,"words":3081},"filePathRelative":"20frame/20.SpringMVC/01.SpringMVC面试题.md","localizedDate":"2021年3月18日","autoDesc":true}');export{g as comp,c as data};
