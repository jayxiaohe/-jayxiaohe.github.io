import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as e,w as n,e as l,a as s,r as h,o as p}from"./app-BUJ2iQsf.js";const k={},r=l(`<h2 id="📋-代码" tabindex="-1"><a class="header-anchor" href="#📋-代码"><span>📋 代码</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> leftDepth</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> rightDepth</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> diameterOfBinaryTree</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">TreeNode </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">		dfs</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> dfs</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">TreeNode </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		leftDepth </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> dfs</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">left</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		rightDepth </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> dfs</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">right</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		res </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">res</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> leftDepth </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> rightDepth</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">leftDepth</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> rightDepth</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><p>根据题意，求直径，等效于求路径经过的节点数的最大值减去1。我们可以把某个节点及其左右孩子向下遍历的路径拼接起来得到结果。 上方代码，先传入root。它的左右孩子的深度+1，得到它的深度。而通过root得到的直径，等于它的左右孩子的深度之和。每次计算都把最大深度存入res中。最后，所有的节点都被当做”头“来算了一次。res就是最终的最大值，即二叉树的直径。 总结如下：</p><ol><li>当前节点的深度 = 左右孩子的最大深度 + 1</li><li>当前节点的直径 = 左右孩子的深度之和 3.叶子节点的深度为1，直径为0。</li></ol><p>如下图： <img src="https://iyes.life/post-images/1584199442030.png" alt="" loading="lazy"></p><p>4、5的深度为1，直径为0 3的深度为1，直径为0 2的深度为2（4,5的最大深度+1），直径为2（4.5的深度之和）。 1的深度为3（2,3的最大深度+1），直径为3（2,3的深度之和）</p><br>`,9),d=s("a",{href:"https://leetcode-cn.com/problems/diameter-of-binary-tree/submissions/",class:"LinkCard",target:"_blank"},"LeetCode-543",-1),E=s("br",null,null,-1);function o(g,y){const i=h("center");return p(),t("div",null,[r,e(i,null,{default:n(()=>[d]),_:1}),E])}const u=a(k,[["render",o],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/40algo/50treenode/10easy/lc543/","title":"LeetCode-543 二叉树的直径","lang":"zh-CN","frontmatter":{"title":"LeetCode-543 二叉树的直径","date":"2020-03-10T23:16:25.000Z","permalink":"/40algo/50treenode/10easy/lc543/","order":15,"icon":"leetcode","description":"📋 代码 💡 思路 根据题意，求直径，等效于求路径经过的节点数的最大值减去1。我们可以把某个节点及其左右孩子向下遍历的路径拼接起来得到结果。 上方代码，先传入root。它的左右孩子的深度+1，得到它的深度。而通过root得到的直径，等于它的左右孩子的深度之和。每次计算都把最大深度存入res中。最后，所有的节点都被当做”头“来算了一次。res就是最终...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/50treenode/10easy/lc543/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"LeetCode-543 二叉树的直径"}],["meta",{"property":"og:description","content":"📋 代码 💡 思路 根据题意，求直径，等效于求路径经过的节点数的最大值减去1。我们可以把某个节点及其左右孩子向下遍历的路径拼接起来得到结果。 上方代码，先传入root。它的左右孩子的深度+1，得到它的深度。而通过root得到的直径，等于它的左右孩子的深度之和。每次计算都把最大深度存入res中。最后，所有的节点都被当做”头“来算了一次。res就是最终..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://iyes.life/post-images/1584199442030.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2020-03-10T23:16:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode-543 二叉树的直径\\",\\"image\\":[\\"https://iyes.life/post-images/1584199442030.png\\"],\\"datePublished\\":\\"2020-03-10T23:16:25.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"📋 代码","slug":"📋-代码","link":"#📋-代码","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"40algo/50treenode/10easy/15.leetcode543.md","localizedDate":"2020年3月11日","autoDesc":true}');export{u as comp,v as data};
