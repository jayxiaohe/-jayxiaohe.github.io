import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as n,b as s,d as e,w as t,e as i,r as k,o as p}from"./app-BUJ2iQsf.js";const r={},d=i('<h2 id="介绍下-java-内存区域-运行时数据区" tabindex="-1"><a class="header-anchor" href="#介绍下-java-内存区域-运行时数据区"><span>介绍下 Java 内存区域（运行时数据区）</span></a></h2><p>JDK 1.8 和之前的版本略有不同。</p><figure><img src="https://javaguide.cn/assets/JVM运行时数据区域.406fed56.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区（1.8之前<strong>hotspot</strong>的实现方式是<strong>永久代</strong>。之后是<strong>元空间</strong>，使用的是直接内存）</li><li>直接内存 （非运行时数据区的一部分）</li></ul><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器"><span>程序计数器</span></a></h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，<strong>分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成</strong>。</p><p>另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“<strong>线程私有</strong>”的内存。</p><p><strong>程序计数器是唯一一个不会出现 <code>OutOfMemoryError</code> 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p>',11),E=i(`<h3 id="java虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java虚拟机栈"><span>Java虚拟机栈</span></a></h3><p>Java 虚拟机栈是由一个个栈帧组成。与程序计数器一样，<strong>也是线程私有的</strong>，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</p><p>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。 （而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p><p><strong>Java 虚拟机栈会出现两种错误：<code>StackOverFlowError</code> 和 <code>OutOfMemoryError</code>。</strong></p><ul><li><p><strong><code>StackOverFlowError</code>：</strong> 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。</p></li><li><p><strong><code>OutOfMemoryError</code>：</strong> Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code>异常。</p></li></ul><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈"><span>本地方法栈</span></a></h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 <code>StackOverFlowError</code> 和 <code>OutOfMemoryError</code> 两种错误。</p><p><strong>在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一。</strong></p><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是<strong>存放对象实例</strong>，几乎所有的对象实例以及数组都在这里分配内存。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆（Garbage Collected Heap）</strong>。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden、Survivor、Old 等空间。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p><p>在 JDK 8 版本之前，堆内存被通常分为下面三部分：</p><ol><li>新生代(Young Generation)（Eden S0 S1。8:1:1）</li><li>老年代(Old Generation)</li><li>永久代(Permanent Generation)（永久代可以不考虑。把它看作方法区的具体实现。）</li></ol><p>堆这里最容易出现的就是 <code>OutOfMemoryError</code> 错误</p><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h3><p>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。是线程共享的。</p><p>虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 <strong>Non-Heap（非堆）</strong>，目的应该是与 Java 堆区分开来。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>方法区相当于 『接口』，永久代和元空间则是1.7和1.8版本对它的『实现』。</p><p>方法区是 Java 虚拟机规范中的定义，永久代是 HotSpot 的概念。其他的虚拟机实现并没有永久代这一说法。</p></div><p>垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p><p><strong>常用参数：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 1.7</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">PermSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//方法区 (永久代) 初始大小</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MaxPermSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 1.8。</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//设置 Metaspace 的初始（和最小大小）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MaxMetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//设置 Metaspace 的最大大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与永久代不同，如果不指定<code>Metaspace</code>大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p><h4 id="为什么要将永久代替换为元空间" tabindex="-1"><a class="header-anchor" href="#为什么要将永久代替换为元空间"><span>为什么要将永久代替换为元空间？</span></a></h4><p>主要原因：</p><ol><li>永久代有固定大小的限制，但有时很难确定。动态加载的类过多，容易产生Perm区的OOM。</li><li>对永久代进行调优是很困难的。</li><li>在JDK8合并 HotSpot 和 JRockit。要考虑JRockit客户不配置永久代的习惯。</li></ol>`,27),g=i('<h3 id="运行时常量池-方法区的一部分" tabindex="-1"><a class="header-anchor" href="#运行时常量池-方法区的一部分"><span>运行时常量池（方法区的一部分）</span></a></h3><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）</p><p>会受到方法区内存的限制，当常量池无法再申请到内存时会抛出 <code>OutOfMemoryError</code> 错误。</p><ol><li>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代</li><li>JDK1.7 字符串常量池被<strong>从方法区拿到了堆中</strong>, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆，运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。</li><li>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</li></ol><h3 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存"><span>直接内存</span></a></h3><p><strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 <code>OutOfMemoryError</code> 错误出现。</strong></p><p>JDK1.4 中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）与缓存区（Buffer）的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 <code>DirectByteBuffer</code> 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><h2 id="java-对象的创建过程" tabindex="-1"><a class="header-anchor" href="#java-对象的创建过程"><span>Java 对象的创建过程</span></a></h2><figure><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205231545403.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="step1-类加载检查" tabindex="-1"><a class="header-anchor" href="#step1-类加载检查"><span><strong>Step1:类加载检查</strong></span></a></h3><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><h3 id="step2-分配内存" tabindex="-1"><a class="header-anchor" href="#step2-分配内存"><span>Step2:分配内存</span></a></h3><p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p><h3 id="step3-初始化零值" tabindex="-1"><a class="header-anchor" href="#step3-初始化零值"><span>Step3:初始化零值</span></a></h3><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h3 id="step4-设置对象头" tabindex="-1"><a class="header-anchor" href="#step4-设置对象头"><span>Step4:设置对象头</span></a></h3><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h3 id="step5-执行-init-方法" tabindex="-1"><a class="header-anchor" href="#step5-执行-init-方法"><span>Step5:执行 init 方法</span></a></h3><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>',20),o=i(`<h2 id="对象的访问定位的两种方式-句柄和直接指针两种方式" tabindex="-1"><a class="header-anchor" href="#对象的访问定位的两种方式-句柄和直接指针两种方式"><span>对象的访问定位的两种方式（句柄和直接指针两种方式）</span></a></h2><p>建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有<strong>使用句柄</strong>和<strong>直接指针</strong>两种：</p><p><strong>句柄：</strong> 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p><p><strong>直接指针：</strong> 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。</p><p><strong>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</strong></p><h2 id="string-类和常量池" tabindex="-1"><a class="header-anchor" href="#string-类和常量池"><span>String 类和常量池</span></a></h2><h3 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h3><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。</p><p>字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。称为<strong>常量折叠(Constant Folding)</strong></p><blockquote><p>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区。JDK1.7 的时候，字符串常量池被从方法区拿到了堆中。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str3</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str4</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> //在堆上创建的新的对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str5</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">string</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str5</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str4 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str5</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码中，<code>str1</code>、<code>str2</code>、<code>str3</code>都会被放入常量池，属于字符串常量池中的对象。其中，对于 <code>String str3 = &quot;str&quot; + &quot;ing&quot;;</code> 编译器会优化成 <code>String str3 = &quot;string&quot;;</code> ，因为<code>str3</code>是编译器在程序编译期就可以确定值的常量。</p><p>而对于<code>str4</code>，属于对象引用之间以“+”的方式拼接，实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 <code>String</code> 对象 。上方<code>str4</code>的定义等于：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str4</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此，<code>str4</code> 并不是字符串常量池中存在的对象，属于堆上的新对象。</p><p><strong>特殊情况1：</strong></p><blockquote><p>被 <code>final</code> 关键字修改之后的 <code>String</code> 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就相当于访问常量。如下方代码中的 <code>d</code>。虽然也是以“+”拼接对象引用，但这两个引用是final修饰的，编译器就能确认值。因此<code>d</code>也会被放入常量池，或从常量池中查找。因此<strong>c == d</strong>。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 下面两个表达式其实是等价的</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊情况2：</strong></p><blockquote><p>下方代码中<code>str2</code>虽然也用final修饰了，但它的值来自后面的方法，编译器不能确定。因此不能优化。因此<code>d</code>不能优化，<strong>c == d 返回false</strong>。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> getStr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 在堆上创建的新的对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getStr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ing</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>另一个例子</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">abcd</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 从字符串常量池中拿对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">abcd</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 直接在堆内存空间创建一个新的对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> str3</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">abcd</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 直接在堆内存空间创建一个新的对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str2</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">str3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-intern-方法的含义" tabindex="-1"><a class="header-anchor" href="#string-intern-方法的含义"><span>String.intern()方法的含义？</span></a></h3><p><code>String.intern()</code> 是一个 Native 方法，它的作用是：如果字符串常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，JDK1.7 之前（不包含 1.7）的处理方式是在常量池中创建与此 <code>String</code> 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7 及之后，字符串常量池被从方法区拿到了堆中，jvm 不会在常量池中创建该对象，而是<strong>将堆中这个对象的引用直接放到常量池中</strong>，减少不必要的内存开销。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Javatpoint</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s3</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Javatpoint</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s4</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // True</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // False。s3会直接创建新对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // True。s3.intern()返回的是常量池中这个串的引用，也就是s1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s2</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // False。s2来自常量池，s3来自堆</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s2</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // True。都来自常量池</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s3</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // False。s3来自堆，s4来自常量池</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：我们要尽量避免通过 new 的方式创建字符串。使用双引号声明的 <code>String</code> 对象（ <code>String s1 = &quot;java&quot;</code> ）更利于让编译器有机会优化我们的代码，同时也更易于阅读。</p><h3 id="string-s1-new-string-abc-创建了几个对象" tabindex="-1"><a class="header-anchor" href="#string-s1-new-string-abc-创建了几个对象"><span>String s1 = new String(&quot;abc&quot;) 创建了几个对象？</span></a></h3><p>会创建 1 或 2 个字符串：</p><ul><li>如果字符串常量池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。</li><li>如果字符串常量池中没有字符串常量“abc”，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</li></ul><p><strong>问题：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ja</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">va</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">te</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">st</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码执行的结果是<code>false；true</code>。</p><p>jvm加载的过程中，会在常量池内创建一个“<code>java</code>”字符串。因此，<code>s1.intern()</code>返回的就是加载过程中创建的那个常量池中的字符串，而s1指向堆。二者不一致，返回<code>false</code>。</p><p>而<code>s2.intern()</code>执行时，发现常量池里没有“<code>test</code>”字符串，因此会把堆中<code>s2</code>对象的引用放在常量池中。这正好和<code>s2</code>的引用一致。因此返回<code>true</code>。</p><h2 id="对象已经死亡" tabindex="-1"><a class="header-anchor" href="#对象已经死亡"><span>对象已经死亡？</span></a></h2><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span>引用计数法</span></a></h3><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。</p><p>这个方法实现简单，效率高，但是目前主流的虚拟机中并<strong>没有选择</strong>这个算法来管理内存，其最主要的原因是它很难解决对象之间<strong>相互循环引用</strong>的问题。 相互引用的对象，它们的引用计数器都不为 0，永远无法回收。</p><h3 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法"><span>可达性分析算法</span></a></h3><p>通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</p><p><strong>哪些对象可以作为 GC Roots 呢？</strong></p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul><h2 id="对象可以被回收-就代表一定会被回收吗" tabindex="-1"><a class="header-anchor" href="#对象可以被回收-就代表一定会被回收吗"><span>对象可以被回收，就代表一定会被回收吗？</span></a></h2><p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 <code>finalize</code> 方法。当对象没有覆盖 <code>finalize</code> 方法，或 <code>finalize</code> 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。</p><p>被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p><h2 id="_4种引用类型" tabindex="-1"><a class="header-anchor" href="#_4种引用类型"><span>4种引用类型</span></a></h2><p>JDK1.2 以后，Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）</p><h3 id="强引用-strongreference" tabindex="-1"><a class="header-anchor" href="#强引用-strongreference"><span>强引用（StrongReference）</span></a></h3><p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于<strong>必不可少的生活用品</strong>，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 <code>OutOfMemoryError</code> 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p><h3 id="软引用-softreference" tabindex="-1"><a class="header-anchor" href="#软引用-softreference"><span>软引用（SoftReference）</span></a></h3><p>如果一个对象只具有软引用，那就类似于<strong>可有可无的生活用品</strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><h3 id="弱引用-weakreference" tabindex="-1"><a class="header-anchor" href="#弱引用-weakreference"><span>弱引用（WeakReference）</span></a></h3><p>如果一个对象只具有弱引用，那就类似于<strong>可有可无的生活用品</strong>。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<strong>不管当前内存空间足够与否，都会回收它的内存</strong>。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><h3 id="虚引用-phantomreference" tabindex="-1"><a class="header-anchor" href="#虚引用-phantomreference"><span>虚引用（PhantomReference）</span></a></h3><p>&quot;虚引用&quot;顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p><p><strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p><p><strong>虚引用与软引用和弱引用的一个区别在于：</strong> 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><blockquote><p>在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>。</p></blockquote><h2 id="如何判断一个类是无用的类" tabindex="-1"><a class="header-anchor" href="#如何判断一个类是无用的类"><span>如何判断一个类是无用的类</span></a></h2><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h2 id="垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#垃圾收集算法"><span>垃圾收集算法</span></a></h2>`,66),c=i(`<h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h2><p>JVM 中内置了三个重要的 ClassLoader，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自<code>java.lang.ClassLoader</code>：</p><ol><li><strong>BootstrapClassLoader(启动类加载器)</strong> ：最顶层的加载类，由 C++实现，负责加载 <code>%JAVA_HOME%/lib</code>目录下的 jar 包和类或者被 <code>-Xbootclasspath</code>参数指定的路径中的所有类。</li><li><strong>ExtensionClassLoader(扩展类加载器)</strong> ：主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类，或被 <code>java.ext.dirs</code> 系统变量所指定的路径下的 jar 包。</li><li><strong>AppClassLoader(应用程序类加载器)</strong> ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ol><h2 id="双亲委派模型" tabindex="-1"><a class="header-anchor" href="#双亲委派模型"><span>双亲委派模型</span></a></h2><p>每一个类都有一个对应它的类加载器。系统中的 ClassLoader 在协同工作的时候会默认使用 <strong>双亲委派模型</strong> 。即在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派给父类加载器的 <code>loadClass()</code> 处理，因此所有的请求最终都应该传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为 null 时，会使用启动类加载器 <code>BootstrapClassLoader</code> 作为父类加载器。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> ClassLoaderDemo</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">ClassLoaderDemo</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">ClassLoaderDemo</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">ClassLoaderDemo</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">misc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Launcher$AppClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">18b4aac2</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">misc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Launcher$ExtClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">1b6d3586</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;">null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AppClassLoader</code>的父类加载器为<code>ExtClassLoader</code>， <code>ExtClassLoader</code>的父类加载器为 null，<strong>null 并不代表<code>ExtClassLoader</code>没有父类加载器，而是 <code>BootstrapClassLoader</code></strong> 。因为**<code>BootstrapClassLoader</code>**不是java实现的，所以在java代码里获取不到。</p><h3 id="双亲委派模型的好处" tabindex="-1"><a class="header-anchor" href="#双亲委派模型的好处"><span>双亲委派模型的好处</span></a></h3><p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现多个不同的 <code>Object</code> 类。</p><h2 id="重要的jvm参数" tabindex="-1"><a class="header-anchor" href="#重要的jvm参数"><span>重要的JVM参数</span></a></h2><h3 id="设置内存大小" tabindex="-1"><a class="header-anchor" href="#设置内存大小"><span>设置内存大小</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Xms</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">heap size</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">unit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Xmx</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">heap size</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">unit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>heap size</strong> 表示要初始化内存的具体大小。</li><li><strong>unit</strong> 表示要初始化内存的单位。单位为***“ g”*** (GB) 、<em><strong>“ m”</strong></em>（MB）、<em><strong>“ k”</strong></em>（KB）。</li></ul><p>如，<code>-Xms2G -Xmx5G</code>，表示最小2GB，最大5GB的堆内存。</p><h3 id="设置新生代内存大小" tabindex="-1"><a class="header-anchor" href="#设置新生代内存大小"><span>设置新生代内存大小</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">NewSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">young size</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">unit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MaxNewSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">young size</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">unit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码可以指定新生代内存(Young Ceneration)大小</p><p>如<code>-XX:NewSize=256m -XX:MaxNewSize=1024m</code>表示新生代最小256m，最大 1024m的内存。</p><p>也可以使用<code>-Xmn256m</code> ，表示为新生代分配256m的内存。</p><h3 id="设置新生代和老年代内存的比值" tabindex="-1"><a class="header-anchor" href="#设置新生代和老年代内存的比值"><span>设置新生代和老年代内存的比值</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">NewRatio</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上方代码用来设置新生代和老年代内存的比值。值为1表示新生代与老年代所占比值为1：1，新生代占整个堆栈的 1/2。</p><h3 id="设置方法区-永久代-元空间-大小" tabindex="-1"><a class="header-anchor" href="#设置方法区-永久代-元空间-大小"><span>设置方法区（永久代/元空间）大小</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">PermSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//1.7 方法区 (永久代) 初始大小</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MaxPermSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//1.7 方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码为JDK 1.8 之前永久代还没被彻底移除的时候，用这些参数来调节方法区大小。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//设置 Metaspace 的初始（和最小大小）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">MaxMetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//设置 Metaspace 的最大大小，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。通过上方参数设置。</p><h3 id="设置要使用的垃圾回收器" tabindex="-1"><a class="header-anchor" href="#设置要使用的垃圾回收器"><span>设置要使用的垃圾回收器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">UseSerialGC     </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 串行垃圾收集器</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">UseParallelGC  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 并行垃圾收集器</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">UseParNewGC </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// CMS垃圾收集器。jdk9被deprecated，在jdk14被正式从jdk中删除</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">UseG1GC	</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//  G1垃圾收集器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jdk1.7 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</p><p>jdk1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</p><p>jdk1.9 默认垃圾收集器G1</p><h2 id="jdk-命令行工具" tabindex="-1"><a class="header-anchor" href="#jdk-命令行工具"><span>JDK 命令行工具</span></a></h2><ul><li><strong><code>jps</code></strong> (JVM Process Status）: 类似 UNIX 的 <code>ps</code> 命令。用于查看所有 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息；</li><li><strong><code>jstat</code></strong>（JVM Statistics Monitoring Tool）: 用于收集 HotSpot 虚拟机各方面的运行数据;</li><li><strong><code>jinfo</code></strong> (Configuration Info for Java) : Configuration Info for Java,显示虚拟机配置信息;</li><li><strong><code>jmap</code></strong> (Memory Map for Java) : 生成堆转储快照;</li><li><strong><code>jhat</code></strong> (JVM Heap Dump Browser) : 用于分析 heapdump 文件，它会建立一个 HTTP/HTML 服务器，让用户可以在浏览器上查看分析结果;</li><li><strong><code>jstack</code></strong> (Stack Trace for Java) : 生成虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合</li></ul><h2 id="jdk-可视化分析工具" tabindex="-1"><a class="header-anchor" href="#jdk-可视化分析工具"><span>JDK 可视化分析工具</span></a></h2><p>JConsole:Java 监视与管理控制台</p><p>Visual VM:多合一故障处理工具</p>`,39);function y(v,u){const a=k("RouteLink");return p(),l("div",null,[d,n("p",null,[s("具体内容见 "),e(a,{to:"/jvm/register/"},{default:t(()=>[s("这里")]),_:1})]),E,n("p",null,[s("具体见 "),e(a,{to:"/jvm/methodarea/#_5-1-%E6%BC%94%E8%BF%9B%E7%BB%86%E8%8A%82"},{default:t(()=>[s("这里")]),_:1})]),g,n("p",null,[s("具体见 "),e(a,{to:"/jvm/object/#_1-1-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F"},{default:t(()=>[s("这里")]),_:1})]),o,n("p",null,[s("具体见 "),e(a,{to:"/jvm/gc/#_6-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95"},{default:t(()=>[s("这里")]),_:1})]),c])}const F=h(r,[["render",y],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/01java/40jvm/interview/","title":"JVM面试题","lang":"zh-CN","frontmatter":{"title":"JVM面试题","order":0,"date":"2022-05-21T16:32:26.000Z","permalink":"/01java/40jvm/interview/","icon":"wenzhang","description":"介绍下 Java 内存区域（运行时数据区） JDK 1.8 和之前的版本略有不同。 11 线程私有的： 程序计数器 虚拟机栈 本地方法栈 线程共享的： 堆 方法区（1.8之前hotspot的实现方式是永久代。之后是元空间，使用的是直接内存） 直接内存 （非运行时数据区的一部分） 程序计数器 程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/interview/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"JVM面试题"}],["meta",{"property":"og:description","content":"介绍下 Java 内存区域（运行时数据区） JDK 1.8 和之前的版本略有不同。 11 线程私有的： 程序计数器 虚拟机栈 本地方法栈 线程共享的： 堆 方法区（1.8之前hotspot的实现方式是永久代。之后是元空间，使用的是直接内存） 直接内存 （非运行时数据区的一部分） 程序计数器 程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javaguide.cn/assets/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.406fed56.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM面试题\\",\\"image\\":[\\"https://javaguide.cn/assets/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.406fed56.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205231545403.png\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"介绍下 Java 内存区域（运行时数据区）","slug":"介绍下-java-内存区域-运行时数据区","link":"#介绍下-java-内存区域-运行时数据区","children":[{"level":3,"title":"程序计数器","slug":"程序计数器","link":"#程序计数器","children":[]},{"level":3,"title":"Java虚拟机栈","slug":"java虚拟机栈","link":"#java虚拟机栈","children":[]},{"level":3,"title":"本地方法栈","slug":"本地方法栈","link":"#本地方法栈","children":[]},{"level":3,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":3,"title":"方法区","slug":"方法区","link":"#方法区","children":[]},{"level":3,"title":"运行时常量池（方法区的一部分）","slug":"运行时常量池-方法区的一部分","link":"#运行时常量池-方法区的一部分","children":[]},{"level":3,"title":"直接内存","slug":"直接内存","link":"#直接内存","children":[]}]},{"level":2,"title":"Java 对象的创建过程","slug":"java-对象的创建过程","link":"#java-对象的创建过程","children":[{"level":3,"title":"Step1:类加载检查","slug":"step1-类加载检查","link":"#step1-类加载检查","children":[]},{"level":3,"title":"Step2:分配内存","slug":"step2-分配内存","link":"#step2-分配内存","children":[]},{"level":3,"title":"Step3:初始化零值","slug":"step3-初始化零值","link":"#step3-初始化零值","children":[]},{"level":3,"title":"Step4:设置对象头","slug":"step4-设置对象头","link":"#step4-设置对象头","children":[]},{"level":3,"title":"Step5:执行 init 方法","slug":"step5-执行-init-方法","link":"#step5-执行-init-方法","children":[]}]},{"level":2,"title":"对象的访问定位的两种方式（句柄和直接指针两种方式）","slug":"对象的访问定位的两种方式-句柄和直接指针两种方式","link":"#对象的访问定位的两种方式-句柄和直接指针两种方式","children":[]},{"level":2,"title":"String 类和常量池","slug":"string-类和常量池","link":"#string-类和常量池","children":[{"level":3,"title":"常量池","slug":"常量池","link":"#常量池","children":[]},{"level":3,"title":"String.intern()方法的含义？","slug":"string-intern-方法的含义","link":"#string-intern-方法的含义","children":[]},{"level":3,"title":"String s1 = new String(\\"abc\\") 创建了几个对象？","slug":"string-s1-new-string-abc-创建了几个对象","link":"#string-s1-new-string-abc-创建了几个对象","children":[]}]},{"level":2,"title":"对象已经死亡？","slug":"对象已经死亡","link":"#对象已经死亡","children":[{"level":3,"title":"引用计数法","slug":"引用计数法","link":"#引用计数法","children":[]},{"level":3,"title":"可达性分析算法","slug":"可达性分析算法","link":"#可达性分析算法","children":[]}]},{"level":2,"title":"对象可以被回收，就代表一定会被回收吗？","slug":"对象可以被回收-就代表一定会被回收吗","link":"#对象可以被回收-就代表一定会被回收吗","children":[]},{"level":2,"title":"4种引用类型","slug":"_4种引用类型","link":"#_4种引用类型","children":[{"level":3,"title":"强引用（StrongReference）","slug":"强引用-strongreference","link":"#强引用-strongreference","children":[]},{"level":3,"title":"软引用（SoftReference）","slug":"软引用-softreference","link":"#软引用-softreference","children":[]},{"level":3,"title":"弱引用（WeakReference）","slug":"弱引用-weakreference","link":"#弱引用-weakreference","children":[]},{"level":3,"title":"虚引用（PhantomReference）","slug":"虚引用-phantomreference","link":"#虚引用-phantomreference","children":[]}]},{"level":2,"title":"如何判断一个类是无用的类","slug":"如何判断一个类是无用的类","link":"#如何判断一个类是无用的类","children":[]},{"level":2,"title":"垃圾收集算法","slug":"垃圾收集算法","link":"#垃圾收集算法","children":[]},{"level":2,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[]},{"level":2,"title":"双亲委派模型","slug":"双亲委派模型","link":"#双亲委派模型","children":[{"level":3,"title":"双亲委派模型的好处","slug":"双亲委派模型的好处","link":"#双亲委派模型的好处","children":[]}]},{"level":2,"title":"重要的JVM参数","slug":"重要的jvm参数","link":"#重要的jvm参数","children":[{"level":3,"title":"设置内存大小","slug":"设置内存大小","link":"#设置内存大小","children":[]},{"level":3,"title":"设置新生代内存大小","slug":"设置新生代内存大小","link":"#设置新生代内存大小","children":[]},{"level":3,"title":"设置新生代和老年代内存的比值","slug":"设置新生代和老年代内存的比值","link":"#设置新生代和老年代内存的比值","children":[]},{"level":3,"title":"设置方法区（永久代/元空间）大小","slug":"设置方法区-永久代-元空间-大小","link":"#设置方法区-永久代-元空间-大小","children":[]},{"level":3,"title":"设置要使用的垃圾回收器","slug":"设置要使用的垃圾回收器","link":"#设置要使用的垃圾回收器","children":[]}]},{"level":2,"title":"JDK 命令行工具","slug":"jdk-命令行工具","link":"#jdk-命令行工具","children":[]},{"level":2,"title":"JDK 可视化分析工具","slug":"jdk-可视化分析工具","link":"#jdk-可视化分析工具","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":24.07,"words":7220},"filePathRelative":"01java/40jvm/00.JVM面试题.md","localizedDate":"2022年5月22日","autoDesc":true}');export{F as comp,m as data};
