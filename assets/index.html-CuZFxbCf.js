import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,w as h,e as l,a as i,r as k,o as e}from"./app-BUJ2iQsf.js";const p={},d=l(`<h2 id="📋-代码1-动态规划" tabindex="-1"><a class="header-anchor" href="#📋-代码1-动态规划"><span>📋 代码1 - 动态规划</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> lengthOfLIS</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> nums</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">		// 判断入参。如果是以下情况则直接返回0。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">nums </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> nums</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> max</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> dp</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">nums</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">		// 初始化dp数组中的元素，全部置为1。因为子序列长度至少为1（特殊情况第1行已经判断过）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">		Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">			for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">				if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">nums</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> nums</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">					// 如果i处元素大于j处元素，则给dp[i]赋值。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">					dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">			max </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">dp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">			// 内部for执行一圈下来，dp[i]的值和在 i处的max的值都确定了。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">		//外部for执行完毕后，dp数组的值都设置完了，最终的max也得到了。返回max即可。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="💡-思路1-动态规划" tabindex="-1"><a class="header-anchor" href="#💡-思路1-动态规划"><span>💡 思路1 - 动态规划</span></a></h2><p>动态规划的重点，就是找到状态转移方程。本题也不例外。 定义 dp[i] 为前 i 个元素中的最长上升子序列的长度（包含 nums[i] ）。那么最大值就是 max( dp[i] )，即dp数组中的最大值。 从小到大计算dp[i]，在计算dp[i]前，i 之前的值已经得到。则状态转移方程为： dp[i] = max(dp[j]) + 1 其中，j &lt; i，且必须满足 nums[i] &gt; nums[j]。对每个 i ，遍历完0~i-1，如果存在这样的值（j &lt; i，且 nums[i] &gt; nums[j]），则dp[i] 就是dp[j] + 1，否则，dp[i]为1。 为了不再最后遍历dp数组来获取最大值，每确定一个dp[i]就更新一次max。循环结束后，直接返回max即可。</p><br><h2 id="💡-思路2-二分查找" tabindex="-1"><a class="header-anchor" href="#💡-思路2-二分查找"><span>💡 思路2 - 二分查找</span></a></h2><p>待补充。</p><br>`,9),r=i("a",{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",class:"LinkCard",target:"_blank"},"LeetCode-300",-1),E=i("br",null,null,-1);function g(y,c){const s=k("center");return e(),n("div",null,[d,t(s,null,{default:h(()=>[r]),_:1}),E])}const A=a(p,[["render",g],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/40algo/10array/lc300/","title":"300-最大上升子序列","lang":"zh-CN","frontmatter":{"title":"300-最大上升子序列","date":"2020-03-14T23:18:06.000Z","permalink":"/40algo/10array/lc300/","order":1,"icon":"leetcode","description":"📋 代码1 - 动态规划 💡 思路1 - 动态规划 动态规划的重点，就是找到状态转移方程。本题也不例外。 定义 dp[i] 为前 i 个元素中的最长上升子序列的长度（包含 nums[i] ）。那么最大值就是 max( dp[i] )，即dp数组中的最大值。 从小到大计算dp[i]，在计算dp[i]前，i 之前的值已经得到。则状态转移方程为： dp[...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/10array/lc300/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"300-最大上升子序列"}],["meta",{"property":"og:description","content":"📋 代码1 - 动态规划 💡 思路1 - 动态规划 动态规划的重点，就是找到状态转移方程。本题也不例外。 定义 dp[i] 为前 i 个元素中的最长上升子序列的长度（包含 nums[i] ）。那么最大值就是 max( dp[i] )，即dp数组中的最大值。 从小到大计算dp[i]，在计算dp[i]前，i 之前的值已经得到。则状态转移方程为： dp[..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2020-03-14T23:18:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"300-最大上升子序列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-03-14T23:18:06.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"📋 代码1 - 动态规划","slug":"📋-代码1-动态规划","link":"#📋-代码1-动态规划","children":[]},{"level":2,"title":"💡 思路1 - 动态规划","slug":"💡-思路1-动态规划","link":"#💡-思路1-动态规划","children":[]},{"level":2,"title":"💡 思路2 - 二分查找","slug":"💡-思路2-二分查找","link":"#💡-思路2-二分查找","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1},{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":1.53,"words":460},"filePathRelative":"40algo/10array/01.leetcode300.md","localizedDate":"2020年3月15日","autoDesc":true}');export{A as comp,u as data};
