import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,e as l}from"./app-BUJ2iQsf.js";const n={},e=l(`<h2 id="内存结构概述" tabindex="-1"><a class="header-anchor" href="#内存结构概述"><span>内存结构概述</span></a></h2><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521224946.png" width="60%"><div class="hint-container note"><p class="hint-container-title">tips</p><p>方法区：只有 HotSpot VM 才有。jdk7之前称为永久代，jdk7之后称为元空间。</p><p>方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代/元空间就是HotSpot VM对虚拟机规范中方法区的一种实现方式。</p></div><h2 id="类的加载过程" tabindex="-1"><a class="header-anchor" href="#类的加载过程"><span>类的加载过程</span></a></h2><figure><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521225621.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>类加载器系统负责从文件系统或者网络中加载 Class 文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由执行引擎（Execution Engine）决定</li><li>加载的类信息存放于一块称为<strong>方法区</strong>的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是 Class 文件中常量池部分的内存映射）</li></ul><div class="hint-container note"><p class="hint-container-title">tips</p><p>类的加载过程分为3个环节：<strong>加载</strong>、<strong>链接</strong>、<strong>初始化</strong></p></div><h3 id="step1-加载-loading" tabindex="-1"><a class="header-anchor" href="#step1-加载-loading"><span>step1：加载（Loading）</span></a></h3><h4 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的 <code>java.langClass</code> 对象，作为方法区这个类的各种数据的访问入口</li></ol><h4 id="加载-class-文件的方式" tabindex="-1"><a class="header-anchor" href="#加载-class-文件的方式"><span>加载 .class 文件的方式</span></a></h4><ul><li>从本地系统中直接加载</li><li>通过网络获取，典型场景：webApplet</li><li>从 zip 压缩包中读取，成为日后jar、war格式的基础</li><li>运行时计算生成，使用最多的是：动态代理技术</li><li>由其他文件生成，典型场景：JSP应用</li><li>从专有数据库中提取 .class 文件，比较少见</li><li>从加密文件中获取，典型的防 Class 文件被反编译的保护措施</li></ul><h3 id="step2-链接-linking" tabindex="-1"><a class="header-anchor" href="#step2-链接-linking"><span>step2：链接（Linking）</span></a></h3><p>主要分为 3 部分：验证、准备、解析</p><ul><li>验证 <ol><li>目的在于确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li><li>主要包括四种验证，文件格式验证，源数据验证，字节码验证，符号引用验证</li></ol></li><li>准备 <ol><li>为类变量分配内存并且设置该类变量的默认初始值，即零值</li><li>这里不包含用 final 修饰的 static，因为 final 在编译的时候就会分配了，准备阶段会显式初始化</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ol></li><li>解析 <ol><li>将常量池内的符号引用转换为直接引用的过程</li><li>事实上，解析操作往往会伴随着jvm在执行完初始化之后再执行</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等</li></ol></li></ul><h3 id="step3-初始化-initialization" tabindex="-1"><a class="header-anchor" href="#step3-初始化-initialization"><span>step3：初始化（Initialization）</span></a></h3><ul><li>初始化阶段就是执行类构造器方法&lt;clinit&gt;()的过程</li><li>这个方法不需要定义，是 javac 编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并而来。如果没有静态变量的赋值以及没有静态代码块，就不会有&lt;clinit&gt;()方法</li><li>构造器方法中指令按语句在源文件中出现的顺序执行</li><li>&lt;cinit&gt;()不同于类的构造器。（关联：构造器是虚拟机视角下的&lt;init&gt;() ）</li><li>若该类具有父类，JVM会保证子类的&lt;clinit&gt;()执行前，父类的&lt;clinit&gt;()已经执行完毕</li><li>虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁。即一个类只需被clinit一次，之后该类的内部信息就被存储在方法区</li></ul><h2 id="类加载器分类" tabindex="-1"><a class="header-anchor" href="#类加载器分类"><span>类加载器分类</span></a></h2><ul><li>JVM 支持<strong>两种</strong>类型的类加载器，分别为引导类加载器（Bootstrap CIassLoader）和自定义类加载器（User-Defined CIassLoader）。</li><li>从概念上来讲，自定义类加载器一般指的是程序中开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器，包括 Extension Class Loader、System Class Loader。</li><li>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</li></ul><figure><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521231227.png" alt="1595094774889-fbc2624a-ce0c-458e-85a2-ae4b5cee3179" tabindex="0" loading="lazy"><figcaption>1595094774889-fbc2624a-ce0c-458e-85a2-ae4b5cee3179</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意上图中的加载器划分关系为<strong>包含关系</strong>，并不是继承关系。 用户自定义的类是由系统类加载器加载的。即 AppClassLoader。 String 类等核心类库是由引导类加载器加载的。即由 BootStrap Class Loader 加载。在代码中尝试获取这个类加载器时，会返回 null。</p></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//获取系统类加载器 -&gt; sun.misc.Launcher$AppClassLoader@659e0bfd</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ClassLoader</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> systemClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> ClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">systemClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//获取其上层：扩展类加载器 -&gt; sun.misc.Launcher$ExtClassLoader@6d06d69c</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ClassLoader</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> extClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> systemClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">extClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//获取其上层：bootstrapClassLoader：null</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ClassLoader</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> bootstrapClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> extClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">bootstrapClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//对于用户定义的类来说，默认使用系统类加载器加载 -&gt; sun.misc.Launcher$AppClassLoader@659e0bfd</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ClassLoader</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> classLoader</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> ClassLoaderTest</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">classLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// String 类的加载器为 bootstrapClassLoader。打印为 null。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-启动类加载器-引导类加载器-bootstrap-classloader" tabindex="-1"><a class="header-anchor" href="#_1-启动类加载器-引导类加载器-bootstrap-classloader"><span>1. 启动类加载器（引导类加载器，Bootstrap ClassLoader）</span></a></h3><ul><li>这个类加载使用 c/c++ 语言实现的，嵌套在 JVM 内部。</li><li>它用来加载 Java 的核心库（JAVA_HOME/jre/1ib/rt.jar、resources.jar 或 sun.boot.class.path 路径下的内容），用于提供 JVM 自身需要的类。</li><li>并不继承自 java.Iang.ClassLoader（不是用java实现的），没有父加载器。</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li><li>出于安全考虑，Bootstrap 启动类加载器只加载包名为java、javax、sun 等开头的类。</li></ul><h3 id="_2-扩展类加载器-extension-classloader" tabindex="-1"><a class="header-anchor" href="#_2-扩展类加载器-extension-classloader"><span>2. 扩展类加载器（Extension ClassLoader）</span></a></h3><ul><li>Java语音编写，由 sun.misc.Launcher$ExtClassLoader 实现</li><li>派生于 ClassLoader 类</li><li>父类加载器为启动类加载器</li><li>从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 的安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载</li></ul><h3 id="_3-应用程序类加载器-系统类加载器-appclassloader" tabindex="-1"><a class="header-anchor" href="#_3-应用程序类加载器-系统类加载器-appclassloader"><span>3. 应用程序类加载器（系统类加载器，AppClassLoader）</span></a></h3><ul><li>java 语音编写，由 sun.misc.Launcher$AppClassLoader 实现</li><li>派生于 ClassLoader 类</li><li>父类加载器为扩展类加载器</li><li>它负责加载环境变量 classpath 或系统属性 java.class.path 指定路径下的类库</li><li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</li><li>通过 ClassLoader#getsystemClassLoader() 方法可以获取到该类加载器</li></ul><h3 id="_4-用户自定义类加载器" tabindex="-1"><a class="header-anchor" href="#_4-用户自定义类加载器"><span>4. 用户自定义类加载器</span></a></h3><h4 id="为什么需要自定义类加载器" tabindex="-1"><a class="header-anchor" href="#为什么需要自定义类加载器"><span>为什么需要自定义类加载器？</span></a></h4><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄漏</li></ul><h4 id="如何自定义类加载器" tabindex="-1"><a class="header-anchor" href="#如何自定义类加载器"><span>如何自定义类加载器？</span></a></h4><ul><li>开发人员可以通过继承抽象类 java.lang.ClassLoader 类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在 JDKI.2 之前，在自定义类加载器时，总会去继承 ClassLoader 类并重写 loadClass() 方法，从而实现自定义的类加载类，但是在 JDKI.2 之后己不再建议用户去覆盖 loadClass() 方法，而是建议把自定义的类加载逻辑写在 findClass() 方法中</li><li>在编与自定义类加载器时，如果没有太过于复杂的需求，可以直接继承 URLClassLoader 类，这样就可以避免自己去编写 findClass() 方法及其获取字节码流的方式，使自定义类加载器编写更加简洁</li></ul><h2 id="classloader-的使用说明" tabindex="-1"><a class="header-anchor" href="#classloader-的使用说明"><span>ClassLoader 的使用说明</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ClassLoader 类是一个抽象类，其后所有的类加载器都继承自 ClassLoader（不包括启动类加载器） 该类全限定名：<strong>java.lang.ClassLoader</strong></p></div><figure><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521231844.png" alt="1595518477978-03c1006e-809c-47ae-ad0a-61fcdc9220af" tabindex="0" loading="lazy"><figcaption>1595518477978-03c1006e-809c-47ae-ad0a-61fcdc9220af</figcaption></figure><h3 id="获取-classloader-的途径" tabindex="-1"><a class="header-anchor" href="#获取-classloader-的途径"><span>获取 ClassLoader 的途径</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">getClass</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 使用当前类的ClassLoader</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Thread</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getContextClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 使用当前线程的ClassLoader</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">ClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 使用系统ClassLoader，即系统的入口点所使用的ClassLoader</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">DriverManager</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getCallerClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 获取调用者的 ClassLoader。如本地方法调用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制"><span>双亲委派机制</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的 class 文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。</p></div><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载</li></ul><h3 id="沙箱安全机制" tabindex="-1"><a class="header-anchor" href="#沙箱安全机制"><span>沙箱安全机制</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">测试自定义java.lang.String类！</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">/** 执行结果：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">   public static void main(String[] args)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">**/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义<code>java.lang.String</code>类，但是在加载自定义<code>String</code>类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件 (rt.jar包中java\\lang\\String.class)，报错信息说没有main方法，就是因为加载的是rt.jar包中的<code>String</code>类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心 API 被随意篡改。如： <ul><li>自定义类：java.lang.String</li><li>自定义类：java.lang.Test (java开头的包名，会被引导类加载器加载。如果该类下有main方法，试图执行时会报错：java.lang.SecurityException)</li></ul></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="_1-jvm判断2个class对象是否为同一个类的两个必要条件" tabindex="-1"><a class="header-anchor" href="#_1-jvm判断2个class对象是否为同一个类的两个必要条件"><span>1. JVM判断2个class对象是否为同一个类的两个必要条件</span></a></h3><ul><li>类的完整类名必须一致，包括包名</li><li>加载这个类的 ClassLoader（指ClassLoader实例对象）必须相同 :::tips 换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的CIassLoader实例对象不同，那么这两个类对象也是不相等的。</li></ul><h3 id="_2-对类加载器的引用" tabindex="-1"><a class="header-anchor" href="#_2-对类加载器的引用"><span>2. 对类加载器的引用</span></a></h3><p>JVM 必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将<strong>这个类加载器的一个引用作为类型信息的一部分保存在方法区中</strong>。当解析一个类型到另一个类型的引用的时候，JVM 需要保证这两个类型的类加载器是相同的。</p><h3 id="_3-类的主动使用和被动使用" tabindex="-1"><a class="header-anchor" href="#_3-类的主动使用和被动使用"><span>3. 类的主动使用和被动使用</span></a></h3><p>Java 程序对类的使用方式分为：主动使用和被动使用 主动使用，又分为七种情况：</p><ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量賦值</li><li>调用类的静态方法</li><li>反射（比如：Class.forName(&quot;com.hpt.Test&quot;)）</li><li>初始化一个类的子类</li><li>Java 虚拟机启动时被标明为启动类的类</li><li>JDK7 开始提供的动态语言支持： <ul><li>java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类未初始化，则初始化</li></ul></li></ul><p>除了以上七种情况，其他使用Java类的方式都被看作是对类的<strong>被动使用，都不会导致类的初始化</strong>。</p>`,56),t=[e];function h(p,r){return a(),i("div",null,t)}const o=s(n,[["render",h],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/01java/40jvm/load/","title":"类加载子系统","lang":"zh-CN","frontmatter":{"title":"类加载子系统","date":"2022-05-21T16:32:26.000Z","order":5,"permalink":"/01java/40jvm/load/","icon":"wenzhang","description":"内存结构概述 tips 方法区：只有 HotSpot VM 才有。jdk7之前称为永久代，jdk7之后称为元空间。 方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代/元空间就是HotSpot VM对虚拟机规范中方法区的一种实现方式。 类的加载过程 类加载器系统负责从文件系统或者网络中加载 Class 文件，class文件在文件开...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/load/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"类加载子系统"}],["meta",{"property":"og:description","content":"内存结构概述 tips 方法区：只有 HotSpot VM 才有。jdk7之前称为永久代，jdk7之后称为元空间。 方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代/元空间就是HotSpot VM对虚拟机规范中方法区的一种实现方式。 类的加载过程 类加载器系统负责从文件系统或者网络中加载 Class 文件，class文件在文件开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521225621.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载子系统\\",\\"image\\":[\\"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521225621.png\\",\\"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521231227.png\\",\\"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220521231844.png\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"内存结构概述","slug":"内存结构概述","link":"#内存结构概述","children":[]},{"level":2,"title":"类的加载过程","slug":"类的加载过程","link":"#类的加载过程","children":[{"level":3,"title":"step1：加载（Loading）","slug":"step1-加载-loading","link":"#step1-加载-loading","children":[]},{"level":3,"title":"step2：链接（Linking）","slug":"step2-链接-linking","link":"#step2-链接-linking","children":[]},{"level":3,"title":"step3：初始化（Initialization）","slug":"step3-初始化-initialization","link":"#step3-初始化-initialization","children":[]}]},{"level":2,"title":"类加载器分类","slug":"类加载器分类","link":"#类加载器分类","children":[{"level":3,"title":"1. 启动类加载器（引导类加载器，Bootstrap ClassLoader）","slug":"_1-启动类加载器-引导类加载器-bootstrap-classloader","link":"#_1-启动类加载器-引导类加载器-bootstrap-classloader","children":[]},{"level":3,"title":"2. 扩展类加载器（Extension ClassLoader）","slug":"_2-扩展类加载器-extension-classloader","link":"#_2-扩展类加载器-extension-classloader","children":[]},{"level":3,"title":"3. 应用程序类加载器（系统类加载器，AppClassLoader）","slug":"_3-应用程序类加载器-系统类加载器-appclassloader","link":"#_3-应用程序类加载器-系统类加载器-appclassloader","children":[]},{"level":3,"title":"4. 用户自定义类加载器","slug":"_4-用户自定义类加载器","link":"#_4-用户自定义类加载器","children":[]}]},{"level":2,"title":"ClassLoader 的使用说明","slug":"classloader-的使用说明","link":"#classloader-的使用说明","children":[{"level":3,"title":"获取 ClassLoader 的途径","slug":"获取-classloader-的途径","link":"#获取-classloader-的途径","children":[]}]},{"level":2,"title":"双亲委派机制","slug":"双亲委派机制","link":"#双亲委派机制","children":[{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"沙箱安全机制","slug":"沙箱安全机制","link":"#沙箱安全机制","children":[]},{"level":3,"title":"优势","slug":"优势","link":"#优势","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"1. JVM判断2个class对象是否为同一个类的两个必要条件","slug":"_1-jvm判断2个class对象是否为同一个类的两个必要条件","link":"#_1-jvm判断2个class对象是否为同一个类的两个必要条件","children":[]},{"level":3,"title":"2. 对类加载器的引用","slug":"_2-对类加载器的引用","link":"#_2-对类加载器的引用","children":[]},{"level":3,"title":"3. 类的主动使用和被动使用","slug":"_3-类的主动使用和被动使用","link":"#_3-类的主动使用和被动使用","children":[]}]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":10.36,"words":3109},"filePathRelative":"01java/40jvm/05.类加载子系统.md","localizedDate":"2022年5月22日","autoDesc":true}');export{o as comp,c as data};
