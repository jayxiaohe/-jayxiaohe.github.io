import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as e,w as l,e as t,a as s,r as h,o as p}from"./app-BUJ2iQsf.js";const k={},r=t(`<h2 id="💬-描述" tabindex="-1"><a class="header-anchor" href="#💬-描述"><span>💬 描述</span></a></h2><p>反转一个单链表。 <strong>示例 1:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span></span>
<span class="line"><span>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>进阶:</strong> 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ <br></p><h2 id="📋-代码1-迭代" tabindex="-1"><a class="header-anchor" href="#📋-代码1-迭代"><span>📋 代码1 - 迭代</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> * public class ListNode {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> *     int val;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> *     ListNode next;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> *     ListNode(int x) { val = x; }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ListNode </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">reverseList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ListNode </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        ListNode</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> pre</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        ListNode</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> cur</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        ListNode</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> tmp</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">cur </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            tmp </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> cur</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">            cur</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> pre</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            pre </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> cur</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            cur </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> tmp</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> pre</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度：</strong> 时间复杂度：O(n)，假设 n 是列表的长度，时间复杂度是 O(n)。 空间复杂度：O(1)。 <br></p><h2 id="📋-代码2-递归" tabindex="-1"><a class="header-anchor" href="#📋-代码2-递归"><span>📋 代码2 - 递归</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ListNode </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">reverseList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ListNode head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">head </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    ListNode</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> reverseList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    head</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">next</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度：</strong> 时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。 空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。 <br></p><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><p>迭代： 要反转链表，实际上就是要反转所有相邻节点之间的指针。如代码所示，我们先定义3个指针，cur指向head, tmp指向它的下一个节点，pre指向它的上一个节点。然后进入循环。 在循环中，先找到下一个节点赋值给tmp，防止反转后丢失后续的节点。再把cur的next指向前一个节点（反转）。再进行一次右移：pre移到cur处，cur移到tmp处。 此时，头结点（pre节点）从链表中独立了出来，cur指向了第二个节点。在第二轮循环中，通过 cur.next = pre，把原来的头结点链到第二个节点之后。这就实现了前2个节点的反转。继续循环... 最终，pre会指到最后一个节点处。返回pre即可。 递归： 从后到前进行反转。具体可参照代码。下面附上力扣评论区的解读： 不妨假设链表为1，2，3，4，5。按照递归，当执行reverseList（5）的时候返回了5这个节点，reverseList(4)中的p就是5这个节点，我们看看reverseList（4）接下来执行完之后，5-&gt;next = 4, 4-&gt;next = null。这时候返回了p这个节点，也就是链表5-&gt;4-&gt;null，接下来执行reverseList（3），代码解析为4-&gt;next = 3,3-&gt;next = null，这个时候p就变成了，5-&gt;4-&gt;3-&gt;null, reverseList(2), reverseList(1)依次类推，p就是:5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;null <br></p>`,12),d=s("a",{href:"https://leetcode-cn.com/problems/reverse-linked-list/",class:"LinkCard",target:"_blank"},"LeetCode-206",-1),E=s("br",null,null,-1);function g(c,y){const i=h("center");return p(),n("div",null,[r,e(i,null,{default:l(()=>[d]),_:1}),E])}const u=a(k,[["render",g],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/40algo/30listnode/lc206/","title":"LeetCode-206 反转链表","lang":"zh-CN","frontmatter":{"title":"LeetCode-206 反转链表","date":"2020-02-19T10:15:58.000Z","permalink":"/40algo/30listnode/lc206/","order":5,"icon":"leetcode","description":"💬 描述 反转一个单链表。 示例 1: 进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 📋 代码1 - 迭代 复杂度： 时间复杂度：O(n)，假设 n 是列表的长度，时间复杂度是 O(n)。 空间复杂度：O(1)。 📋 代码2 - 递归 复杂度： 时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。 空间复...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/30listnode/lc206/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"LeetCode-206 反转链表"}],["meta",{"property":"og:description","content":"💬 描述 反转一个单链表。 示例 1: 进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 📋 代码1 - 迭代 复杂度： 时间复杂度：O(n)，假设 n 是列表的长度，时间复杂度是 O(n)。 空间复杂度：O(1)。 📋 代码2 - 递归 复杂度： 时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。 空间复..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2020-02-19T10:15:58.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode-206 反转链表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-19T10:15:58.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"💬 描述","slug":"💬-描述","link":"#💬-描述","children":[]},{"level":2,"title":"📋 代码1 - 迭代","slug":"📋-代码1-迭代","link":"#📋-代码1-迭代","children":[]},{"level":2,"title":"📋 代码2 - 递归","slug":"📋-代码2-递归","link":"#📋-代码2-递归","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"40algo/30listnode/05.leetcode206.md","localizedDate":"2020年2月19日","autoDesc":true}');export{u as comp,m as data};
