import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,e}from"./app-BUJ2iQsf.js";const t={},l=e(`<h2 id="什么是mybatis" tabindex="-1"><a class="header-anchor" href="#什么是mybatis"><span>什么是Mybatis？</span></a></h2><ol><li>Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，加载驱动、创建连接、创建statement等繁杂的过程，开发者开发时只需要关注如何编写SQL语句，可以严格控制sql执行性能，灵活度高。</li><li>作为一个半ORM框架，MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li></ol><blockquote><p>称Mybatis是半自动ORM映射工具，是因为在查询关联对象或关联集合对象时，需要手动编写sql来完成。不像Hibernate这种全自动ORM映射工具，Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取。</p></blockquote><ol start="3"><li>通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</li><li>由于MyBatis专注于SQL本身，灵活度高，所以比较适合对性能的要求很高，或者需求变化较多的项目，如互联网项目。</li></ol><h2 id="mybaits的优缺点" tabindex="-1"><a class="header-anchor" href="#mybaits的优缺点"><span>Mybaits的优缺点</span></a></h2><p><strong>优点：</strong></p><ol><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接。</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</li><li>能够与Spring很好的集成。</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</li></ol><p><strong>缺点：</strong></p><ol><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</li></ol><h2 id="mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" tabindex="-1"><a class="header-anchor" href="#mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式"><span>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</span></a></h2><p>第一种是使用<code>&lt;resultMap&gt;</code>标签，逐一定义数据库列名和对象属性名之间的映射关系。</p><p>第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</p><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h2 id="使用mybatis的mapper接口调用时有哪些要求" tabindex="-1"><a class="header-anchor" href="#使用mybatis的mapper接口调用时有哪些要求"><span>使用MyBatis的mapper接口调用时有哪些要求？</span></a></h2><p>Mapper接口里的方法名和mapper.xml中定义的每个sql的id相同</p><p>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</p><p>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p><p>Mapper.xml文件中的namespace即是mapper接口的类路径</p><h2 id="和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#和-的区别是什么"><span>#{}和\${}的区别是什么？</span></a></h2><ul><li><code>\${}</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于静态文本替换，比如<code>\${driver}</code>会被静态替换为<code>com.mysql.jdbc.Driver</code>。</li><li><code>#{}</code>是 sql 的参数占位符，MyBatis 会将 sql 中的<code>#{}</code>替换为<code>?</code>号，在 sql 执行前会使用 <code>PreparedStatement</code> 的参数设置方法，按序给 sql 的<code>?</code>号占位符设置参数值，比如 <code>ps.setInt(0, parameterValue)</code>。<code>#{item.name}</code> 的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于 <code>param.getItem().getName()</code>。</li></ul><h2 id="xml-映射文件中-除了常见的-select-insert-update-delete-标签之外-还有哪些标签" tabindex="-1"><a class="header-anchor" href="#xml-映射文件中-除了常见的-select-insert-update-delete-标签之外-还有哪些标签"><span>Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？</span></a></h2><p>还有很多其他的标签， <code>&lt;resultMap&gt;</code> 、 <code>&lt;parameterMap&gt;</code> 、 <code>&lt;sql&gt;</code> 、 <code>&lt;include&gt;</code> 、 <code>&lt;selectKey&gt;</code> ，加上动态 sql 的 9 个标签， <code>trim|where|set|foreach|if|choose|when|otherwise|bind</code> 等，其中 <code>&lt;sql&gt;</code> 为 sql 片段标签，通过 <code>&lt;include&gt;</code> 标签引入 sql 片段， <code>&lt;selectKey&gt;</code> 为不支持自增的主键生成策略标签。</p><h2 id="mybatis-动态-sql-是做什么的-都有哪些动态-sql-动态-sql-的执行原理" tabindex="-1"><a class="header-anchor" href="#mybatis-动态-sql-是做什么的-都有哪些动态-sql-动态-sql-的执行原理"><span>MyBatis 动态 sql 是做什么的？都有哪些动态 sql？动态 sql 的执行原理？</span></a></h2><p>MyBatis 动态 sql 可以让我们在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能，MyBatis 提供了 9 种动态 sql 标签 <code>trim|where|set|foreach|if|choose|when|otherwise|bind</code> 。</p><p>其执行原理为，使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。</p><h2 id="mybatis的一级、二级缓存" tabindex="-1"><a class="header-anchor" href="#mybatis的一级、二级缓存"><span>Mybatis的一级、二级缓存？</span></a></h2><p>一级缓存: 基于 <strong>PerpetualCache</strong> 的 HashMap 本地缓存，其存储作用域为 <strong>Session</strong>，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p><p>二级缓存与一级缓存其机制相同，默认也是采用 <strong>PerpetualCache</strong>，<strong>HashMap</strong> 存储，不同在于其存储作用域为 <strong>Mapper(Namespace)</strong>，并且可自定义存储源，如 <code>Ehcache</code>。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现<code>Serializable</code>序列化接口(可用来保存对象的状态),可在它的映射文件中配置<code>&lt;cache/&gt;</code>；</p><p>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear 掉并重新更新，如果开启了二级缓存，则只根据配置判断是否刷新。</p><h2 id="模糊查询like语句该怎么写" tabindex="-1"><a class="header-anchor" href="#模糊查询like语句该怎么写"><span>模糊查询like语句该怎么写？</span></a></h2><ol><li>在Java代码中添加sql通配符</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> wildcardname</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> “</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">smi</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> names </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> mapper</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">selectlike</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">wildcardname</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=”selectlike”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> select * from foo where bar like #{value}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在sql语句中拼接通配符，会引起sql注入</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> wildcardname</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> “smi”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> names </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> mapper</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">selectlike</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">wildcardname</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=”selectlike”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">     select * from foo where bar like &quot;%&quot;\${value}&quot;%&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何获取自动生成的-主-键值" tabindex="-1"><a class="header-anchor" href="#如何获取自动生成的-主-键值"><span>如何获取自动生成的(主)键值?</span></a></h2><p>insert 方法总是返回一个int值 ，这个值代表的是插入的行数，使用<code>usegeneratedkeys</code>接收。</p><p>如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">insert</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">insertname</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> usegeneratedkeys</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> keyproperty</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">     insert into names (name) values (#{name})</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">name name </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">setname</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“fred”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> rows</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> mapper</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">insertname</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 完成后,id已经被设置到对象中</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">system</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“rows inserted </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ” </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> rows</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">system</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“generated key value </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ” </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getid</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dao接口的工作原理" tabindex="-1"><a class="header-anchor" href="#dao接口的工作原理"><span>DAO接口的工作原理？</span></a></h2><p>最佳实践中，通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，请问，这个 Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？</p><p>Dao 接口，就是人们常说的 <code>Mapper</code> 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名，就是映射文件中 <code>MappedStatement</code> 的 id 值，接口方法内的参数，就是传递给 sql 的参数。</p><p><code>Mapper</code> 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为 key 值，可唯一定位一个 <code>MappedStatement</code> ，举例： <code>com.mybatis3.mappers. StudentDao.findStudentById</code> ，可以唯一找到 namespace 为 <code>com.mybatis3.mappers. StudentDao</code> 下面 <code>id = findStudentById</code> 的 <code>MappedStatement</code> 。在 MyBatis 中，每一个 <code>&lt;select&gt;</code> 、 <code>&lt;insert&gt;</code> 、 <code>&lt;update&gt;</code> 、 <code>&lt;delete&gt;</code> 标签，都会被解析为一个 <code>MappedStatement</code> 对象。</p><p>Dao 接口的工作原理是<code>JDK 动态代理</code>，MyBatis 运行时会使用 JDK 动态代理为 Dao 接口生成代理 proxy 对象，代理对象 proxy 会拦截接口方法，转而执行 <code>MappedStatement</code> 所代表的 sql，然后将 sql 执行结果返回。</p><h2 id="mybatis-是如何进行分页的-分页插件的原理是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-是如何进行分页的-分页插件的原理是什么"><span>MyBatis 是如何进行分页的？分页插件的原理是什么？</span></a></h2><ol><li>MyBatis 使用 <code>RowBounds</code> 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页</li><li>可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能</li><li>也可以使用分页插件来完成物理分页。</li></ol><p>分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。</p><p>举例： <code>select _ from student</code> ，拦截 sql 后重写为： <code>select t._ from （select \\* from student）t limit 0，10</code></p><p><a href="https://blog.csdn.net/weixin_37862824/article/details/125256588" target="_blank" rel="noopener noreferrer">参考：mybatis-PageHelper的分页原理</a></p><h2 id="简述-mybatis-的插件运行原理-以及如何编写一个插件。" tabindex="-1"><a class="header-anchor" href="#简述-mybatis-的插件运行原理-以及如何编写一个插件。"><span>简述 MyBatis 的插件运行原理，以及如何编写一个插件。</span></a></h2><p>MyBatis 仅可以编写针对 <code>ParameterHandler</code> 、 <code>ResultSetHandler</code> 、 <code>StatementHandler</code> 、 <code>Executor</code> 这 4 种接口的插件，MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法，当然，只会拦截那些你指定需要拦截的方法。</p><p>实现 MyBatis 的 Interceptor 接口并复写 <code>intercept()</code> 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h2 id="在mapper中如何传递多个参数" tabindex="-1"><a class="header-anchor" href="#在mapper中如何传递多个参数"><span>在mapper中如何传递多个参数?</span></a></h2><p><strong>第一种：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// DAO层的函数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Public </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">UserselectUser</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String name</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String area</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//对应的xml中，#{0}代表接收的是dao层中的第一个参数，#{1}代表dao层中第二参数，更多参数往后加即可。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">selectUser</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">resultMap=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">BaseResultMap</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    select *  fromuser_user_t   whereuser_name = #{0} anduser_area=#{1} </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二种：</strong></p><p>使用 <a href="/param">@param </a> 注解:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> usermapper</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   user </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">selectuser</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“username”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> string</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> username</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">“hashedpassword”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> string</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> hashedpassword</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后,就可以在xml像下面这样使用（推荐封装为一个map,作为单个参数传递给mapper）</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=”selectuser” </span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;">resulttype</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=”user”</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    select id, username, hashedpassword</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">	from some_table</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">	where username = #{username}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">	and hashedpassword = #{hashedpassword}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第三种：</strong></p><p>多个参数封装成map</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	//映射文件的命名空间.SQL片段的ID，就可以调用对应的映射文件中的SQL</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	//由于我们的参数超过了两个，而方法中只有一个Object参数收集，因此我们使用Map集合来装载我们的参数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    Map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> HashMap</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">start</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> start</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">end</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> sqlSession</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">selectList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">StudentID.pagination</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    MybatisUtil</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">closeSqlSession</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一对一、一对多的关联查询" tabindex="-1"><a class="header-anchor" href="#一对一、一对多的关联查询"><span>一对一、一对多的关联查询？</span></a></h2><p>一对一使用<code>&lt;association&gt;</code>，一对多使用<code>&lt;collection&gt;</code></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">resultMap</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">com.lcb.user.Classes</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">ClassesResultMap2</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">result</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">c_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">association</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">teacher</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> javaType</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">com.lcb.user.Teacher</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">t_id</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">result</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">t_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">association</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">collection</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">student</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> ofType</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">com.lcb.user.Student</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">s_id</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">result</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> property</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">s_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">collection</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">resultMap</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mybatis-是否支持延迟加载-如果支持-它的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#mybatis-是否支持延迟加载-如果支持-它的实现原理是什么"><span>MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？</span></a></h2><p>MyBatis 仅支持 <code>association</code> 关联对象和 <code>collection</code> 关联集合对象的延迟加载，<code>association</code> 指的就是一对一，<code>collection</code> 指的就是一对多查询。在 MyBatis 配置文件中，可以配置是否启用延迟加载 <code>lazyLoadingEnabled=true|false</code></p><p>它的原理是，使用 <code>CGLIB</code> 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 <code>a.getB().getName()</code> ，拦截器 <code>invoke()</code> 方法发现 <code>a.getB()</code> 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 <code>a.getB().getName()</code> 方法的调用。这就是延迟加载的基本原理。</p><h2 id="mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系" tabindex="-1"><a class="header-anchor" href="#mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系"><span>MyBatis 的 Xml 映射文件和 MyBatis 内部数据结构之间的映射关系？</span></a></h2><p>MyBatis 将所有 Xml 配置信息都封装到 All-In-One 重量级对象 <code>Configuration</code> 内部。在 Xml 映射文件中， <code>&lt;parameterMap&gt;</code> 标签会被解析为 <code>ParameterMap</code> 对象，其每个子元素会被解析为 ParameterMapping 对象。 <code>&lt;resultMap&gt;</code> 标签会被解析为 <code>ResultMap</code> 对象，其每个子元素会被解析为 <code>ResultMapping</code> 对象。每一个 <code>&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;</code> 标签均会被解析为 <code>MappedStatement</code> 对象，标签内的 sql 会被解析为 <code>BoundSql</code> 对象。</p><h2 id="为什么说-mybatis-是半自动-orm-映射工具-它与全自动的区别在哪里" tabindex="-1"><a class="header-anchor" href="#为什么说-mybatis-是半自动-orm-映射工具-它与全自动的区别在哪里"><span>为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？</span></a></h2><p>Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 MyBatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/system-design/framework/mybatis/mybatis-interview" target="_blank" rel="noopener noreferrer">JavaGuide - MyBatis 常见面试题总结</a></p>`,78),n=[l];function h(k,p){return a(),i("div",null,n)}const E=s(t,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/20frame/60.MyBatis/interview/","title":"MyBatis面试题","lang":"zh-CN","frontmatter":{"title":"MyBatis面试题","date":"2022-04-25T11:33:09.000Z","permalink":"/20frame/60.MyBatis/interview/","order":5,"icon":"wenzhang","description":"什么是Mybatis？ Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，加载驱动、创建连接、创建statement等繁杂的过程，开发者开发时只需要关注如何编写SQL语句，可以严格控制sql执行性能，灵活度高。 作为一个半ORM框架，MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/20frame/60.MyBatis/interview/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"MyBatis面试题"}],["meta",{"property":"og:description","content":"什么是Mybatis？ Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，加载驱动、创建连接、创建statement等繁杂的过程，开发者开发时只需要关注如何编写SQL语句，可以严格控制sql执行性能，灵活度高。 作为一个半ORM框架，MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-04-25T11:33:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-25T11:33:09.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"什么是Mybatis？","slug":"什么是mybatis","link":"#什么是mybatis","children":[]},{"level":2,"title":"Mybaits的优缺点","slug":"mybaits的优缺点","link":"#mybaits的优缺点","children":[]},{"level":2,"title":"Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？","slug":"mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式","link":"#mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式","children":[]},{"level":2,"title":"使用MyBatis的mapper接口调用时有哪些要求？","slug":"使用mybatis的mapper接口调用时有哪些要求","link":"#使用mybatis的mapper接口调用时有哪些要求","children":[]},{"level":2,"title":"#{}和${}的区别是什么？","slug":"和-的区别是什么","link":"#和-的区别是什么","children":[]},{"level":2,"title":"Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？","slug":"xml-映射文件中-除了常见的-select-insert-update-delete-标签之外-还有哪些标签","link":"#xml-映射文件中-除了常见的-select-insert-update-delete-标签之外-还有哪些标签","children":[]},{"level":2,"title":"MyBatis 动态 sql 是做什么的？都有哪些动态 sql？动态 sql 的执行原理？","slug":"mybatis-动态-sql-是做什么的-都有哪些动态-sql-动态-sql-的执行原理","link":"#mybatis-动态-sql-是做什么的-都有哪些动态-sql-动态-sql-的执行原理","children":[]},{"level":2,"title":"Mybatis的一级、二级缓存？","slug":"mybatis的一级、二级缓存","link":"#mybatis的一级、二级缓存","children":[]},{"level":2,"title":"模糊查询like语句该怎么写？","slug":"模糊查询like语句该怎么写","link":"#模糊查询like语句该怎么写","children":[]},{"level":2,"title":"如何获取自动生成的(主)键值?","slug":"如何获取自动生成的-主-键值","link":"#如何获取自动生成的-主-键值","children":[]},{"level":2,"title":"DAO接口的工作原理？","slug":"dao接口的工作原理","link":"#dao接口的工作原理","children":[]},{"level":2,"title":"MyBatis 是如何进行分页的？分页插件的原理是什么？","slug":"mybatis-是如何进行分页的-分页插件的原理是什么","link":"#mybatis-是如何进行分页的-分页插件的原理是什么","children":[]},{"level":2,"title":"简述 MyBatis 的插件运行原理，以及如何编写一个插件。","slug":"简述-mybatis-的插件运行原理-以及如何编写一个插件。","link":"#简述-mybatis-的插件运行原理-以及如何编写一个插件。","children":[]},{"level":2,"title":"在mapper中如何传递多个参数?","slug":"在mapper中如何传递多个参数","link":"#在mapper中如何传递多个参数","children":[]},{"level":2,"title":"一对一、一对多的关联查询？","slug":"一对一、一对多的关联查询","link":"#一对一、一对多的关联查询","children":[]},{"level":2,"title":"MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？","slug":"mybatis-是否支持延迟加载-如果支持-它的实现原理是什么","link":"#mybatis-是否支持延迟加载-如果支持-它的实现原理是什么","children":[]},{"level":2,"title":"MyBatis 的 Xml 映射文件和 MyBatis 内部数据结构之间的映射关系？","slug":"mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系","link":"#mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系","children":[]},{"level":2,"title":"为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？","slug":"为什么说-mybatis-是半自动-orm-映射工具-它与全自动的区别在哪里","link":"#为什么说-mybatis-是半自动-orm-映射工具-它与全自动的区别在哪里","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1},{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":10.65,"words":3195},"filePathRelative":"20frame/60.MyBatis/05.MyBatis面试题.md","localizedDate":"2022年4月25日","autoDesc":true}');export{E as comp,g as data};
