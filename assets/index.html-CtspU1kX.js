import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,e as n}from"./app-BUJ2iQsf.js";const o={},i=n('<h2 id="_1-对象的实例化" tabindex="-1"><a class="header-anchor" href="#_1-对象的实例化"><span>1. 对象的实例化</span></a></h2><blockquote><p>大厂面试题</p></blockquote><p><strong>美团：</strong> 对象在 JVM 中是怎么存储的？ 对象头信息里面有哪些东西？</p><p><strong>蚂蚁金服：</strong> 二面：java 对象头里有什么</p><figure><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220216388.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-1-创建对象的方式" tabindex="-1"><a class="header-anchor" href="#_1-1-创建对象的方式"><span>1.1 创建对象的方式</span></a></h3><ul><li>new 有两种变形：Xxx的静态方法；XxxBuilder/XxxFactory 的静态方法。</li><li><code>newInstance()</code> 是反射的方式，只能调用无参构造器，权限必须是 <code>public</code>。</li><li>Constructor 的 <code>newInstance(Xxx)</code>也是反射的方式，可调用无参/有参构造器，权限没有要求</li><li>clone 要求当前类实现 <code>Cloneable</code> 接口，实现 <code>clone()</code>  方法。不调用构造器。</li><li>反序列化 可从文件、网络获取一个对象的二进制流。</li><li>第三方库。</li></ul><h3 id="_1-2-创建对象的步骤" tabindex="-1"><a class="header-anchor" href="#_1-2-创建对象的步骤"><span>1.2 创建对象的步骤</span></a></h3><h4 id="_1-判断对象对应的类是否加载、链接、初始化" tabindex="-1"><a class="header-anchor" href="#_1-判断对象对应的类是否加载、链接、初始化"><span>1. 判断对象对应的类是否加载、链接、初始化</span></a></h4><p>虚拟机遇到一条 <code>new</code> 指令，首先去检查这个指令的参数能否在Mataspace 的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否己经被加载、解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以 ClassLoader + 包名 + 类名为 Key 进行查找对应的<code>.class</code>文件。如果没有找到文件，则抛出 <code>ClassNotFoundException</code> 异常，如果找到，则进行类加载，并生成对应的 <strong>Class</strong> 类对象。</p><h4 id="_2-为对象分配内存" tabindex="-1"><a class="header-anchor" href="#_2-为对象分配内存"><span>2. 为对象分配内存</span></a></h4><p>首先计算对象占用窒间大小，接着在堆中划分一块内存给新对象。 如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小。</p><ol><li>如果内存规整，使用指针碰撞</li></ol><p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（<code>BumpThePointer</code>）来为对象分配内存。意思是所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是 <strong>ser1、parNew</strong> 这种基于压缩算法的，虚拟机采用这种分配方式。</p><blockquote><p>一般使用带有compact（整理）过程的收集器时，使用指针碰撞。</p></blockquote><ol start="2"><li>如果内存不规整，虚拟机需要维护一个列表，使用空闲列表分配</li></ol><p>如果内存不是规整的，己使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表法来为对象分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式称为<strong>空闲列表</strong>（FreeList）</p><blockquote><p>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p></blockquote><ol start="3"><li>处理并发安全问题</li></ol><p>在分配内存空间时，另外一个问題是及时保证 new 对象时候的线程安全性：创建对象是非常频繁的操作，虚拟机需要解决并发问题。虚拟机采用了两种方式解决并发问题。</p><ul><li><strong>CAS</strong>（Compare And Swap）失败重试、区域加锁：保证指针更新操作的原子性。</li><li><strong>TLAB</strong> 把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲区，（TLAB，ThreadLocal Allocation Buffer）虚拟机是否使用 TLAB，可以通过 <code>-XX:+/-UseTLAB</code> 参数来设定。</li></ul><h4 id="_3-初始化分配到的空间" tabindex="-1"><a class="header-anchor" href="#_3-初始化分配到的空间"><span>3. 初始化分配到的空间</span></a></h4><p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。这一步保证了对象的实例字段在 Javaa 代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h4 id="_4-设置对象的对象头" tabindex="-1"><a class="header-anchor" href="#_4-设置对象的对象头"><span>4. 设置对象的对象头</span></a></h4><p>将对象的所属类（即类的元数据信息）、对象的 HashCode 和对象的 GC 信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于 JVM 实现。</p><h4 id="_5-执行-init-方法进行初始化" tabindex="-1"><a class="header-anchor" href="#_5-执行-init-方法进行初始化"><span>5. 执行 init 方法进行初始化</span></a></h4><p>在 Java 程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。 因此一般来说（由字节码中是否跟随有 invokespecial 指令所决定），new 指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全创建出来。</p><h2 id="_2-对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_2-对象的内存布局"><span>2. 对象的内存布局</span></a></h2><h3 id="_2-1-对象头-header" tabindex="-1"><a class="header-anchor" href="#_2-1-对象头-header"><span>2.1 对象头（Header）</span></a></h3><p>包含两部分：</p><p><strong>运行时元数据（Mark Word）：</strong> 哈希值（hashcode），GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳</p><p><strong>类型指针：</strong> 指向类元数据<code>InstanceClass</code>，确定该对象所属的类型。</p><blockquote><p>如果是数组，还需要记录数组的长度！</p></blockquote><h3 id="_2-2-实例数据-instance-data" tabindex="-1"><a class="header-anchor" href="#_2-2-实例数据-instance-data"><span>2.2 实例数据（Instance Data）</span></a></h3><p>它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）</p><p><strong>规则：</strong></p><ul><li>相同宽度的字段总是被分配在一起</li><li>父类中定义的变量会出现在子类之前</li><li>如果 <code>CompactFields</code> 参数为 <code>true</code>（默认为 true）：子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="_2-3-对齐填充-padding" tabindex="-1"><a class="header-anchor" href="#_2-3-对齐填充-padding"><span>2.3 对齐填充（Padding）</span></a></h3><p>不是必须的，也没特别含义，仅仅起到占位符的作用。</p><h2 id="_3-对象的访问定位" tabindex="-1"><a class="header-anchor" href="#_3-对象的访问定位"><span>3. 对象的访问定位</span></a></h2><p>JVM 是如何涌过栈帧中的对象引用访问到其内部的对象实例的呢？定位，通过栈上 reference 访问</p><p><strong>对象访问方式主要有两种</strong></p><ul><li><p><strong>句柄访问</strong>：在堆空间开一片区域，称为句柄池，存放到对象实例数据/类型数据的指针。栈中变量指向句柄。</p><p><strong>优点</strong>：堆中对象被移动时，只会改变句柄处记录的值，无需改变栈中存放的句柄地址。（垃圾回收时对象会移动）</p><p><strong>缺点</strong>：需要额外空间，访问效率低。</p></li><li><p><strong>直接指针（Hotspot采用）</strong>：栈中的变量直接指向堆中的对象。</p><p><strong>优点</strong>：访问效率高。</p><p><strong>缺点</strong>：对象移动时需要修改栈中存放的对象地址。</p></li></ul>',43),r=[i];function l(s,c){return t(),a("div",null,r)}const h=e(o,[["render",l],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/01java/40jvm/instance/","title":"对象的实例化、内存布局与访问定位","lang":"zh-CN","frontmatter":{"title":"对象的实例化、内存布局与访问定位","date":"2022-05-21T16:32:26.000Z","order":35,"permalink":"/01java/40jvm/instance/","icon":"wenzhang","description":"1. 对象的实例化 大厂面试题 美团： 对象在 JVM 中是怎么存储的？ 对象头信息里面有哪些东西？ 蚂蚁金服： 二面：java 对象头里有什么 1.1 创建对象的方式 new 有两种变形：Xxx的静态方法；XxxBuilder/XxxFactory 的静态方法。 newInstance() 是反射的方式，只能调用无参构造器，权限必须是 public。...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/instance/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"对象的实例化、内存布局与访问定位"}],["meta",{"property":"og:description","content":"1. 对象的实例化 大厂面试题 美团： 对象在 JVM 中是怎么存储的？ 对象头信息里面有哪些东西？ 蚂蚁金服： 二面：java 对象头里有什么 1.1 创建对象的方式 new 有两种变形：Xxx的静态方法；XxxBuilder/XxxFactory 的静态方法。 newInstance() 是反射的方式，只能调用无参构造器，权限必须是 public。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220216388.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对象的实例化、内存布局与访问定位\\",\\"image\\":[\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220216388.png\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"1. 对象的实例化","slug":"_1-对象的实例化","link":"#_1-对象的实例化","children":[{"level":3,"title":"1.1 创建对象的方式","slug":"_1-1-创建对象的方式","link":"#_1-1-创建对象的方式","children":[]},{"level":3,"title":"1.2 创建对象的步骤","slug":"_1-2-创建对象的步骤","link":"#_1-2-创建对象的步骤","children":[]}]},{"level":2,"title":"2. 对象的内存布局","slug":"_2-对象的内存布局","link":"#_2-对象的内存布局","children":[{"level":3,"title":"2.1 对象头（Header）","slug":"_2-1-对象头-header","link":"#_2-1-对象头-header","children":[]},{"level":3,"title":"2.2 实例数据（Instance Data）","slug":"_2-2-实例数据-instance-data","link":"#_2-2-实例数据-instance-data","children":[]},{"level":3,"title":"2.3 对齐填充（Padding）","slug":"_2-3-对齐填充-padding","link":"#_2-3-对齐填充-padding","children":[]}]},{"level":2,"title":"3. 对象的访问定位","slug":"_3-对象的访问定位","link":"#_3-对象的访问定位","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":5.8,"words":1741},"filePathRelative":"01java/40jvm/35.对象的实例化、内存布局与访问定位.md","localizedDate":"2022年5月22日","autoDesc":true}');export{h as comp,g as data};
