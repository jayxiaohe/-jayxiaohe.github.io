import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o,e as a}from"./app-BUJ2iQsf.js";const t={},i=a('<h2 id="什么是进程-线程" tabindex="-1"><a class="header-anchor" href="#什么是进程-线程"><span>什么是进程，线程？</span></a></h2><p>进程是指在系统中正在运行的一个应用程序；线程是系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元。 线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。可以理解成是在进程中独立运行的子任务。</p><h2 id="线程唤醒的方法" tabindex="-1"><a class="header-anchor" href="#线程唤醒的方法"><span>线程唤醒的方法？</span></a></h2><ol><li><code>Object</code>的<code>wait</code>, <code>notify</code></li><li><code>JUC</code>下，<code>Condition</code>的<code>await</code>, <code>signal</code></li><li><code>LockSupport</code>类。</li></ol><h2 id="说下java线程的生命周期" tabindex="-1"><a class="header-anchor" href="#说下java线程的生命周期"><span>说下Java线程的生命周期？</span></a></h2><figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java线程的状态.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java+线程状态变迁.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>图中 <strong>runnable</strong> 到 <strong>wait</strong> 状态的转换中，<code>join</code>实际上是<code>Thread</code>类的方法，但这里写成了<code>Object</code>。</p></blockquote><h2 id="上下文切换是什么" tabindex="-1"><a class="header-anchor" href="#上下文切换是什么"><span>上下文切换是什么？</span></a></h2><p>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p><ul><li>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。</li><li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用CPU导致其他线程或者进程饿死。</li><li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li><li>被终止或结束运行</li></ul><p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong>。</p><p>上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。</p><h2 id="说说并发与并行的区别" tabindex="-1"><a class="header-anchor" href="#说说并发与并行的区别"><span>说说并发与并行的区别?</span></a></h2><ul><li><strong>并发：</strong> 同一时间段，多个任务都在执行 (单位时间内不一定同时执行)；</li><li><strong>并行：</strong> 单位时间内，多个任务同时执行。</li></ul><h2 id="什么是死锁-产生死锁的条件" tabindex="-1"><a class="header-anchor" href="#什么是死锁-产生死锁的条件"><span>什么是死锁？产生死锁的条件？</span></a></h2><p>所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。 <strong>产生死锁的必要条件：</strong></p><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h2 id="开发中如何避免死锁呢" tabindex="-1"><a class="header-anchor" href="#开发中如何避免死锁呢"><span>开发中如何避免死锁呢？</span></a></h2><ol><li><strong>破坏请求与保持条件</strong> ：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong> ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p>参考：<a href="https://www.cnblogs.com/huilixieqi/p/13755145.html" target="_blank" rel="noopener noreferrer">Java多线程 开发中避免死锁的八种方法</a></p><h2 id="可重入锁" tabindex="-1"><a class="header-anchor" href="#可重入锁"><span>可重入锁？</span></a></h2><p>“可重入锁” 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果是不可重入锁的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。</p><h2 id="locksupport" tabindex="-1"><a class="header-anchor" href="#locksupport"><span>LockSupport？</span></a></h2><h2 id="sleep和wait的区别" tabindex="-1"><a class="header-anchor" href="#sleep和wait的区别"><span>Sleep和wait的区别？</span></a></h2><p>sleep()是使线程暂停执行一段时间的方法。wait()也是一种使线程暂停执行的方法。例如，当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。并且可以调用notify()方法或者notifyAll()方法通知正在等待的其他线程。notify()方法仅唤醒一个线程（等待队列中的第一个线程）并允许他去获得锁。notifyAll()方法唤醒所有等待这个对象的线程并允许他们去竞争获得锁。具体区别如下：</p><ol><li><strong>原理不同</strong>。sleep()方法是Thread类的静态方法，是线程用来控制自身流程的，他会使此线程暂停执行一段时间，而把执行机会让给其他线程，等到计时时间一到，此线程会自动苏醒。例如，当线程执行报时功能时，每一秒钟打印出一个时间，那么此时就需要在打印方法前面加一个sleep()方法，以便让自己每隔一秒执行一次，该过程如同闹钟一样。而wait()方法是object类的方法，用于线程间通信，这个方法会使当前拥有该对象锁的进程等待，直到其他线程调用notify()方法或者notifyAll()时才醒来，不过开发人员也可以给他指定一个时间，自动醒来。</li><li><strong>对锁的处理机制不同</strong>。由于sleep()方法的主要作用是让线程暂停执行一段时间，时间一到则自动恢复，不涉及线程间的通信，因此，调用sleep()方法并不会释放锁。而wait()方法则不同，当调用wait()方法后，线程会释放掉他所占用的锁，从而使线程所在对象中的其他synchronized数据可以被其他线程使用。</li><li><strong>使用区域不同</strong>。wait()方法必须放在同步控制方法和同步代码块中使用，sleep()方法则可以放在任何地方使用。sleep()方法必须捕获异常，而wait()、notify()、notifyAll()不需要捕获异常。在sleep的过程中，有可能被其他对象调用他的interrupt()，产生InterruptedException。由于sleep不会释放锁标志，容易导致死锁问题的发生，因此一般情况下，推荐使用wait()方法。</li></ol><h2 id="使用线程池的好处" tabindex="-1"><a class="header-anchor" href="#使用线程池的好处"><span>使用线程池的好处？</span></a></h2><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ul><h2 id="线程池的基本参数-线程池的拒绝策略" tabindex="-1"><a class="header-anchor" href="#线程池的基本参数-线程池的拒绝策略"><span>线程池的基本参数？线程池的拒绝策略？</span></a></h2><ol><li><code>corePoolSize</code>（核心线程数量） 向线程池提交一个任务，此时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，（除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。）</li><li><code>maximumPoolSize</code>（最大线程数量） 线程池所允许的最大同时可执行线程数量。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</li><li><code>keepAliveTime</code>（线程存活保持时间） 当线程池中线程数大于核心线程数时，线程的空闲时间如果超过线程存活时间，那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数。</li><li><code>TimeUnit</code>: 存活时间单位</li><li><code>workQueue</code>（任务队列） 用于传输和保存等待执行任务的阻塞队列。</li><li><code>threadFactory</code>（线程工厂） 用于创建新线程。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）。</li><li><code>handler</code>（线程饱和策略）</li></ol><p>队列满，并且线程达到最大线程数量的时候，对新任务的拒绝策略</p><p>拒绝策略共有4种，也是 <code>RejectedExecutionHandler</code> 接口的4个实现类（前3种都会导致有任务丢弃）：</p><p>ThreadPoolExecutor.AbortPolicy: 丢弃任务并抛出RejectedExecutionException异常。</p><p>hreadPoolExecutor.DiscardPolicy: 丢弃任务，但是不抛出异常。</p><p>ThreadPoolExecutor.DiscardOldestPolicy: 丢弃队列最前面的任务，然后重新提交被拒绝的任务。</p><p>ThreadPoolExecutor.CallerRunsPolicy: 由调用线程（提交任务的线程）处理该任务。</p><h2 id="stringbuffer跟stringbuilder哪个线程安全-是怎么实现的" tabindex="-1"><a class="header-anchor" href="#stringbuffer跟stringbuilder哪个线程安全-是怎么实现的"><span>StringBuffer跟StringBuilder哪个线程安全？是怎么实现的？</span></a></h2><p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><h2 id="线程池从建立开始的任务调度机制-举例说明线程池调优" tabindex="-1"><a class="header-anchor" href="#线程池从建立开始的任务调度机制-举例说明线程池调优"><span>线程池从建立开始的任务调度机制？举例说明线程池调优？</span></a></h2><p><strong>线程池的工作过程如下：</strong></p><ol><li><p>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</p></li><li><p>当调用 execute() 方法添加一个任务时，线程池会做如下判断：</p><ul><li><p>如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</p></li><li><p>如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</p></li><li><p>如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</p></li><li><p>如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。</p></li></ul></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p></li><li><p>当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</p></li></ol><p><strong>一般需要根据任务的类型来配置线程池大小：</strong></p><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1。</p><p>如果是IO密集型任务，参考值可以设置为2*NCPU。</p><p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p><h2 id="synchronize原理-偏向锁、自旋锁、轻量级锁、重量级锁都是啥" tabindex="-1"><a class="header-anchor" href="#synchronize原理-偏向锁、自旋锁、轻量级锁、重量级锁都是啥"><span>Synchronize原理？偏向锁、自旋锁、轻量级锁、重量级锁都是啥？</span></a></h2><p>参考：</p><p><a href="https://blog.csdn.net/javazejian/article/details/72828483" target="_blank" rel="noopener noreferrer">深入理解Java并发之synchronized实现原理</a></p><p><a href="https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/" target="_blank" rel="noopener noreferrer">Java锁与线程的那些事 - 有赞</a></p><p><a href="https://www.cnblogs.com/wuqinglong/p/9945618.html" target="_blank" rel="noopener noreferrer">Java6及以上版本对synchronized的优化</a></p><p><strong>synchronized原理</strong></p><p>Java 虚拟机中的同步基于Monitor对象实现。同步代码块是显式同步，有明确的 monitorenter 和 monitorexit 指令；同步方法是由方法调用指令读取运行时常量池中方法的 ACC_SYNCHRONIZED 标志来隐式实现的。</p><p>一般而言，synchronized使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由Mark Word 和 Class Metadata Address 组成。其中Mark Word在默认情况下存储着对象的HashCode、分代年龄、锁标记位等。除了上述列出的Mark Word默认存储结构外，还有如下可能变化的结构：锁状态、偏向锁(Java6)、轻量级锁(Java6)、重量级锁等。</p><p><strong>缺点</strong>：Java 6 以前，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。</p><div class="hint-container tip"><p class="hint-container-title">Java 6 之后</p><p>庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对 synchronized 较大优化，所以现在的 synchronized 锁效率也优化得很不错了。JDK1.6 对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。</p></div><p><strong>偏向锁:</strong></p><p>Java6之后加入的新锁，是对锁操作的优化手段。在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。</p><p>偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。</p><p>但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失。偏向锁失败后，会升级为轻量级锁。</p><p><strong>轻量级锁:</strong></p><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是对绝大部分的锁，在整个同步周期内都不存在竞争，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><p><strong>自旋锁:</strong></p><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p><p><strong>自适应自旋锁:</strong></p><p>自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定：</p><ul><li>如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间，比如100个循环。</li><li>相反的，如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能减少自旋时间甚至省略自旋过程，以避免浪费处理器资源。</li></ul><p>自适应自旋解决的是“锁竞争时间不确定”的问题。JVM很难感知到确切的锁竞争时间，而交给用户分析就违反了JVM的设计初衷。<em>自适应自旋假定不同线程持有同一个锁对象的时间基本相当，竞争程度趋于稳定，因此，可以根据上一次自旋的时间与结果调整下一次自旋的时间</em>。</p><p><strong>重量级锁:</strong></p><p>内置锁在Java中被抽象为监视器锁（monitor）。在JDK 1.6之前，监视器锁可以认为直接对应底层操作系统中的互斥量（mutex）。这种同步方式的成本非常高，包括系统调用引起的内核态与用户态切换、线程阻塞造成的线程切换等。</p><p><strong>锁消除:</strong></p><p>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间。</p><h2 id="锁膨胀、锁降级" tabindex="-1"><a class="header-anchor" href="#锁膨胀、锁降级"><span>锁膨胀、锁降级？</span></a></h2><p>锁膨胀为偏向锁 &gt; 轻量级锁 &gt; 重量级锁的过程。具体见上一条。</p><p>大部分资料中说JVM不支持锁降级。但这篇文档说明可以：https://www.jianshu.com/p/9932047a89be。</p><p>大部分资料中说的锁降级发生在读写锁<strong>ReentrantReadWriteLock</strong>中，是写锁降级读锁的过程。锁降级的本质是释放掉独占锁，使其他线程可以获取到读锁，提高并发，而当前线程持有读锁来保证数据的可见性。</p><h2 id="threadlocal使用会有什么问题" tabindex="-1"><a class="header-anchor" href="#threadlocal使用会有什么问题"><span>ThreadLocal使用会有什么问题？</span></a></h2><p><strong>存在内存泄漏问题。</strong></p><p><strong>内存泄漏：</strong></p><p>存在一些被分配的对象，这些对象有下面两个特点，首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。</p><p><strong>产生原因：</strong></p><p>ThreadLocal自身并不储存值，而是作为一个key来让线程从ThreadLocal获取value。Entry是中的key是弱引用，所以jvm在垃圾回收时如果外部没有强引用来引用它，ThreadLocal必然会被回收。但是，作为ThreadLocalMap的key，ThreadLocal被回收后，ThreadLocalMap就会存在null，但value不为null的Entry。若当前线程一直不结束，可能是作为线程池中的一员，线程结束后不被销毁，或者分配（当前线程又创建了ThreadLocal对象）使用了又不再调用get/set方法，就可能引发内存泄漏。其次，就算线程结束了，操作系统在回收线程或进程的时候不是一定杀死线程或进程的，在繁忙的时候，只会清除线程或进程数据的操作，重复使用线程或进程（线程id可能不变导致内存泄漏）。因此，<strong>key弱引用并不是导致内存泄漏的原因，而是因为ThreadLocalMap的生命周期与当前线程一样长，并且没有手动删除对应key。</strong></p><p><strong>解决:</strong></p><p>在使用完ThreadLocal时，及时调用它的的remove方法清除数据。</p><blockquote><p><strong>ThreadLocal在预防内存泄漏方面，做了哪些努力？</strong></p><p>在ThreadLocal中，进行get，set操作的时候会清除Map里所有key为null的value。</p></blockquote><h2 id="synchronize跟volatile的区别" tabindex="-1"><a class="header-anchor" href="#synchronize跟volatile的区别"><span>Synchronize跟Volatile的区别？</span></a></h2><p>volatile 关键字是线程同步的轻量级实现，所以volatile 性能肯定比synchronized关键字要好。但是volatile 关键字只能用于变量而 synchronized 关键字可以修饰方法以及代码块。</p><p>volatile 关键字能保证数据的可见性，但不能保证数据的原子性。synchronized 关键字两者都能保证。</p><p>volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized 关键字解决的是多个线程之间访问资源的同步性。</p><h2 id="synchronzed原理-和lock的区别" tabindex="-1"><a class="header-anchor" href="#synchronzed原理-和lock的区别"><span>Synchronzed原理？和Lock的区别？</span></a></h2><ol><li>Synchronzed是java关键字基于JVM层面；Lock指具体的类（ReentrantLock）</li><li>Synchronzed会自动释放锁；Lock需要手动释放锁</li><li>Synchronzed是非公平锁；Lock默认是非公平锁，但可以根据构造参数指定为公平锁</li><li>Synchronzed不可中断，除非异常或成功执行结束；Lock可中断设置超时tryLock（timeout,unit）或lockInterruptibly()放代码块里，调用interrupt()方法中断。</li><li>Synchronzed不能唤醒指定线程;Lock可以唤醒指定线程(Condition)；lock.newCondition()</li></ol><h2 id="synchronized与reentrantlock的异同、底层原理" tabindex="-1"><a class="header-anchor" href="#synchronized与reentrantlock的异同、底层原理"><span>synchronized与reentrantlock的异同、底层原理？</span></a></h2><h4 id="两者都是可重入锁" tabindex="-1"><a class="header-anchor" href="#两者都是可重入锁"><span>两者都是可重入锁</span></a></h4><p><strong>“可重入锁”</strong> 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果是不可重入锁的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。</p><h4 id="synchronized-依赖于-jvm-而-reentrantlock-依赖于-api" tabindex="-1"><a class="header-anchor" href="#synchronized-依赖于-jvm-而-reentrantlock-依赖于-api"><span>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</span></a></h4><p><code>synchronized</code> 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 <code>synchronized</code> 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。<code>ReentrantLock</code> 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><h4 id="reentrantlock-比-synchronized-增加了一些高级功能" tabindex="-1"><a class="header-anchor" href="#reentrantlock-比-synchronized-增加了一些高级功能"><span>ReentrantLock 比 synchronized 增加了一些高级功能</span></a></h4><p>相比<code>synchronized</code>，<code>ReentrantLock</code>增加了一些高级功能。主要来说主要有三点：</p><ul><li><strong>等待可中断</strong> : <code>ReentrantLock</code>提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现公平锁</strong> : <code>ReentrantLock</code>可以指定是公平锁还是非公平锁。而<code>synchronized</code>只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。<code>ReentrantLock</code>默认情况是非公平的，可以通过 <code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法相结合可以实现等待/通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ul><blockquote><p><code>Condition</code>是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个<code>Lock</code>对象中可以创建多个<code>Condition</code>实例（即对象监视器），<strong>线程对象可以注册在指定的<code>Condition</code>中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用<code>notify()/notifyAll()</code>方法进行通知时，被通知的线程是由 JVM 选择的，用<code>ReentrantLock</code>类结合<code>Condition</code>实例可以实现“选择性通知”</strong> ，这个功能非常重要，而且是 Condition 接口默认提供的。而<code>synchronized</code>关键字就相当于整个 Lock 对象中只有一个<code>Condition</code>实例，所有的线程都注册在它一个身上。如果执行<code>notifyAll()</code>方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而<code>Condition</code>实例的<code>signalAll()</code>方法 只会唤醒注册在该<code>Condition</code>实例中的所有等待线程。</p></blockquote><h2 id="wait-跟notify-是否可以脱离synchronize使用" tabindex="-1"><a class="header-anchor" href="#wait-跟notify-是否可以脱离synchronize使用"><span>wait()跟notify()是否可以脱离synchronize使用？</span></a></h2><h2 id="wait-跟notify-为什么是对象的方法" tabindex="-1"><a class="header-anchor" href="#wait-跟notify-为什么是对象的方法"><span>wait()跟notify()为什么是对象的方法？</span></a></h2><p>调用wait(), notify()或notifyAll()的时候，必须先获得锁，且状态变量须由该锁保护，而固有锁对象与固有条件队列对象又是同一个对象。也就是说，要在某个对象上执行wait，notify，先必须锁定该对象，而对应的状态变量也是由该对象锁保护的。</p><p>原因一：Java中，任何对象都可以作为锁，既然wait是放弃对象锁，当然就要把wait定义在这个对象所属的类中。更通用一些，由于所有类都继承于Object，我们完全可以把wait方法定义在Object类中，这样，当我们定义一个新类，并需要以它的一个对象作为锁时，不需要我们再重新定义wait方法的实现，而是直接调用父类的wait(也就是Object的wait)，此处，用到了Java的继承。</p><p>原因二：有的人会说，既然是线程放弃对象锁，那也可以把wait定义在Thread类里面啊，新定义的线程继承于Thread类，也不需要重新定义wait方法的实现。然而，这样做有一个非常大的问题，一个线程完全可以持有很多锁，你一个线程放弃锁的时候，到底要放弃哪个锁？当然了，这种设计并不是不能实现，只是管理起来更加复杂。</p><h2 id="以reentrantlock为例。说下aqs的原理" tabindex="-1"><a class="header-anchor" href="#以reentrantlock为例。说下aqs的原理"><span>以ReentrantLock为例。说下AQS的原理？</span></a></h2><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><blockquote><p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p></blockquote><p><a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html" target="_blank" rel="noopener noreferrer">美团-从ReentrantLock的实现看AQS的原理及应用</a></p><p><a href="https://blog.csdn.net/lldouble/article/details/80940110" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/lldouble/article/details/80940110</a></p><h2 id="公平锁的实现原理" tabindex="-1"><a class="header-anchor" href="#公平锁的实现原理"><span>公平锁的实现原理？</span></a></h2><p><strong>非公平锁</strong>：不管等待顺序，每个线程获取锁的概率都是相等的，优点是提高了响应速度，不用把大量时间花费在线程调度上，而是花费在执行代码上。</p><p>实现方式：首先获取到当前线程，判断当前锁的状态是否为0，如果是，说明当前锁没有被其他线程占有，则利用CAS操作将锁的状态从0置为1成功后，将锁的持有者置为当前线程。</p><p><strong>公平锁</strong>：按照线程等待顺序获取锁，一般将获取锁失败的线程放入等待队列中，每次从FIFO队列的队头取出线程获取锁。这种方式会造成性能低下，大量的时间花费在线程调度上。</p><p>实现方式：在非公平锁的实现上，加了一层判断hasQueuedPredecessors()，该方法的大概意思是判断是否有线程等待的时间比当前线程等待时间还要久，如果有返回true，则当前线程获取锁失败，如果没有返回false，当前线程获取到锁，也就是判断当前线程是否是等待队列的队头元素。</p><h2 id="怎么使用线程池的-有哪些获取方法" tabindex="-1"><a class="header-anchor" href="#怎么使用线程池的-有哪些获取方法"><span>怎么使用线程池的，有哪些获取方法</span></a></h2><ul><li><p>Executors.newFixedThreadPool(int i)：创建一个拥有 i 个线程的线程池</p><ul><li>执行长期的任务，性能好很多</li><li>创建一个定长线程池，可控制线程数最大并发数，超出的线程会在队列中等待</li></ul></li><li><p>Executors.newSingleThreadExecutor()：创建一个只有1个线程的 单线程池</p><ul><li>一个任务一个任务执行的场景</li><li>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li></ul></li><li><p>Executors.newCacheThreadPool()：创建一个可扩容的线程池</p><ul><li>执行很多短期异步的小程序或者负载教轻的服务器</li><li>创建一个可缓存线程池，如果线程长度超过处理需要，可灵活回收空闲线程，如无可回收，则新建新线程</li></ul></li><li><p>Executors.newScheduledThreadPool()： 可以设定从该线程池中获得线程的最小间隔时间</p></li><li><p>new ThreadPoolExecutor() 这也是阿里Java开发手册中推荐的写法。</p></li></ul><div class="hint-container note"><p class="hint-container-title">这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p><code>Executors</code>返回的线程池对象的弊端如下：</p><p><code>FixedThreadPool</code>和<code>SingleThreadPool</code>： 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</p><p><code>CachedThreadPool</code>： 允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p></div><p><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener noreferrer">美团-Java线程池实现原理及其在美团业务中的实践</a></p><h2 id="juc包下熟悉哪些类-分别描述原理" tabindex="-1"><a class="header-anchor" href="#juc包下熟悉哪些类-分别描述原理"><span>juc包下熟悉哪些类？分别描述原理</span></a></h2><ol><li><code>CountDownLatch</code> 这个类是一个同步计数器，主要用于线程间的控制，当CountDownLatch的count计数&gt;0时，await()会造成阻塞，直到count变为0，await()结束阻塞。如果我想让其他线程执行完指定程序，其他所有程序都执行结束后我再执行，这时可以用CountDownLatch。但计数无法被重置，如果需要重置计数，请考虑使用 CyclicBarrier 。</li><li><code>CyclicBarrier</code> 循环屏障。它可以协同多个线程，让多个线程在这个屏障前等到，直到所有线程都到达了这个屏障时，再一起执行后面的操作。假如每个线程各有一个await，任何一个线程运行到await方法时就阻塞，直到最后一个线程运行到await时才同时返回。和之前的CountDownLatch相比，它只有await方法，而CountDownLatch是使用countDown()方法将计数器减到0，它创建的参数就是countDown的数量；CyclicBarrier创建时的int参数是await的数量。</li><li><code>Semaphore</code> 该类用于控制信号量的个数，构造时传入个数。Semaphore实现的功能就类似厕所有5个坑，假如有10个人要上厕所，那么同时只能有多少个人去上厕所呢？同时只能有5个人能够占用，当5个人中 的任何一个人让开后，其中等待的另外5个人中又有一个人可以占用了。另外等待的5个人中可以是随机获得优先机会，也可以是按照先来后到的顺序获得机会，这取决于构造Semaphore对象时传入的参数选项。单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放“锁”，这可应用于死锁恢复的一些场合。方法：acquire(), release()。</li><li><code>Exchanger</code> 这个类用于交换数据，只能用于两个线程。当一个线程运行到exchange()方法时会阻塞，另一个线程运行到exchange()时，二者交换数据，然后执行后面的程序。</li><li><code>ReentrantLock</code></li><li><code>ConcurrentHashMap</code> concurrenthashmap原理，1.7/1.8区别</li><li><code>CopyonWriteArrayList</code></li></ol><p><a href="https://blog.csdn.net/xiaxl/article/details/70024206" target="_blank" rel="noopener noreferrer">copyonwriteArrayList 原理和存在的问题</a></p><h2 id="惊群效应" tabindex="-1"><a class="header-anchor" href="#惊群效应"><span>惊群效应？</span></a></h2><p><a href="https://blog.csdn.net/second60/article/details/81252106" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/second60/article/details/81252106</a><a href="https://www.zhihu.com/question/22756773" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/22756773</a></p><h2 id="分布式唯一主键生成方案" tabindex="-1"><a class="header-anchor" href="#分布式唯一主键生成方案"><span>分布式唯一主键生成方案？</span></a></h2><h2 id="synchronized保证有序性" tabindex="-1"><a class="header-anchor" href="#synchronized保证有序性"><span>synchronized保证有序性？</span></a></h2><h2 id="锁升级锁降级" tabindex="-1"><a class="header-anchor" href="#锁升级锁降级"><span>锁升级锁降级</span></a></h2><h2 id="线程执行顺序-semaphore-join" tabindex="-1"><a class="header-anchor" href="#线程执行顺序-semaphore-join"><span>线程执行顺序，Semaphore，join</span></a></h2><h2 id="微信抢红包方案" tabindex="-1"><a class="header-anchor" href="#微信抢红包方案"><span>微信抢红包方案？</span></a></h2><p>无锁机制，将一批请求放进消息队列中，串行化消费</p>',130),l=[i];function r(c,s){return o(),n("div",null,l)}const h=e(t,[["render",r],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/01java/30thread/interview/","title":"多线程面试题","lang":"zh-CN","frontmatter":{"title":"多线程面试题","order":10,"date":"2021-03-02T22:17:10.000Z","permalink":"/01java/30thread/interview/","icon":"wenzhang","description":"什么是进程，线程？ 进程是指在系统中正在运行的一个应用程序；线程是系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元。 线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。可以理解成是在进程中独立运行的子任务。 线程唤醒的方法？ Object的wait, notify JUC下，C...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/30thread/interview/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"多线程面试题"}],["meta",{"property":"og:description","content":"什么是进程，线程？ 进程是指在系统中正在运行的一个应用程序；线程是系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元。 线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。可以理解成是在进程中独立运行的子任务。 线程唤醒的方法？ Object的wait, notify JUC下，C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2021-03-02T22:17:10.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多线程面试题\\",\\"image\\":[\\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png\\",\\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png\\"],\\"datePublished\\":\\"2021-03-02T22:17:10.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"什么是进程，线程？","slug":"什么是进程-线程","link":"#什么是进程-线程","children":[]},{"level":2,"title":"线程唤醒的方法？","slug":"线程唤醒的方法","link":"#线程唤醒的方法","children":[]},{"level":2,"title":"说下Java线程的生命周期？","slug":"说下java线程的生命周期","link":"#说下java线程的生命周期","children":[]},{"level":2,"title":"上下文切换是什么？","slug":"上下文切换是什么","link":"#上下文切换是什么","children":[]},{"level":2,"title":"说说并发与并行的区别?","slug":"说说并发与并行的区别","link":"#说说并发与并行的区别","children":[]},{"level":2,"title":"什么是死锁？产生死锁的条件？","slug":"什么是死锁-产生死锁的条件","link":"#什么是死锁-产生死锁的条件","children":[]},{"level":2,"title":"开发中如何避免死锁呢？","slug":"开发中如何避免死锁呢","link":"#开发中如何避免死锁呢","children":[]},{"level":2,"title":"可重入锁？","slug":"可重入锁","link":"#可重入锁","children":[]},{"level":2,"title":"LockSupport？","slug":"locksupport","link":"#locksupport","children":[]},{"level":2,"title":"Sleep和wait的区别？","slug":"sleep和wait的区别","link":"#sleep和wait的区别","children":[]},{"level":2,"title":"使用线程池的好处？","slug":"使用线程池的好处","link":"#使用线程池的好处","children":[]},{"level":2,"title":"线程池的基本参数？线程池的拒绝策略？","slug":"线程池的基本参数-线程池的拒绝策略","link":"#线程池的基本参数-线程池的拒绝策略","children":[]},{"level":2,"title":"StringBuffer跟StringBuilder哪个线程安全？是怎么实现的？","slug":"stringbuffer跟stringbuilder哪个线程安全-是怎么实现的","link":"#stringbuffer跟stringbuilder哪个线程安全-是怎么实现的","children":[]},{"level":2,"title":"线程池从建立开始的任务调度机制？举例说明线程池调优？","slug":"线程池从建立开始的任务调度机制-举例说明线程池调优","link":"#线程池从建立开始的任务调度机制-举例说明线程池调优","children":[]},{"level":2,"title":"Synchronize原理？偏向锁、自旋锁、轻量级锁、重量级锁都是啥？","slug":"synchronize原理-偏向锁、自旋锁、轻量级锁、重量级锁都是啥","link":"#synchronize原理-偏向锁、自旋锁、轻量级锁、重量级锁都是啥","children":[]},{"level":2,"title":"锁膨胀、锁降级？","slug":"锁膨胀、锁降级","link":"#锁膨胀、锁降级","children":[]},{"level":2,"title":"ThreadLocal使用会有什么问题？","slug":"threadlocal使用会有什么问题","link":"#threadlocal使用会有什么问题","children":[]},{"level":2,"title":"Synchronize跟Volatile的区别？","slug":"synchronize跟volatile的区别","link":"#synchronize跟volatile的区别","children":[]},{"level":2,"title":"Synchronzed原理？和Lock的区别？","slug":"synchronzed原理-和lock的区别","link":"#synchronzed原理-和lock的区别","children":[]},{"level":2,"title":"synchronized与reentrantlock的异同、底层原理？","slug":"synchronized与reentrantlock的异同、底层原理","link":"#synchronized与reentrantlock的异同、底层原理","children":[]},{"level":2,"title":"wait()跟notify()是否可以脱离synchronize使用？","slug":"wait-跟notify-是否可以脱离synchronize使用","link":"#wait-跟notify-是否可以脱离synchronize使用","children":[]},{"level":2,"title":"wait()跟notify()为什么是对象的方法？","slug":"wait-跟notify-为什么是对象的方法","link":"#wait-跟notify-为什么是对象的方法","children":[]},{"level":2,"title":"以ReentrantLock为例。说下AQS的原理？","slug":"以reentrantlock为例。说下aqs的原理","link":"#以reentrantlock为例。说下aqs的原理","children":[]},{"level":2,"title":"公平锁的实现原理？","slug":"公平锁的实现原理","link":"#公平锁的实现原理","children":[]},{"level":2,"title":"怎么使用线程池的，有哪些获取方法","slug":"怎么使用线程池的-有哪些获取方法","link":"#怎么使用线程池的-有哪些获取方法","children":[]},{"level":2,"title":"juc包下熟悉哪些类？分别描述原理","slug":"juc包下熟悉哪些类-分别描述原理","link":"#juc包下熟悉哪些类-分别描述原理","children":[]},{"level":2,"title":"惊群效应？","slug":"惊群效应","link":"#惊群效应","children":[]},{"level":2,"title":"分布式唯一主键生成方案？","slug":"分布式唯一主键生成方案","link":"#分布式唯一主键生成方案","children":[]},{"level":2,"title":"synchronized保证有序性？","slug":"synchronized保证有序性","link":"#synchronized保证有序性","children":[]},{"level":2,"title":"锁升级锁降级","slug":"锁升级锁降级","link":"#锁升级锁降级","children":[]},{"level":2,"title":"线程执行顺序，Semaphore，join","slug":"线程执行顺序-semaphore-join","link":"#线程执行顺序-semaphore-join","children":[]},{"level":2,"title":"微信抢红包方案？","slug":"微信抢红包方案","link":"#微信抢红包方案","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":27.52,"words":8257},"filePathRelative":"01java/30thread/10.interview.md","localizedDate":"2021年3月3日","autoDesc":true}');export{h as comp,g as data};
