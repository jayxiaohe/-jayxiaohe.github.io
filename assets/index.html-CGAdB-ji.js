import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as i,e as l}from"./app-BUJ2iQsf.js";const t={},o=l('<h2 id="_1-栈、堆、方法区的交互关系" tabindex="-1"><a class="header-anchor" href="#_1-栈、堆、方法区的交互关系"><span>1. 栈、堆、方法区的交互关系</span></a></h2><p><strong>运行时数据区结构</strong></p><p><strong>从线程共享与否的角度来看（图中元空间就是jdk7以后方法区的实现）</strong></p><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220129252.png" width="60%"><p><strong>栈、堆、方法区的交互关系</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Person</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> person</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上行代码中，<code>Person</code>为类信息，存放在方法区；<code>person</code>为变量，存放在java栈中；<code>new Person()</code>创建的对象存放在堆中。</p><h2 id="_2-方法区的理解" tabindex="-1"><a class="header-anchor" href="#_2-方法区的理解"><span>2. 方法区的理解</span></a></h2><blockquote><p>官网中的相关介绍：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="noopener noreferrer">点击这里</a></p></blockquote><h3 id="_2-1-主要信息" tabindex="-1"><a class="header-anchor" href="#_2-1-主要信息"><span>2.1 主要信息</span></a></h3><ol><li>被所有jvm线程共享。</li><li>它存储每个类的结构，如运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括类和实例初始化、接口初始化中使用的特殊方法。</li><li>方法区是在虚拟机启动时创建的。尽管方法区域在逻辑上是堆的一部分，但简单的实现可能选择不进行垃圾收集或压缩。此规范不要求方法区域的位置或用于管理已编译代码的策略。</li><li>方法区域可以是固定大小的，或者可以根据计算的需要进行扩展，并且可以在不需要更大的方法区域时收缩。</li><li>对于 HotSpotJVM，方法区还有一个别名叫<code>Non-Heap（非堆）</code>。目的就是要和堆分开。</li><li>方法区可以看作是一块独立于Java堆的内存空间。方法区域的内存不需要是连续的。</li><li>如果方法区域中的内存无法用于满足分配请求，Java虚拟机将抛出<code>OutOfMemoryError</code>。</li></ol><h3 id="_2-2-方法区的基本理解" tabindex="-1"><a class="header-anchor" href="#_2-2-方法区的基本理解"><span>2.2 方法区的基本理解</span></a></h3><ul><li>方法区（MethodArea）与 Java 堆一样，是各个线程共享的内存区域。</li><li>方法区在 JVM 启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</li><li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：<code>java.lang.OutOfMemoryError: PermGenspace（1.7）</code> 或者 <code>java.lang.OutOfMemoryError：Metaspace（1.8）</code>。</li><li>关闭 JVM 就会释放这个区域的内存。</li></ul><h3 id="_2-3-hotspot-中方法区的演进" tabindex="-1"><a class="header-anchor" href="#_2-3-hotspot-中方法区的演进"><span>2.3 Hotspot 中方法区的演进</span></a></h3><h4 id="jdk7及以前" tabindex="-1"><a class="header-anchor" href="#jdk7及以前"><span>jdk7及以前</span></a></h4><ul><li>在jdk7及以前，习惯上把方法区称为永久代。jdk8 开始，使用元空间取代了永久代。</li><li>本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JROCkit/ IBM J9 中不存在永久代的概念。</li></ul><blockquote><p>现在来看，当年使用永久代，不是好的idea。导致Java程序更容易OOM（超过 <code>-XX:MaxPermSize</code> 上限）</p></blockquote><h4 id="jdk8" tabindex="-1"><a class="header-anchor" href="#jdk8"><span>jdk8</span></a></h4><ul><li>完全废弃了永久代的概念，改用与 BEA JROCkit/ IBM J9 一样在本地内存中实现的元空间来代替。</li><li>元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代最大的区别在于：<strong>元空间不在虚拟机设置的内存中，而是使用本地内存。</strong></li><li>永久代、元空间二者并不只是名字变了，内部结构也调整了。</li><li>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常。</li></ul><h2 id="_3-设置方法区大小与oom" tabindex="-1"><a class="header-anchor" href="#_3-设置方法区大小与oom"><span>3. 设置方法区大小与OOM</span></a></h2><p>方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。</p><h3 id="_3-1-jdk7及以前" tabindex="-1"><a class="header-anchor" href="#_3-1-jdk7及以前"><span>3.1 jdk7及以前</span></a></h3><ul><li>通过 <code>-XX:permSize</code> 来设置永久代初始分配空间。默认值是<code>20.75M</code></li><li>通过<code>-XX:MaxPermSize</code> 来设定永久代最大可分配空间。32位机器默认是<code>64M</code>，64位机器模式是<code>82M</code></li><li>当JVM加载的类信息容量超过了这个值，会报异常<code>java.lang.OutOfMemoryError: PermGenspace</code></li></ul><h3 id="_3-2-jdk8及以后" tabindex="-1"><a class="header-anchor" href="#_3-2-jdk8及以后"><span>3.2 jdk8及以后</span></a></h3><ul><li>元数据区大小可以使用参数<code>-XX:MetaspaceSize</code>和<code>-XX:MaxMetaspaceSize</code>指定，替代上述原有的两个参数。</li><li>默认值依赖于平台。windows下，<code>-XX:MetaspaceSize</code>是21M，<code>-XX:MaxMetaspaceSize</code>的值是-1，即没有限制。</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常 <code>OutOfMemoryError：Metaspace</code></li><li><code>-XX:MetaspaceSize</code>：设置初始的元空间大小：对于一个64位的服务器端JVM来说，其默认的<code>-XX:MetaspaceSize</code>值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</li></ul><h3 id="_3-3-如何查看当前permsize的值" tabindex="-1"><a class="header-anchor" href="#_3-3-如何查看当前permsize的值"><span>3.3 如何查看当前<code>PermSize</code>的值？</span></a></h3><p>可先通过 <code>jps</code>获取当前进程的进程号，1.7版本使用 <code>jinfo -flag PermSize pid</code> 查看；1.8及以后的版本使用 <code>jinfo -flag MetaspaceSize pid</code> 查看。</p><h3 id="_3-4-如何解决这些oom" tabindex="-1"><a class="header-anchor" href="#_3-4-如何解决这些oom"><span>3.4 如何解决这些OOM？</span></a></h3><p>要解决OOM异常或heapspace的异常，一般的手段是首先通过内存映像分析工具出来的堆转储快照进行分析，重点是确认（如Eclipse Memory Analyzer)对dump内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak)还是内存溢出（Memory Overflow)。</p><p>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GC Roots引用链的信息，就可以比较准确地定位出泄漏代码的位置。</p><p>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数(<code>-Xmx</code>与<code>-Xms</code>)，与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p><h2 id="_4-方法区的内部结构" tabindex="-1"><a class="header-anchor" href="#_4-方法区的内部结构"><span>4. 方法区的内部结构</span></a></h2><p>方法区用于存储己被虚拟机加载的类型信息、常量(运行时常量池)、静态变量、即时编译器(JIT)编译后的代码缓存等。</p><h3 id="_4-1-类型信息" tabindex="-1"><a class="header-anchor" href="#_4-1-类型信息"><span>4.1 类型信息</span></a></h3><p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation)，JVM必须在方法区中存储以下类型信息：</p><ul><li>这个类型的完整有效名称（全名：包名．类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.1ang.Object，都没有父类）</li><li>这个类型的修饰符(public,abstract,final的某个子集）</li><li>这个类型直接接口的一个有序列表</li><li>类的加载器</li></ul><h3 id="_4-2-域-field-信息" tabindex="-1"><a class="header-anchor" href="#_4-2-域-field-信息"><span>4.2 域(field)信息</span></a></h3><ul><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：域名称、域类型、域修饰符(private, protected, static, final, volatile, transient的某个子集）</li></ul><h3 id="_4-3-方法-method-信息" tabindex="-1"><a class="header-anchor" href="#_4-3-方法-method-信息"><span>4.3 方法(method)信息</span></a></h3><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序。</p><ul><li>方法名称</li><li>方法的返回类型（或void)</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符(public, private, protected, static, final, synchronized, native, abstract的一个子集)</li><li>方法的字节码(bytecodes)、操作数栈、局部变量表及大小( abstract 和 native 方法除外)</li><li>异常表(abstract 和 native 方法除外）。每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引。</li></ul><h3 id="_4-4-non-final的类信息" tabindex="-1"><a class="header-anchor" href="#_4-4-non-final的类信息"><span>4.4 non-final的类信息</span></a></h3><ul><li>静态变量和类关联在一起，随着类的加载而加载，它们成为类数据在逻辑上的一部分。</li><li>类变量被类的所有实例共享，即使没有类实例时你也可以访问它。</li></ul><h3 id="_4-5-运行时常量池-vs-常量池" tabindex="-1"><a class="header-anchor" href="#_4-5-运行时常量池-vs-常量池"><span>4.5 运行时常量池 vs 常量池</span></a></h3><ul><li>方法区，内部包含了运行时常量池。</li><li>字节码文件，内部包含了常量池。</li><li>要弄清楚方法区，需要理解清楚 ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚 ClassFile 中的常量池。</li></ul><h4 id="为什么需要常量池" tabindex="-1"><a class="header-anchor" href="#为什么需要常量池"><span>为什么需要常量池？</span></a></h4><p>一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。</p><h4 id="常量池中有什么" tabindex="-1"><a class="header-anchor" href="#常量池中有什么"><span>常量池中有什么？</span></a></h4><p>几种在常量池内存储的数据类型包括：</p><ul><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul><blockquote><p>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</p></blockquote><h3 id="_4-6-运行时常量池" tabindex="-1"><a class="header-anchor" href="#_4-6-运行时常量池"><span>4.6 运行时常量池</span></a></h3><ul><li>运行时常量池(Runtime Constant Pool）是方法区的一部分。</li><li>常量池表（constant Pool Tab1e)是 Class 文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li><li>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li><li>JVM 为每个己加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li><li>运行时常量池中包含多种不同的常量，包括编译期就己经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</li><li>运行时常量池类似于传统编程语言中的符号表（symbol table)，但是它所包含的数据却比符号表要更加丰富一些。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛 outofMemoryError 异常。</li></ul><blockquote><p>运行时常量池相对于 Class 文件常量池的另一重要特征是：具各动态性。</p></blockquote><h2 id="_5-方法区的演进细节" tabindex="-1"><a class="header-anchor" href="#_5-方法区的演进细节"><span>5. 方法区的演进细节</span></a></h2><h3 id="_5-1-演进细节" tabindex="-1"><a class="header-anchor" href="#_5-1-演进细节"><span>5.1 演进细节</span></a></h3><ol><li>首先明确：只有 Hotspot 才有永久代。 BEA JRockit、IBM J9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受 Java虚拟机规范管束，并不要求统一。</li><li>Hotspot 中方法区的变化</li></ol><ul><li>jdk 1.6及之前 有永久代(permanent generation），静态变量存放在永久代上 <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127667.png" alt="" loading="lazy"></li><li>jdk 1.7 有永久代，但己经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中 <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127537.png" alt="" loading="lazy"></li><li>jdk 1.8及之后 无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆 <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127415.png" alt="" loading="lazy"></li></ul><h3 id="_5-2-永久代为什么要被元空间替代" tabindex="-1"><a class="header-anchor" href="#_5-2-永久代为什么要被元空间替代"><span>5.2 永久代为什么要被元空间替代？</span></a></h3><p><a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener noreferrer">官网描述-JEP122</a></p><p>动机：这是JRockit和 Hotspot 融合工作的一部分。JRockit客户不需要配置永久代（因为 JRockit 没有永久代），并且习惯于不配置永久代。</p><p>由于类的元数据分配在本地内存中，元空间最大可分配空间就是系统可用内存空间。 这项改动是很有必要的，原因有：</p><ol><li>为永久代设置空间大小是很难确定的。 在某些场景下，如果动态加载类过多，容易产生 Perm区的OOM。比如某个实际 web 工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误 <code>java.lang.OutOfMemoryError: PermGen</code>。 而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</li><li>对永久代进行调优是很困难的。</li></ol><h3 id="_5-3-stringtable-字符串常量池-为什么要调整" tabindex="-1"><a class="header-anchor" href="#_5-3-stringtable-字符串常量池-为什么要调整"><span>5.3 StringTable (字符串常量池)为什么要调整？</span></a></h3><p>jdk7中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 full gc 的时候才会触发。而 full gc 是老年代的空间不足、永久代不足时才会触发。这就导致 StringTable 回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p><h2 id="_6-方法区的垃圾回收" tabindex="-1"><a class="header-anchor" href="#_6-方法区的垃圾回收"><span>6. 方法区的垃圾回收</span></a></h2><p>有些人认为方法区（如 Hotspot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 <code>JDK11</code> 时期的 <code>ZGC</code> 收集器就不支持类卸载）。</p><p>一般来说==这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。==但是这部分区域的回收有时又确实是必要的。以前sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的 Hotspot 虚拟机对此区域未完全回收而导致内存泄漏。</p><p><strong>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。</strong></p><ul><li>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。 字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为<code>final</code>的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量： <ol><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ol></li><li>Hotspot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</li><li>回收废弃常量与回收 Java 堆中的对象非常类似。</li><li>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于不再被使用的类的条件就比较苛刻了。需要同时满足下面三个条件： <ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。</li><li>加载该类的类加载器己经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul></li><li>Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是被允许，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，Hotsppt 虚拟机提供了 <code>-Xnoclassgc</code> 参数进行控制，还可以使用 <code>-verbose:class</code> 以及 <code>-XX:+TraceC1ass-Loading</code>、<code>-XX:+TraceC1assUnLoading</code> 查看类加载和卸载信息。</li><li>在大量使用反射、动态代理、CGLib 等字节码框架，动态生成 JSP 以及 OSGi 这类频繁自定义类加载器的场景中，通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</li></ul><h2 id="_7-总结-面试题" tabindex="-1"><a class="header-anchor" href="#_7-总结-面试题"><span>7. 总结 &amp; 面试题</span></a></h2><figure><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220126369.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>百度</strong> 三面：说一下 JVM 内存模型吧，有哪些区？分别干什么的？</p><p><strong>蚂蚁金服</strong> Java8 的内存分代改进 JVM 内存分哪几个区，每个区的作用是什么？ 一面：JVM内存分布／内存结构？栈和堆的区别？堆的结构？为什么两个 survor 区？ 二面：Eden 和 survivor 的比例分配？</p><p><strong>小米</strong> jvm 内存分区，为什么要有新生代和老年代</p><p><strong>字节跳动</strong> 二面：Java 的内存分区 二面：讲讲jvm运行时数据库区 什么时候对象会进入老年代？</p><p><strong>京东</strong> JVM 的内存结构，Eden 和 survivor比例 JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为 Eden 和 survor。</p><p><strong>天猫</strong> 一面：JVM 内存模型以及分区，需要详细到每个区放什么。 一面：JVM的内存模型，Java8 做了什么修改。</p><p><strong>拼多多</strong> JVM 存分哪几个区，每个区的作用是什么？</p><p><strong>美团</strong> java 内存分配 jvm 的永久代中会发生垃圾回收吗？ 一面：jvm 内存分区，为什么要有新生代和老年代？</p>',80),s=[o];function n(r,d){return i(),a("div",null,s)}const p=e(t,[["render",n],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/01java/40jvm/method_area/","title":"方法区","lang":"zh-CN","frontmatter":{"title":"方法区","date":"2022-05-21T16:32:26.000Z","order":30,"permalink":"/01java/40jvm/method_area/","icon":"wenzhang","description":"1. 栈、堆、方法区的交互关系 运行时数据区结构 从线程共享与否的角度来看（图中元空间就是jdk7以后方法区的实现） 栈、堆、方法区的交互关系 上行代码中，Person为类信息，存放在方法区；person为变量，存放在java栈中；new Person()创建的对象存放在堆中。 2. 方法区的理解 官网中的相关介绍：点击这里 2.1 主要信息 被所有j...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/method_area/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"方法区"}],["meta",{"property":"og:description","content":"1. 栈、堆、方法区的交互关系 运行时数据区结构 从线程共享与否的角度来看（图中元空间就是jdk7以后方法区的实现） 栈、堆、方法区的交互关系 上行代码中，Person为类信息，存放在方法区；person为变量，存放在java栈中；new Person()创建的对象存放在堆中。 2. 方法区的理解 官网中的相关介绍：点击这里 2.1 主要信息 被所有j..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127667.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法区\\",\\"image\\":[\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127667.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127537.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220127415.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220126369.png\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"1. 栈、堆、方法区的交互关系","slug":"_1-栈、堆、方法区的交互关系","link":"#_1-栈、堆、方法区的交互关系","children":[]},{"level":2,"title":"2. 方法区的理解","slug":"_2-方法区的理解","link":"#_2-方法区的理解","children":[{"level":3,"title":"2.1 主要信息","slug":"_2-1-主要信息","link":"#_2-1-主要信息","children":[]},{"level":3,"title":"2.2 方法区的基本理解","slug":"_2-2-方法区的基本理解","link":"#_2-2-方法区的基本理解","children":[]},{"level":3,"title":"2.3 Hotspot 中方法区的演进","slug":"_2-3-hotspot-中方法区的演进","link":"#_2-3-hotspot-中方法区的演进","children":[]}]},{"level":2,"title":"3. 设置方法区大小与OOM","slug":"_3-设置方法区大小与oom","link":"#_3-设置方法区大小与oom","children":[{"level":3,"title":"3.1 jdk7及以前","slug":"_3-1-jdk7及以前","link":"#_3-1-jdk7及以前","children":[]},{"level":3,"title":"3.2 jdk8及以后","slug":"_3-2-jdk8及以后","link":"#_3-2-jdk8及以后","children":[]},{"level":3,"title":"3.3 如何查看当前PermSize的值？","slug":"_3-3-如何查看当前permsize的值","link":"#_3-3-如何查看当前permsize的值","children":[]},{"level":3,"title":"3.4 如何解决这些OOM？","slug":"_3-4-如何解决这些oom","link":"#_3-4-如何解决这些oom","children":[]}]},{"level":2,"title":"4. 方法区的内部结构","slug":"_4-方法区的内部结构","link":"#_4-方法区的内部结构","children":[{"level":3,"title":"4.1 类型信息","slug":"_4-1-类型信息","link":"#_4-1-类型信息","children":[]},{"level":3,"title":"4.2 域(field)信息","slug":"_4-2-域-field-信息","link":"#_4-2-域-field-信息","children":[]},{"level":3,"title":"4.3 方法(method)信息","slug":"_4-3-方法-method-信息","link":"#_4-3-方法-method-信息","children":[]},{"level":3,"title":"4.4 non-final的类信息","slug":"_4-4-non-final的类信息","link":"#_4-4-non-final的类信息","children":[]},{"level":3,"title":"4.5 运行时常量池 vs 常量池","slug":"_4-5-运行时常量池-vs-常量池","link":"#_4-5-运行时常量池-vs-常量池","children":[]},{"level":3,"title":"4.6 运行时常量池","slug":"_4-6-运行时常量池","link":"#_4-6-运行时常量池","children":[]}]},{"level":2,"title":"5. 方法区的演进细节","slug":"_5-方法区的演进细节","link":"#_5-方法区的演进细节","children":[{"level":3,"title":"5.1 演进细节","slug":"_5-1-演进细节","link":"#_5-1-演进细节","children":[]},{"level":3,"title":"5.2 永久代为什么要被元空间替代？","slug":"_5-2-永久代为什么要被元空间替代","link":"#_5-2-永久代为什么要被元空间替代","children":[]},{"level":3,"title":"5.3 StringTable (字符串常量池)为什么要调整？","slug":"_5-3-stringtable-字符串常量池-为什么要调整","link":"#_5-3-stringtable-字符串常量池-为什么要调整","children":[]}]},{"level":2,"title":"6. 方法区的垃圾回收","slug":"_6-方法区的垃圾回收","link":"#_6-方法区的垃圾回收","children":[]},{"level":2,"title":"7. 总结 & 面试题","slug":"_7-总结-面试题","link":"#_7-总结-面试题","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":15.09,"words":4528},"filePathRelative":"01java/40jvm/30.方法区.md","localizedDate":"2022年5月22日","autoDesc":true}');export{p as comp,g as data};
