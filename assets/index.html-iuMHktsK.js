import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as n}from"./app-BUJ2iQsf.js";const t={},l=n(`<h2 id="什么是spring-boot-它主要有哪些优点" tabindex="-1"><a class="header-anchor" href="#什么是spring-boot-它主要有哪些优点"><span>什么是spring boot，它主要有哪些优点</span></a></h2><p>Springboot是spring的子项目，称为一站式解决方案，集成了外部很多的优秀的框架，如常用的mysql、jdbc。</p><p>主要优点：通过maven导入各种jar包，可以减少jar包的冲突；屏息了繁琐的xml配置文件；集成的开发框架，可以做到开箱即用。</p><h2 id="为什么要用spring-boot" tabindex="-1"><a class="header-anchor" href="#为什么要用spring-boot"><span>为什么要用spring boot？</span></a></h2><p><strong>优点</strong>：</p><p>快速创建独立运行的Spring应用以及与主流框架集成</p><p>1.1. 使用嵌入式的Servlet容器，应用最终可以打成Jar包的形式独立运行。</p><p>1.2. 版本仲裁中心和不同的场景启动器(starter)为Spring Boot应用开发管理这不同的框架和版本依赖。</p><p>1.3. 约定大于配置，Spring Boot为开发者导入项目所使用的框架设置好了默认配置。</p><p>1.4. Java Config代替了原有难以管理的SpringXML配置。</p><p>1.5. 提供了准生产环境的运行时的应用监控。</p><p>1.6. 与云计算的天然集成，Spring Cloud相关框架技术。</p><p><strong>缺点</strong>：</p><p>从以上优点可知，Spring Boot的最大优点就是为开发者屏蔽了底层框架的复杂性。这样恰好是其缺点。Spring Boot降低了入门门槛，但是其封装使后期学习曲线陡峭。所以如果需要熟练的掌握该框架，必须了解其底层原理。</p><h2 id="spring-boot跟spring-cloud的区别" tabindex="-1"><a class="header-anchor" href="#spring-boot跟spring-cloud的区别"><span>spring boot跟spring cloud的区别？</span></a></h2><p>SpringBoot只是一个快速开发框架，使用注解简化了xml配置，内置了Servlet容器，以Java应用程序进行执行。</p><p>SpringCloud是一系列框架的集合，可以包含SpringBoot。</p><h2 id="spring-boot与spring-mvc的区别" tabindex="-1"><a class="header-anchor" href="#spring-boot与spring-mvc的区别"><span>Spring Boot与Spring MVC的区别</span></a></h2><ol><li>Spring Boot是Spring和Spring MVC的整合，而Spring MVC只是Spring的一个模块，一个轻量级的Web层框架</li><li>Spring Boot几乎可以实现零配置，所有功能使用注解进行开发，运用了&#39;约定大于配置&#39;的思想，简化了项目开发难度，而Spring MVC需要依赖于xml配置进行开发</li><li>Spring Boot提供了内置的tomcat,可以打成jar包直接运行，也可以使用外置容器</li><li>Spring Boot还集成了许多第三方库配置，例如JDBC, Mongo, Redis等,应用这些第三方库，几乎可以零配置使用</li></ol><h2 id="springboot如何修改端口号" tabindex="-1"><a class="header-anchor" href="#springboot如何修改端口号"><span>SpringBoot如何修改端口号？</span></a></h2><p>:::: tabs cache-lifetime=&quot;5&quot; :options=&quot;{ useUrlFragment: false }&quot;</p><p>::: tab yml</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::: tab properties</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> 8888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>:::</p><p>::: tab 命令行</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;"> demo.jar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;"> --server.port=8888</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;"> Dserver.port=</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">8888</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;"> demo.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::::</p><h2 id="springboot热部署的方式" tabindex="-1"><a class="header-anchor" href="#springboot热部署的方式"><span>Springboot热部署的方式</span></a></h2><p>SpringBoot 1.3后才拥有SpringBoot devtools热部署</p><h3 id="方式一-spring-boot-devtools" tabindex="-1"><a class="header-anchor" href="#方式一-spring-boot-devtools"><span>方式一：spring-boot-devtools</span></a></h3><p>在项目的pom文件中添加依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">&lt;!--热部署jar--&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring-boot-devtools</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在Settings→Build→Compiler中将<code>Build project automatically</code>勾选上，最后使用 shift+ctrl+alt+&quot;/&quot; （IDEA中的快捷键） 选择&quot;<code>Registry</code>&quot; 然后勾选 <code>compiler.automake.allow.when.app.running</code></p><p>还需要修改配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  devtools:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    restart:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">      enabled: true  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">#设置开启热部署</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">      additional-paths: src/main/java </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">#重启目录</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">      exclude: WEB-INF/**</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">原理</p><p>devtools实现原理是使用了两个classloader，一个是<code>base classloader</code>，用来加载那些不会改变的类（比如第三方jar包等），另一个ClassLoader加载会更改的类，称为<code>restart ClassLoader</code>，这样在有代码更改的时候，原来的restart ClassLoader会被丢弃，重新创建一个ClassLoader，也就意味着应用程序重新启动通常比“冷启动”快得多，因为<code>base classloader</code>已经填充好了并且是可用的。</p><p>简而言之就是：<strong>通过监控类路径资源，当类路径上的文件发生更改时，自动重新启动应用程序，由于只需要重新读取被修改的类，所以要比冷启动快</strong>。</p></div><h3 id="方式二-spring-loaded" tabindex="-1"><a class="header-anchor" href="#方式二-spring-loaded"><span>方式二：Spring Loaded</span></a></h3><p>在项目中添加如下代码</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">  &lt;!-- springBoot编译插件--&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring-boot-maven-plugin</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">   &lt;!-- spring热部署 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">   &lt;!-- 该依赖在此处下载不下来，可以放置在build标签外部下载完成后再粘贴进plugin中 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">springloaded</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">1.2.6.RELEASE</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完毕后需要使用mvn指令运行：</p><p>首先找到IDEA中的<code>Edit configurations</code>，然后进行如下操作：（点击左上角的&quot;+&quot;,然后选择maven将出现右侧面板，在红色划线部位输入如图所示指令，你可以为该指令命名(此处命名为<code>MvnSpringBootRun</code>）</p><p>点击保存将会在IDEA项目运行部位出现，点击绿色箭头运行即可。</p><h3 id="方式三-jrebel" tabindex="-1"><a class="header-anchor" href="#方式三-jrebel"><span>方式三：Jrebel</span></a></h3><p>Jrebel是一款热部署插件。可参考这篇文章来配置：<a href="https://www.iocoder.cn/Fight/IDEA-JRebel-plug-in-hot-deployment/" target="_blank" rel="noopener noreferrer">IDEA JRebel 插件热部署（史上最全）</a></p><h2 id="spring-boot-中如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#spring-boot-中如何解决跨域问题"><span>Spring Boot 中如何解决跨域问题 ?</span></a></h2><p>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋。</p><p>因此我们推荐在后端通过 （CORS，Crossorigin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现<code>WebMvcConfifigurer</code>接口然后重写<code>addCorsMappings</code>方法解决跨域问题。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> CorsConfig</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> WebMvcConfigurer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> addCorsMappings</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">CorsRegistry </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">		registry</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">addMapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">/**</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">allowedOrigins</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">*</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">allowCredentials</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">GET</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">POST</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">PUT</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">DELETE</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">OPTIONS</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">maxAge</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在方法或者类上加<code>@CrossOrigin</code>注解来解决：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> DeliveryController</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">CrossOrigin</span></span>
<span class="line highlighted"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">/delivery/addRecord</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> DeliveryRecord </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">deliveryRecord</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">/delivery/checkRecord</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">DeliveryRecord</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> checkRecord</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> Integer </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">deliveryId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考：<a href="https://blog.csdn.net/munangs/article/details/123252149" target="_blank" rel="noopener noreferrer">注解@CrossOrigin</a></p><h2 id="spring-boot的自动配置是如何实现的" tabindex="-1"><a class="header-anchor" href="#spring-boot的自动配置是如何实现的"><span>Spring boot的自动配置是如何实现的？</span></a></h2><blockquote><p><code>@SpringBootApplication</code>=<code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code></p></blockquote><p>其实说白了SpringBoot的自动配置，实际是依赖<code>@Conditional来</code>实现的。</p><p><code>@Conditional</code>是一个条件注解，是Spring4提供的一个新特性，用于根据特定条件来控制Bean的创建行为。</p><p>SpringBoot中对@Conditional的引用链如下：</p><p>@SpringBootApplication -&gt; @EnableAutoConfiguration -&gt; @Import(AutoConfigurationImportSelector.class) -&gt; 在<code>AutoConfigurationImportSelector</code>类中会执行<code>getCandidateConfigurations（AnnotationMetadata metadata, AnnotationAttributes attributes）</code>方法，里面有一行：</p><p><code>List configurations = SpringFactoriesLoader.loadFactoryNames( getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</code></p><p>这里就会扫描具有MEAT-INF/spring.factories文件的jar包，得到所有的配置类。</p><p>而这些配置类上，基本都有以下类型的注解：</p><p>@ConditionalOnClass, @ConditionalOnMissingClass</p><p>@ConditionalOnBean, @ConditionalOnMissingBean</p><p>@ConditionalOnProperty, @ConditionalOnResource</p><p>@ConditionalOnEnabledHealthIndicator, ...</p><p>如果满足条件，则把对应的配置类装载入spring容器。</p><p>总结一下，其实就是 Spring Boot 在启动的时候，按照约定去读取 Spring Boot Starter 的配置信息，再根据配置信息对资源进行初始化，并注入到 Spring 容器中。这样 Spring Boot 启动完毕后，就已经准备好了一切资源，使用过程中直接注入对应 Bean 资源即可。</p><p><strong>参考：</strong></p><p><a href="https://blog.csdn.net/Let_me_tell_you/article/details/80951595" target="_blank" rel="noopener noreferrer">CSDN - SpringBoot自动配置原理</a></p><p><a href="https://mp.weixin.qq.com/s/gs2zLSH6m9ijO0-pP2sr9Q" target="_blank" rel="noopener noreferrer">Spring Boot自动配置原理、实战</a></p><h2 id="conditional相关的注解" tabindex="-1"><a class="header-anchor" href="#conditional相关的注解"><span>@Conditional相关的注解？</span></a></h2><p>@Conditional要配合Condition的实现类（ClassCondition）进行使用。SpringBoot 提供的常用条件注解：</p><ol><li><p>@ConditionalOnBean 组合@Conditional注解，当容器中有指定Bean才开启配置。</p></li><li><p>@ConditionalOnMissingBean 组合@Conditional注解，当容器中没有值当Bean才可开启配置。</p></li><li><p>@ConditionalOnClass 组合@Conditional注解，当容器中有指定Class才可开启配置。</p></li><li><p>@ConditionalOnMissingClass 组合@Conditional注解，当容器中没有指定Class才可开启配置。</p></li><li><p>@ConditionOnWebApplication 组合@Conditional注解，当前项目类型是WEB项目才可开启配置。项目有以下三种类型：</p><pre><code> 	1. ANY：任意一个Web项目

 	1. SERVLET： Servlet的Web项目

 	1. REACTIVE ：基于reactive-base的Web项目
</code></pre></li><li><p>@ConditionOnNotWebApplication 组合@Conditional注解，当前项目类型不是WEB项目才可开启配置。</p></li><li><p>@ConditionalOnProperty 组合@Conditional注解，当指定的属性有指定的值时才可开启配置。</p></li><li><p>@ConditionalOnExpression 组合@Conditional注解，当SpEl表达式为true时才可开启配置。</p></li><li><p>@ConditionOnJava 组合@Conditional注解，当运行的Java JVM在指定的版本范围时才开启配置。</p></li><li><p>@ConditionalResource 组合@Conditional注解，当类路径下有指定的资源才开启配置。</p></li><li><p>@ConditionOnJndi 组合@Conditional注解，当指定的JNDI存在时才开启配置。</p></li><li><p>@ConditionalOnCloudPlatform 组合@Conditional注解，当指定的云平台激活时才可开启配置。</p></li><li><p>@ConditiomalOnSingleCandidate 组合@Conditional注解，当制定的Class在容器中只有一个Bean，或者同时有多个但为首选时才开启配置。</p></li></ol><h2 id="springboot-中怎么禁用某些自动配置特性" tabindex="-1"><a class="header-anchor" href="#springboot-中怎么禁用某些自动配置特性"><span>SpringBoot 中怎么禁用某些自动配置特性？</span></a></h2><p>有 3 种方法。如果我们想禁用某些自动配置特性，可以使用 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解的 <code>exclude</code> 属性来指明。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 方案1，下面的代码段是使 DataSourceAutoConfiguration 无效：</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">EnableAutoConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;">exclude</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> DataSourceAutoConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> MyConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 方案2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">SpringBootApplication</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;">exclude</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> DataSourceAutoConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">class</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> MyConfiguration</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 方案3，在配置文件中配置</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">autoconfigure</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">exclude</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">org</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">springframework</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">autoconfigure</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">jdbc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">DataSourceAutoConfiguration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot的加载流程" tabindex="-1"><a class="header-anchor" href="#springboot的加载流程"><span>SpringBoot的加载流程？</span></a></h2><p><a href="https://www.jianshu.com/p/dc12081b3598" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/dc12081b3598</a></p><h2 id="springboot运行原理" tabindex="-1"><a class="header-anchor" href="#springboot运行原理"><span>SpringBoot运行原理</span></a></h2><p>1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：</p><ul><li>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。</li><li>推断并设置main方法的定义类。</li></ul><p>2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</p><p>3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</p><p>4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</p><p>5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。</p><p>6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</p><p>7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。</p><p>8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。</p><p>9） 最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</p><p>10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。</p><p>11） 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</p><p>12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</p><p>13） 正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理。</p><h2 id="spring-boot容器替换" tabindex="-1"><a class="header-anchor" href="#spring-boot容器替换"><span>Spring boot容器替换？</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">&lt;!-- 下面的配置将使用undertow来做服务器而不是tomcat --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring-boot-starter-web</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">exclusions</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">exclusion</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring-boot-starter-tomcat</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">exclusion</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">exclusions</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">spring-boot-starter-undertow</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在spring-boot-starter-web中，使用<code>&lt;exclusion&gt;</code>排除掉web中引入的tomcat，使用<code>&lt;dependency&gt;</code>重新导入undertow 即可。也可以用同样的方法，把容器替换为Jetty。</p><h2 id="spring-boot集成mybatis" tabindex="-1"><a class="header-anchor" href="#spring-boot集成mybatis"><span>Spring boot集成Mybatis?</span></a></h2><p>加入依赖即可。这个starter是mybatis提供的。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">org.mybatis.spring.boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">mybatis-spring-boot-starter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">1.3.0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot读取配置相关注解有" tabindex="-1"><a class="header-anchor" href="#springboot读取配置相关注解有"><span>SpringBoot读取配置相关注解有？</span></a></h2><ul><li>@PropertySource</li><li>@Value</li><li>@Environment</li><li>@ConfigurationProperties</li></ul><h2 id="starters是什么" tabindex="-1"><a class="header-anchor" href="#starters是什么"><span>Starters是什么？</span></a></h2><p>Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。如你想使用<code>Spring JPA</code>访问数据库，只要加入<code>spring-boot-starter-data-jpa</code>启动器依赖就能使用了。</p><p>Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。</p><p><strong>Starters命名</strong></p><p>Spring Boot官方的启动器都是以<code>spring-boot-starter-</code>开头命名的，代表了一个特定的应用类型。</p><p>第三方的启动器不能以spring-boot开头命名，它们都被Spring Boot官方保留。一般一个第三方的应该这样命名，像mybatis的<code>mybatis-spring-boot-starter</code>。</p><h2 id="spring-boot的starter的执行原理" tabindex="-1"><a class="header-anchor" href="#spring-boot的starter的执行原理"><span>spring boot的starter的执行原理</span></a></h2><p>利用starter实现自动化配置只需要两个条件――maven依赖、配置文件，这里简单介绍下starter实现自动化配置的流程。</p><p>引入maven实质上就是导入jar包，spring-boot启动的时候会找到starter jar包中的resources/META-INF/spring.factories文件，根据spring.factories文件中的配置，找到需要自动配置的类。</p><h2 id="spring-boot自己实现starter" tabindex="-1"><a class="header-anchor" href="#spring-boot自己实现starter"><span>Spring Boot自己实现starter?</span></a></h2><p><a href="https://www.cnblogs.com/hello-shf/p/10864977.html" target="_blank" rel="noopener noreferrer">SpringBoot应用篇（一）：自定义starter</a></p><h2 id="spring-boot-starter-parent-有什么用" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-parent-有什么用"><span>Spring-boot-starter-parent 有什么用 ?</span></a></h2><p>我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个 parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：</p><p>定义了 Java 编译版本为 1.8 。</p><p>使用 UTF-8 格式编码。</p><p>继承自spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。</p><p>执行打包操作的配置。</p><p>自动化的资源过滤。</p><p>自动化的插件配置。</p><p>针对 application.properties 和 application.yml 的资源过滤，包括通过 profile</p><p>定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml。</p><h2 id="spring-boot-打成的-jar-和普通的-jar-有什么区别" tabindex="-1"><a class="header-anchor" href="#spring-boot-打成的-jar-和普通的-jar-有什么区别"><span>Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?</span></a></h2><p>Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 java -jar xxx.jar 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。</p><p>Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \\BOOT-INF\\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</p><h2 id="如何在-spring-boot-启动的时候运行一些特定的代码" tabindex="-1"><a class="header-anchor" href="#如何在-spring-boot-启动的时候运行一些特定的代码"><span>如何在 Spring Boot 启动的时候运行一些特定的代码？</span></a></h2><p>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法。如下所示：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> CommandLineRunner</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * Callback used to run the bean.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> incoming main method arguments</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">@throws</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> on error</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">...</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//---</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> ApplicationRunner</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * Callback used to run the bean.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> incoming application arguments</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">@throws</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> on error</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">ApplicationArguments </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用方式</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">springframework</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">boot</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">springframework</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">stereotype</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">@Component</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">public</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> class</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> MyBean </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">implements</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> CommandLineRunner {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   public</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> run(String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">..</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> args) {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">       // Do something...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">@Bean</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> CommandLineRunner init() {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> (String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">..</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> strings) </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   }</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">启动顺序</p><p>如果启动的时候有多个ApplicationRunner和CommandLineRunner，想控制它们的启动顺序，可以实现 <code>org.springframework.core.Ordered</code>接口或者使用 <code>org.springframework.core.annotation.Order</code>注解。</p></div>`,134),e=[l];function p(h,r){return a(),s("div",null,e)}const o=i(t,[["render",p],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/20frame/30.SpringBoot/sb01/","title":"SpringBoot面试题","lang":"zh-CN","frontmatter":{"title":"SpringBoot面试题","date":"2022-04-15T10:23:52.000Z","permalink":"/20frame/30.SpringBoot/sb01/","order":2,"icon":"wenzhang","description":"什么是spring boot，它主要有哪些优点 Springboot是spring的子项目，称为一站式解决方案，集成了外部很多的优秀的框架，如常用的mysql、jdbc。 主要优点：通过maven导入各种jar包，可以减少jar包的冲突；屏息了繁琐的xml配置文件；集成的开发框架，可以做到开箱即用。 为什么要用spring boot？ 优点： 快速创建...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/20frame/30.SpringBoot/sb01/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"SpringBoot面试题"}],["meta",{"property":"og:description","content":"什么是spring boot，它主要有哪些优点 Springboot是spring的子项目，称为一站式解决方案，集成了外部很多的优秀的框架，如常用的mysql、jdbc。 主要优点：通过maven导入各种jar包，可以减少jar包的冲突；屏息了繁琐的xml配置文件；集成的开发框架，可以做到开箱即用。 为什么要用spring boot？ 优点： 快速创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-04-15T10:23:52.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-15T10:23:52.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"什么是spring boot，它主要有哪些优点","slug":"什么是spring-boot-它主要有哪些优点","link":"#什么是spring-boot-它主要有哪些优点","children":[]},{"level":2,"title":"为什么要用spring boot？","slug":"为什么要用spring-boot","link":"#为什么要用spring-boot","children":[]},{"level":2,"title":"spring boot跟spring cloud的区别？","slug":"spring-boot跟spring-cloud的区别","link":"#spring-boot跟spring-cloud的区别","children":[]},{"level":2,"title":"Spring Boot与Spring MVC的区别","slug":"spring-boot与spring-mvc的区别","link":"#spring-boot与spring-mvc的区别","children":[]},{"level":2,"title":"SpringBoot如何修改端口号？","slug":"springboot如何修改端口号","link":"#springboot如何修改端口号","children":[]},{"level":2,"title":"Springboot热部署的方式","slug":"springboot热部署的方式","link":"#springboot热部署的方式","children":[{"level":3,"title":"方式一：spring-boot-devtools","slug":"方式一-spring-boot-devtools","link":"#方式一-spring-boot-devtools","children":[]},{"level":3,"title":"方式二：Spring Loaded","slug":"方式二-spring-loaded","link":"#方式二-spring-loaded","children":[]},{"level":3,"title":"方式三：Jrebel","slug":"方式三-jrebel","link":"#方式三-jrebel","children":[]}]},{"level":2,"title":"Spring Boot 中如何解决跨域问题 ?","slug":"spring-boot-中如何解决跨域问题","link":"#spring-boot-中如何解决跨域问题","children":[]},{"level":2,"title":"Spring boot的自动配置是如何实现的？","slug":"spring-boot的自动配置是如何实现的","link":"#spring-boot的自动配置是如何实现的","children":[]},{"level":2,"title":"@Conditional相关的注解？","slug":"conditional相关的注解","link":"#conditional相关的注解","children":[]},{"level":2,"title":"SpringBoot 中怎么禁用某些自动配置特性？","slug":"springboot-中怎么禁用某些自动配置特性","link":"#springboot-中怎么禁用某些自动配置特性","children":[]},{"level":2,"title":"SpringBoot的加载流程？","slug":"springboot的加载流程","link":"#springboot的加载流程","children":[]},{"level":2,"title":"SpringBoot运行原理","slug":"springboot运行原理","link":"#springboot运行原理","children":[]},{"level":2,"title":"Spring boot容器替换？","slug":"spring-boot容器替换","link":"#spring-boot容器替换","children":[]},{"level":2,"title":"Spring boot集成Mybatis?","slug":"spring-boot集成mybatis","link":"#spring-boot集成mybatis","children":[]},{"level":2,"title":"SpringBoot读取配置相关注解有？","slug":"springboot读取配置相关注解有","link":"#springboot读取配置相关注解有","children":[]},{"level":2,"title":"Starters是什么？","slug":"starters是什么","link":"#starters是什么","children":[]},{"level":2,"title":"spring boot的starter的执行原理","slug":"spring-boot的starter的执行原理","link":"#spring-boot的starter的执行原理","children":[]},{"level":2,"title":"Spring Boot自己实现starter?","slug":"spring-boot自己实现starter","link":"#spring-boot自己实现starter","children":[]},{"level":2,"title":"Spring-boot-starter-parent 有什么用 ?","slug":"spring-boot-starter-parent-有什么用","link":"#spring-boot-starter-parent-有什么用","children":[]},{"level":2,"title":"Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?","slug":"spring-boot-打成的-jar-和普通的-jar-有什么区别","link":"#spring-boot-打成的-jar-和普通的-jar-有什么区别","children":[]},{"level":2,"title":"如何在 Spring Boot 启动的时候运行一些特定的代码？","slug":"如何在-spring-boot-启动的时候运行一些特定的代码","link":"#如何在-spring-boot-启动的时候运行一些特定的代码","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":12.99,"words":3897},"filePathRelative":"20frame/30.SpringBoot/01.SpringBoot01.md","localizedDate":"2022年4月15日","autoDesc":true}');export{o as comp,g as data};
