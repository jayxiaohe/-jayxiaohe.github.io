import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as h}from"./app-BUJ2iQsf.js";const t={},k=h(`<h2 id="流简介" tabindex="-1"><a class="header-anchor" href="#流简介"><span>流简介</span></a></h2><p>流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。<br>简短的定义就是“从支持数据处理操作的源生成的元素序列”。</p><blockquote><p>流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样（这里假设它是集合之类的可重复的源，如果是I/O通道就没戏了）。</p></blockquote><h2 id="流操作" tabindex="-1"><a class="header-anchor" href="#流操作"><span>流操作</span></a></h2><h3 id="流操作分类" tabindex="-1"><a class="header-anchor" href="#流操作分类"><span>流操作分类</span></a></h3><p>对流的操作可以分为两类：中间操作、终端操作。<br>如下方代码所示，<code>filter, map, limit</code> 方法的返回值都是流，可以连成一条流水线，它们就是中间操作。<code>collect</code> 触发流水线执行并关闭，它就是终端操作。</p><blockquote><p>可以连接起来的流操作称为中间操作，关闭流的操作称为终端操作。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> names</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> menu</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getCalories</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 中间操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Dish</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	// 中间操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">limit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	// 中间操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">	// 终端操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用流" tabindex="-1"><a class="header-anchor" href="#使用流"><span>使用流</span></a></h3><p>流的使用一般包括三件事：</p><ul><li>一个数据源（如集合）来执行一个查询；</li><li>一个中间操作链，形成一条流的流水线；</li><li>一个终端操作，执行流水线，并能生成结果。</li></ul><p>常见的中间操作有：filter，map, limit, sorted, distinct。<br>常见的终端操作有：forEach, count, collect。</p><h4 id="筛选和切片" tabindex="-1"><a class="header-anchor" href="#筛选和切片"><span>筛选和切片</span></a></h4><ol><li><strong>用谓词切片。</strong></li></ol><p>如下方的<code>filter()</code>方法。接收一个返回boolean值的函数作为参数，并返回一个包含了符合该条件的元素的流。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Dish</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> vegetarianMenu</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> menu</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Dish</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">isVegetarian</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>筛选各异的元素（去重）</strong></li></ol><p>如下方的<code>distinct()</code>方法，会在filter方法返回的偶数流中，去掉重复的元素。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> numbers</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">numbers</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>截短流</strong></li></ol><p>流支持<code>limit(n)</code>方法，该方法会返回一个不超过给定长度<code>n</code>的流。如下图，第3行的<code>limit(3)</code>方法会返回流中的前3个元素。</p><blockquote><p>如果limit方法的参数超过了流中元素的数量，limit返回的流会包含所有元素。不会报错。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Dish</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> dishes</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> menu</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getCalories</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">limit</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>跳过元素</strong></li></ol><p>流还支持<code>skip(n)</code>方法，返回一个扔掉了前<code>n</code>个元素的流。如果流中元素不足n个，则返回一个空流。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">skip</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">		// 跳过10个元素，会返回一个空流。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collectors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="映射" tabindex="-1"><a class="header-anchor" href="#映射"><span>映射</span></a></h4><blockquote><p>Stream API通过<code>map</code>和<code>flatMap</code>方法提供了映射方法，用来提取某些对象中的信息。</p></blockquote><ol><li><strong>对流中每个元素应用函数</strong></li></ol><p>如下方代码，把方法引用<code>Dish::getName</code>传给了<code>map</code>方法，来提取流中菜肴的名称。因为getName方法返回一个String，所以map方法输出的流的类型就是<code>Stream&lt;String&gt;</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> dishNames</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> menu</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Dish</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以像下方代码这样，对流中每个字符串元素，返回它们的长度。最终返回<code>Stream&lt;Integer&gt;</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> words</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Java 8</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Lambdas</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">In</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Action</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> wordLengths</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> words</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>流的扁平化</strong></li></ol><p>如下方代码所示，<code>map()</code>方法会将原始流内的每个字符串转换为字符串数组，该方法返回一个数组串数组流<code>Stream&lt;String[]&gt;</code>。而<code>flatMap()</code>方法，会将流扁平化，对字符串数组流中的每个数组，都应用<code>Arrays::stream</code>方法，将每个数组都转成字符串流<code>Stream&lt;String&gt;</code>的内容，并返回这个字符串流。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">Hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">World</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">Arrays</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用<code>Arrays::stream</code>时生成的单个流都被合并起来，即扁平化为一个流。一言以蔽之，flatmap方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流。</p></blockquote><p>再看一个稍微复杂的例子：给定两个数字列表，如何返回所有的数对呢？如，给定 <code>int[] arr1 = {1, 2, 3}，int[] arr2 = {3, 4}；需要返回_[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)_</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> pairs</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collectors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再进一步，如果只返回总和能被3整除的数对呢？加一个筛选即可。如下方代码所示：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> pairs</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">    filter</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collectors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查找和匹配" tabindex="-1"><a class="header-anchor" href="#查找和匹配"><span>查找和匹配</span></a></h4><p>主要有这些方法：<code>allMatch、anyMatch、noneMatch、findFirst和findAny</code>。</p><h4 id="规约" tabindex="-1"><a class="header-anchor" href="#规约"><span>规约</span></a></h4><h4 id="数值流" tabindex="-1"><a class="header-anchor" href="#数值流"><span>数值流</span></a></h4><h4 id="构建流" tabindex="-1"><a class="header-anchor" href="#构建流"><span>构建流</span></a></h4>`,46),l=[k];function n(e,p){return a(),s("div",null,l)}const E=i(t,[["render",n],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/01java/java8/stream/","title":"流","lang":"zh-CN","frontmatter":{"title":"流","date":"2022-03-02T23:00:23.000Z","order":20,"permalink":"/01java/java8/stream/","icon":"wenzhang","description":"流简介 流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。简短的定义就是“从支持数据处理操作的源生成的元素序列”。 流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样（这里假设它是集合之类的可重复的源，如果是I/O通道...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/java8/stream/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"流"}],["meta",{"property":"og:description","content":"流简介 流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。简短的定义就是“从支持数据处理操作的源生成的元素序列”。 流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样（这里假设它是集合之类的可重复的源，如果是I/O通道..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-03-02T23:00:23.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-02T23:00:23.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"流简介","slug":"流简介","link":"#流简介","children":[]},{"level":2,"title":"流操作","slug":"流操作","link":"#流操作","children":[{"level":3,"title":"流操作分类","slug":"流操作分类","link":"#流操作分类","children":[]},{"level":3,"title":"使用流","slug":"使用流","link":"#使用流","children":[]}]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1254},"filePathRelative":"01java/50.Java8/20.流.md","localizedDate":"2022年3月3日","autoDesc":true}');export{E as comp,g as data};
