import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as t}from"./app-BUJ2iQsf.js";const n={},l=t(`<blockquote><p>List是一个有序的、可重复的集合，扩展<code>Collection</code>接口的接口，在<code>java.util</code>包下，提供增删改查数据的基本功能，且可以通过索引来插入替换和删除集合元素的方法。</p><p><strong>集合的出现就是为了持有对象，集合中可以存储任意类型的对象，而且长度可变。</strong></p></blockquote><h2 id="常用的实现类" tabindex="-1"><a class="header-anchor" href="#常用的实现类"><span>常用的实现类</span></a></h2><p><strong>ArrayList</strong></p><p>底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素</p><p><strong>LinkedList</strong></p><p>底层数据结构是链表，查询慢，增删快，线程不安全，效率高，可以存储重复元素</p><p><strong>Vector</strong></p><p>底层数据结构是数组，查询快，增删慢，线程安全，效率低，可以存储重复元素</p><h2 id="有了数组为什么还需要list集合" tabindex="-1"><a class="header-anchor" href="#有了数组为什么还需要list集合"><span>有了数组为什么还需要List集合？</span></a></h2><p>数组长度是固定的，在日常编程中可能经常不确定会有多少个对象。如果使用数组那么一旦数量超过了数组的长度就将发生异常：<code>java.lang.ArrayIndexOutOfBoundsException</code>（这个异常表示数组下标越界）。集合的出现就是为了持有对象，集合中可以存储任意类型的对象,而且长度可变。</p><h2 id="数组array和集合arraylist的区别" tabindex="-1"><a class="header-anchor" href="#数组array和集合arraylist的区别"><span>数组Array和集合ArrayList的区别</span></a></h2><p><strong>数组Array</strong></p><ol><li><p>数组在内存中是连续存储的，所以它的索引速度是非常的快，而且赋值与修改元素也很简单</p></li><li><p>声明数组的时候，必须同时指明数组的长度，数组的长度过长，会造成内存浪费，数组和长度过短，会造成数据溢出的错误。</p></li><li><p>数组只能存放类型一样的数据（基本类型/引用类型）</p></li></ol><p><strong>集合List（ArrayList)</strong></p><ol><li>容量可动态增长；但牺牲效率</li><li>ArrayList内部封装了一个Object类型的数组</li><li>可以将 ArrayList想象成一种“会自动扩增容量的Array”</li></ol><h2 id="arraylist-和-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-的区别"><span>Arraylist 和 LinkedList 的区别?</span></a></h2><ol><li><strong>是否保证线程安全：</strong> <code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</li><li><strong>底层数据结构：</strong> <code>Arraylist</code> 底层使用的是 <strong><code>Object</code> 数组</strong>；<code>LinkedList</code> 底层使用的是 <strong>双向链表</strong> 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</li><li><strong>插入和删除是否受元素位置的影响：</strong><ul><li><code>ArrayList</code> 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行<code>add(E e)</code>方法的时候， <code>ArrayList</code> 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（<code>add(int index, E element)</code>）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。</li><li><code>LinkedList</code> 采用链表存储，所以，如果是在头尾插入或者删除元素不受元素位置的影响（<code>add(E e)</code>、<code>addFirst(E e)</code>、<code>addLast(E e)</code>、<code>removeFirst()</code> 、 <code>removeLast()</code>），近似 O(1)，如果是要在指定位置 <code>i</code> 插入和删除元素的话（<code>add(int index, E element)</code>，<code>remove(Object o)</code>） 时间复杂度近似为 O(n) ，因为需要先移动到指定位置再插入。</li></ul></li><li><strong>是否支持快速随机访问：</strong> <code>LinkedList</code> 不支持高效的随机元素访问，而 <code>ArrayList</code> 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</li><li><strong>内存空间占用：</strong> ArrayList 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。</li></ol><blockquote><p><strong>双向链表：</strong> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。</p><p><strong>双向循环链表：</strong> 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。</p><p>参考：<a href="https://juejin.cn/post/6844903648154271757" target="_blank" rel="noopener noreferrer">看图轻松理解数据结构与算法系列(双向链表)</a></p></blockquote><h2 id="arrayslist-为什么实现randomaccess接口" tabindex="-1"><a class="header-anchor" href="#arrayslist-为什么实现randomaccess接口"><span>ArraysList 为什么实现<code>RandomAccess</code>接口？</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> RandomAccess</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RandomAccess</code>的源码如上，什么都没有定义。所以它只是一个标识。阅读接口的注释，不难发现，这个接口的实现类具有随机访问功能。注释的翻译如下（百度机翻）</p><div class="hint-container note"><p class="hint-container-title">RandomAccess 接口的注释</p><p>列表实现所使用的标记接口，用于指示它们支持快速（通常为常数时间）随机访问。该接口的主要目的是允许通用算法在应用于随机或顺序访问列表时改变其行为，以提供良好的性能。</p><p>操作随机访问列表（如ArrayList）的最佳算法在应用于顺序访问列表（如LinkedList）时会产生二次行为。鼓励通用列表算法在应用算法之前检查给定列表是否是该接口的实例，如果将该算法应用于顺序访问列表，该算法将提供较差的性能，并在必要时改变其行为，以保证可接受的性能。</p><p>人们认识到，随机存取和顺序存取之间的区别往往是模糊的。例如，一些列表实现提供了渐近线性的访问时间，如果它们在实践中获得了巨大但恒定的访问时间。这样的列表实现通常应该实现这个接口。根据经验，如果对于类的典型实例，该循环： for (int i=0, n=list.size(); i &lt; n; i++) list.get(i);</p><p>运行速度比下面这个循环快： for (Iterator i=list.iterator(); i.hasNext(); ) i.next();</p></div><p>在很多源码中，我们都能看到使用<code>RandomAccess</code>的例子。比如<code>Collections#binarySearch()</code>方法。</p><p>如果要搜索的<strong>list实现类</strong>实现了<code>RandomAccess</code>，则调用<code>indexedBinarySearch</code>，否则调用<code>iteratorBinarySearch</code>。在前者使用<code>list.get(index)</code>来获取元素，而后者使用<code>list.listIterator()</code>的方式来遍历获取元素。前者效率是要高一些的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> binarySearch</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> extends Comparable</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> T key</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> RandomAccess </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">BINARYSEARCH_THRESHOLD</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Collections</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">indexedBinarySearch</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        else</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Collections</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">iteratorBinarySearch</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arraydeque-与-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#arraydeque-与-linkedlist-的区别"><span>ArrayDeque 与 LinkedList 的区别</span></a></h2><p><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了 <code>Deque</code> 接口，两者都具有队列的功能，但两者有什么区别呢？</p><ul><li><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而 <code>LinkedList</code> 则通过链表来实现。</li><li><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但 <code>LinkedList</code> 支持。</li><li><code>ArrayDeque</code> 是在 JDK1.6 才被引入的，而<code>LinkedList</code> 早在 JDK1.2 时就已经存在。</li><li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</li></ul><p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p><h2 id="arraylist-的扩容机制" tabindex="-1"><a class="header-anchor" href="#arraylist-的扩容机制"><span>ArrayList 的扩容机制</span></a></h2><p><a href="https://javaguide.cn/java/collection/arraylist-source-code/#_2-arraylist-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB" target="_blank" rel="noopener noreferrer">参考这里</a></p><p>默认长度为10，扩容时扩一半。</p><h2 id="arrays-aslist-方法的作用-注意事项" tabindex="-1"><a class="header-anchor" href="#arrays-aslist-方法的作用-注意事项"><span>Arrays.asList()方法的作用？注意事项？</span></a></h2><p>这个方法可以把数组转为list，适用于对象型数据的数组。有以下注意事项：</p><ol><li><strong><code>Arrays.asList()</code>是泛型方法，传递的数组必须是对象数组，而不是基本类型。</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myArray</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   List</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myList</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">myArray</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">   System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">myList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">   System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">myList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//数组地址值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">   System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">myList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//报错：ArrayIndexOutOfBoundsException</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> array</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">   System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">array</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当传入一个原生数据类型数组时，<code>Arrays.asList()</code> 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时 <code>List</code> 的唯一元素就是这个数组，这也就解释了上面的代码。</p><p>可以使用包装类型数组就可以解决这个问题：<code>Integer[] myArray = {1, 2, 3};</code></p><ol start="2"><li>该方法返回的<code>ArrayList</code>全限定名是<code>java.util.Arrays.ArrayList</code>。这个类继承了<code>AbstractList</code>，长度是不可改变的，也没有重写add()、remove()、clear()等方法。因此调用这些方法时会报错。</li></ol><h2 id="将数组转换为集合-list" tabindex="-1"><a class="header-anchor" href="#将数组转换为集合-list"><span>将数组转换为集合（List）？</span></a></h2><ol><li><p>手动实现</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//JDK1.5+</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> arrayToList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> array</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> l</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">array</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> T</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> array</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">    l</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> l</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myArray</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">arrayToList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">myArray</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//class java.util.ArrayList</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>较简单的方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;&gt;(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">b</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">c</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用Java8的<code>stream</code>(推荐)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myArray</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myList</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">myArray</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collectors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//基本类型也可以实现转换（依赖boxed的装箱操作）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myArray2</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> myList</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">myArray2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">boxed</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collectors</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="将集合-list-转换为数组" tabindex="-1"><a class="header-anchor" href="#将集合-list-转换为数组"><span>将集合（List）转换为数组？</span></a></h2><p>《阿里巴巴 Java 开发手册》的描述如下：</p><blockquote><p><strong>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一致、长度为 0 的空数组。</strong></p></blockquote><p><code>toArray(T[] array)</code> 方法的参数是一个泛型数组，如果 <code>toArray</code> 方法中没有传递任何参数的话返回的是 <code>Object</code>类 型数组。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]{</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">dog</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">lazy</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">over</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">jumps</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">fox</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">brown</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">quick</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">A</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">Collections</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">//没有指定类型的话会报错</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),h=[l];function e(k,p){return a(),s("div",null,h)}const E=i(n,[["render",e],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/01java/20coll/list/","title":"List","lang":"zh-CN","frontmatter":{"title":"List","order":10,"date":"2022-03-02T00:06:53.000Z","permalink":"/01java/20coll/list/","icon":"wenzhang","category":["学习笔记","Java容器"],"tag":["基础"],"description":"List是一个有序的、可重复的集合，扩展Collection接口的接口，在java.util包下，提供增删改查数据的基本功能，且可以通过索引来插入替换和删除集合元素的方法。 集合的出现就是为了持有对象，集合中可以存储任意类型的对象，而且长度可变。 常用的实现类 ArrayList 底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/20coll/list/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"List"}],["meta",{"property":"og:description","content":"List是一个有序的、可重复的集合，扩展Collection接口的接口，在java.util包下，提供增删改查数据的基本功能，且可以通过索引来插入替换和删除集合元素的方法。 集合的出现就是为了持有对象，集合中可以存储任意类型的对象，而且长度可变。 常用的实现类 ArrayList 底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:published_time","content":"2022-03-02T00:06:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"List\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-02T00:06:53.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"常用的实现类","slug":"常用的实现类","link":"#常用的实现类","children":[]},{"level":2,"title":"有了数组为什么还需要List集合？","slug":"有了数组为什么还需要list集合","link":"#有了数组为什么还需要list集合","children":[]},{"level":2,"title":"数组Array和集合ArrayList的区别","slug":"数组array和集合arraylist的区别","link":"#数组array和集合arraylist的区别","children":[]},{"level":2,"title":"Arraylist 和 LinkedList 的区别?","slug":"arraylist-和-linkedlist-的区别","link":"#arraylist-和-linkedlist-的区别","children":[]},{"level":2,"title":"ArraysList 为什么实现RandomAccess接口？","slug":"arrayslist-为什么实现randomaccess接口","link":"#arrayslist-为什么实现randomaccess接口","children":[]},{"level":2,"title":"ArrayDeque 与 LinkedList 的区别","slug":"arraydeque-与-linkedlist-的区别","link":"#arraydeque-与-linkedlist-的区别","children":[]},{"level":2,"title":"ArrayList 的扩容机制","slug":"arraylist-的扩容机制","link":"#arraylist-的扩容机制","children":[]},{"level":2,"title":"Arrays.asList()方法的作用？注意事项？","slug":"arrays-aslist-方法的作用-注意事项","link":"#arrays-aslist-方法的作用-注意事项","children":[]},{"level":2,"title":"将数组转换为集合（List）？","slug":"将数组转换为集合-list","link":"#将数组转换为集合-list","children":[]},{"level":2,"title":"将集合（List）转换为数组？","slug":"将集合-list-转换为数组","link":"#将集合-list-转换为数组","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1},{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":7.86,"words":2358},"filePathRelative":"01java/20coll/10list.md","localizedDate":"2022年3月2日","autoDesc":true}');export{E as comp,y as data};
