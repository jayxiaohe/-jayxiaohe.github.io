import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,e as a}from"./app-BUJ2iQsf.js";const i={},n=a('<h2 id="pc-register-介绍" tabindex="-1"><a class="header-anchor" href="#pc-register-介绍"><span>PC Register 介绍</span></a></h2><p>JVM中的PC寄存器是<strong>对物理PC寄存器的一种抽象模拟</strong>。</p><p>作用：PC寄存器用来存储指向<strong>下一条指令的地址</strong>，也即将要执行的指令代码。由<strong>执行引擎</strong>读取下一条指令。</p><ul><li>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</li><li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址。或者，如果是在执行native方法，则是未指定值(<code>undefned</code>)</li><li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li><li>它是唯一一个在Java虚拟机规范中没有规定任何 <code>OutMemoryError</code> 情况的区域。</li></ul><h2 id="两个常见问题" tabindex="-1"><a class="header-anchor" href="#两个常见问题"><span>两个常见问题</span></a></h2><h3 id="_1-使用pc寄存器存储字节码指令地址的作用" tabindex="-1"><a class="header-anchor" href="#_1-使用pc寄存器存储字节码指令地址的作用"><span>1. 使用PC寄存器存储字节码指令地址的作用？</span></a></h3><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。 JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p><h3 id="_2-pc寄存器为什么被设定为线程私有" tabindex="-1"><a class="header-anchor" href="#_2-pc寄存器为什么被设定为线程私有"><span>2. PC寄存器为什么被设定为线程私有？</span></a></h3><p>所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录<strong>各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器</strong>，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p><p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>',10),o=[n];function c(p,l){return r(),t("div",null,o)}const h=e(i,[["render",c],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/01java/40jvm/pcregister/","title":"程序计数器","lang":"zh-CN","frontmatter":{"title":"程序计数器","date":"2022-05-21T16:32:26.000Z","order":10,"permalink":"/01java/40jvm/pcregister/","icon":"wenzhang","description":"PC Register 介绍 JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。 作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。 它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。 在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/pcregister/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"程序计数器"}],["meta",{"property":"og:description","content":"PC Register 介绍 JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。 作用：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。 它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。 在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序计数器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"PC Register 介绍","slug":"pc-register-介绍","link":"#pc-register-介绍","children":[]},{"level":2,"title":"两个常见问题","slug":"两个常见问题","link":"#两个常见问题","children":[{"level":3,"title":"1. 使用PC寄存器存储字节码指令地址的作用？","slug":"_1-使用pc寄存器存储字节码指令地址的作用","link":"#_1-使用pc寄存器存储字节码指令地址的作用","children":[]},{"level":3,"title":"2. PC寄存器为什么被设定为线程私有？","slug":"_2-pc寄存器为什么被设定为线程私有","link":"#_2-pc寄存器为什么被设定为线程私有","children":[]}]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"01java/40jvm/10.程序计数器.md","localizedDate":"2022年5月22日","autoDesc":true}');export{h as comp,m as data};
