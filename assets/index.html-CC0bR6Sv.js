import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,e as n}from"./app-BUJ2iQsf.js";const t={},l=n(`<h2 id="💬-描述" tabindex="-1"><a class="header-anchor" href="#💬-描述"><span>💬 描述</span></a></h2><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。 <strong>示例1:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span>输入：&quot;aabcccccaaa&quot;</span></span>
<span class="line"><span>输出：&quot;a2b1c5a3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span>输入：&quot;abbccd&quot;</span></span>
<span class="line"><span>输出：&quot;abbccd&quot;</span></span>
<span class="line"><span>解释：&quot;abbccd&quot;压缩后为&quot;a1b2c2d1&quot;，比原字符串长度更长。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong> 1.字符串长度在[0, 50000]范围内。</p><h2 id="📋-代码" tabindex="-1"><a class="header-anchor" href="#📋-代码"><span>📋 代码</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">compressString</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;">S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 特殊情况处理。null好理解。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // &lt;=2是因为，压缩后的长度至少也是2。因此如果小于2就不必压缩</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">S </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">		// 用sb接收并返回结果，节省时间和空间。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		StringBuilder</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 转成数组，访问下标能快一点。变量n代替长度同理。</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		char</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 循环结束条件为，j 走到最后一个元素处。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		while</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 如果 j 和 i 处的字符相同，则 j右移，j最多可以移到数组的最后一个元素处。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 每次重新进入外层的while时，i 和 j 总是想等的。下方的while也总是成立的。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">			while</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">				j</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 走到这里说明 j 处的字符和 i 处的字符不同，或者 j 走到了数组最后一个元素处。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 先拼 i 处的字符，再拼(j-i)这个数字即可完成 i 处这个字符的压缩。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 令 i = j，即开始考察 j 处的元素。之后进入下一个循环。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">			sb</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">arr</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">			i </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 判断长度。谁短返回谁。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><p>参考代码注释。利用双指针来完成此题。 感觉难点在于循环条件结束的判定上。一开始写的代码遇到了 下标越界、漏掉最后一个元素的情况。debug几次，再完善下代码就ok。</p><br><p><a href="https://leetcode-cn.com/problems/compress-string-lcci/" class="LinkCard" target="_blank">LeetCode-面试题 01.06</a></p><br>`,14),e=[l];function h(k,p){return a(),i("div",null,e)}const E=s(t,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/40algo/20string/lc-m01.06/","title":"01.06-字符串压缩","lang":"zh-CN","frontmatter":{"title":"01.06-字符串压缩","date":"2020-03-16T23:18:56.000Z","permalink":"/40algo/20string/lc-m01.06/","order":1,"icon":"leetcode","tag":["字符串"],"description":"💬 描述 字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。 示例1: 示例2: 提示： 1.字符串长度在[0, 50000]范围内。 📋 代码 💡 思路 参考代码...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/20string/lc-m01.06/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"01.06-字符串压缩"}],["meta",{"property":"og:description","content":"💬 描述 字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。 示例1: 示例2: 提示： 1.字符串长度在[0, 50000]范围内。 📋 代码 💡 思路 参考代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:published_time","content":"2020-03-16T23:18:56.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01.06-字符串压缩\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-03-16T23:18:56.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"💬 描述","slug":"💬-描述","link":"#💬-描述","children":[]},{"level":2,"title":"📋 代码","slug":"📋-代码","link":"#📋-代码","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":2},{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"40algo/20string/01.leetcodem0106.md","localizedDate":"2020年3月17日","autoDesc":true}');export{E as comp,g as data};
