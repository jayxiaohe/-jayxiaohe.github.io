import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,w as h,e as t,a as s,r as k,o as e}from"./app-BUJ2iQsf.js";const p={},d=t(`<h2 id="💬-描述" tabindex="-1"><a class="header-anchor" href="#💬-描述"><span>💬 描述</span></a></h2><p>给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。 返回使 A 中的每个值都是唯一的最少操作次数。</p><p><strong>示例 1:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span>输入：[1,2,2]</span></span>
<span class="line"><span>输出：1</span></span>
<span class="line"><span>解释：经过一次 move 操作，数组将变为 [1, 2, 3]。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span>输入：[3,2,1,2,1,7]</span></span>
<span class="line"><span>输出：6</span></span>
<span class="line"><span>解释：经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。</span></span>
<span class="line"><span>可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ol><li>0 &lt;= A.length &lt;= 40000</li><li>0 &lt;= A[i] &lt; 40000</li></ol><br><h2 id="📋-代码1-先排序后遍历" tabindex="-1"><a class="header-anchor" href="#📋-代码1-先排序后遍历"><span>📋 代码1- 先排序后遍历</span></a></h2><p>首先将数组进行排序，然后从左到右遍历数组。如果当前元素大于上一个元素，保持不变；如果当前元素小于等于上一个元素，就需要增加当前元素，直到大于上一个元素。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> minIncrementForUnique</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">		Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> times</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">length</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">				// 如果当前的数&lt;=上一个数，则需要增加到上一个数+1。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">				// 如，当前是3，上一个数是5，则需要增加到6。那么增加的次数就是5+1-3。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">				times </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">				A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> times</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>复杂度： O(nlogn) 。因为排序。</strong><br></p><h2 id="📋-代码2-先计数后遍历" tabindex="-1"><a class="header-anchor" href="#📋-代码2-先计数后遍历"><span>📋 代码2- 先计数后遍历</span></a></h2><p>通过记录每个数字出现的次数来计算结果。例如输入 [3, 2, 1, 2, 1, 7]，计数之后有两个 1 和两个 2。我们先看最小的数，两个 1 重复了，需要有一个增加到 2，这样 2 的数量变成了三个。在三个 2 中，又有两个需要增加到 3，然后又出现了两个 3…… 以此类推，可以计算出需要增加的次数。 需要注意的是，虽然整数的范围是 0 到 40000，但是由于整数还会因为增加而变大，超出 40000 的范围。例如极端的情况：所有数都是 39999。所以需要对整数中最大的数单独处理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> minIncrementForUnique</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">40000</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> max</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 计数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            max </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> Math</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;"> // 计算数组中的最大值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 只循环处理&lt;max的情况。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">                // 有 count[j] - 1 个数需要增加</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">                res </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">                // 增加后，j+1这个数出现的次数，就多了（count[j] - 1）个。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">                // 因此要给 count[j+1] 的值加上这些数量。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">                count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> +=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // count[max] 单独计算，因为对这个数进行增加后，可能会超出count[]数组的边界。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">        // 这里计算次数可以通过等差数列求和，完成后，可以不再进行 count[j+1] += count[j] - 1。就不会发生越界。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">max</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 有 d 个数需要增加</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 分别增加为 max + 1, max + 2, ... max + d</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#6A737D;">            // 使用等差数列公式求和</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            res </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><p>已经写在上方代码注释中。 其中，方法2可以看作是计数排序。它的时间复杂度可以认为是O(n+k)：遍历A，复杂度为n；遍历count，复杂度为k。 在leetcode的提交结果也能看出来，方法2的时间明显少于方法1的时间。 <img src="https://iyes.life/post-images/1584890657602.PNG" alt="" loading="lazy"></p><br>`,21),r=s("a",{href:"https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique/",class:"LinkCard",target:"_blank"},"LeetCode-945",-1),E=s("br",null,null,-1);function g(y,c){const i=k("center");return e(),n("div",null,[d,l(i,null,{default:h(()=>[r]),_:1}),E])}const m=a(p,[["render",g],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/40algo/10array/lc945/","title":"945-使数组唯一的最小增量","lang":"zh-CN","frontmatter":{"title":"945-使数组唯一的最小增量","date":"2020-03-22T22:30:35.000Z","permalink":"/40algo/10array/lc945/","order":14,"icon":"leetcode","description":"💬 描述 给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。 返回使 A 中的每个值都是唯一的最少操作次数。 示例 1: 示例 2: 提示： 0 <= A.length <= 40000 0 <= A[i] < 40000 📋 代码1- 先排序后遍历 首先将数组进行排序，然后从左到右遍历数组。如果当前元素大于上一个元素，...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/10array/lc945/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"945-使数组唯一的最小增量"}],["meta",{"property":"og:description","content":"💬 描述 给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。 返回使 A 中的每个值都是唯一的最少操作次数。 示例 1: 示例 2: 提示： 0 <= A.length <= 40000 0 <= A[i] < 40000 📋 代码1- 先排序后遍历 首先将数组进行排序，然后从左到右遍历数组。如果当前元素大于上一个元素，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://iyes.life/post-images/1584890657602.PNG"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-18T06:12:12.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2020-03-22T22:30:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-18T06:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"945-使数组唯一的最小增量\\",\\"image\\":[\\"https://iyes.life/post-images/1584890657602.PNG\\"],\\"datePublished\\":\\"2020-03-22T22:30:35.000Z\\",\\"dateModified\\":\\"2024-08-18T06:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"💬 描述","slug":"💬-描述","link":"#💬-描述","children":[]},{"level":2,"title":"📋 代码1- 先排序后遍历","slug":"📋-代码1-先排序后遍历","link":"#📋-代码1-先排序后遍历","children":[]},{"level":2,"title":"📋 代码2- 先计数后遍历","slug":"📋-代码2-先计数后遍历","link":"#📋-代码2-先计数后遍历","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1723961532000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1},{"name":"jayxiaohe","email":"hept//github0712","commits":1}]},"readingTime":{"minutes":2.99,"words":898},"filePathRelative":"40algo/10array/14.leetcode945.md","localizedDate":"2020年3月23日","autoDesc":true}');export{m as comp,v as data};
