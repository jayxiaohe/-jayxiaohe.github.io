import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as l,e as i}from"./app-BUJ2iQsf.js";const n={},r=i(`<h2 id="虚拟机栈概述" tabindex="-1"><a class="header-anchor" href="#虚拟机栈概述"><span>虚拟机栈概述</span></a></h2><h3 id="出现背景" tabindex="-1"><a class="header-anchor" href="#出现背景"><span>出现背景</span></a></h3><p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要史多的指令。 栈是运行时的单位，而堆是存储的单位。</p><h3 id="虚拟机栈基本内容" tabindex="-1"><a class="header-anchor" href="#虚拟机栈基本内容"><span>虚拟机栈基本内容</span></a></h3><h4 id="java虚拟机栈是什么" tabindex="-1"><a class="header-anchor" href="#java虚拟机栈是什么"><span>Java虚拟机栈是什么？</span></a></h4><p>Java虚拟机栈（Java Virtual Machine Stack)，早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧 (Stack Frame)，对应着一次次的Java方法调用。是线程私有的。生命周期和线程一致。作用是主管Java程序的运行。它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回。</p><h4 id="栈的特点" tabindex="-1"><a class="header-anchor" href="#栈的特点"><span>栈的特点</span></a></h4><ul><li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。</li><li>JVM直接对Java栈的操作只有两个： <ul><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ul></li><li>对于栈来说不存在垃圾回收问题</li></ul><h4 id="栈中可能出现的异常" tabindex="-1"><a class="header-anchor" href="#栈中可能出现的异常"><span>栈中可能出现的异常</span></a></h4><p>Java虚拟机规范允许Java栈的大小是动态的或者是固定不变的。</p><ul><li>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个 <code>StackOverflowError</code> 异常。</li><li>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 <code>OutOfMemoryError</code> 异常。</li></ul><h4 id="设置栈内存大小" tabindex="-1"><a class="header-anchor" href="#设置栈内存大小"><span>设置栈内存大小</span></a></h4><p>使用参数 <code>-Xss</code> 设置线程的最大栈空间。栈的大小直接决定了函数调用的最大可达深度。 默认单位是 <code>bytes</code>。可以在数字后面加具体单位。默认大小如下：</p><ul><li><p>Linux/x64 (64-bit): 1024 KB</p></li><li><p>macOS (64-bit): 1024 KB</p></li><li><p>Oracle Solaris/x64 (64-bit): 1024 KB</p></li><li><p>Windows: The default value depends on virtual memory</p></li></ul><p>设置示例：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">-Xss1m</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">-Xss1024k</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">-Xss1048576</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈的存储单位" tabindex="-1"><a class="header-anchor" href="#栈的存储单位"><span>栈的存储单位</span></a></h2><h3 id="栈中存储什么" tabindex="-1"><a class="header-anchor" href="#栈中存储什么"><span>栈中存储什么？</span></a></h3><p>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。 在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。 栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</p><h3 id="栈运行原理" tabindex="-1"><a class="header-anchor" href="#栈运行原理"><span>栈运行原理</span></a></h3><ul><li><p>JVM直接对Java栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”/“后进先出”原则。</p></li><li><p>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧(current Frame)，与当前栈帧相对应的方法就是当前方法(current Method)，定义这个方法的类就是当前类(current Class)。</p></li><li><p>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</p></li><li><p>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</p></li><li><p>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧</p></li><li><p>如果当前方法去调了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</p></li><li><p>Java方法有两种返回函数的方式，一种是正常的函数返回，使用<code>return</code>指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</p></li></ul><h3 id="栈帧的内部结构" tabindex="-1"><a class="header-anchor" href="#栈帧的内部结构"><span>栈帧的内部结构</span></a></h3><ul><li>局部变量表(Local variables)</li><li>操作数栈(operand stack)（或表达式栈）</li><li>动态链接(Dynamic Linking)（或指向运行时常量池的方法引用）</li><li>方法返回地址(Return Address）（或方法正常退出或者异常退出的定义）</li><li>一些附加信息</li></ul><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/20220522000358.webp" width="60%"><h2 id="局部变量表-local-variables" tabindex="-1"><a class="header-anchor" href="#局部变量表-local-variables"><span>局部变量表（Local Variables）</span></a></h2><ul><li>局部变量表也被称之为局部变量数组或本地变量表</li><li>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括各类基本数据类型、对象引用(reference)，以及<code>returnAddress</code>类型。</li><li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题。</li><li>局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的<code>Code</code>属性的<code>maximum local variables</code>数据项中。在方法运行期间是不会改变局部变量表的大小的。</li><li>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li><li>局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li><li>在栈帧中，与性能调优关系最密切的部分就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</li><li>局部变量表中的变量也是<mark>重要的垃圾回收根节点</mark>，只要被局部变量表中直接或间接引用的对象都不会被回收。</li></ul><h2 id="操作数栈-operand-stack" tabindex="-1"><a class="header-anchor" href="#操作数栈-operand-stack"><span>操作数栈（Operand Stack）</span></a></h2><ul><li>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。是用数组实现的。但不能通过索引访问。</li><li>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。</li><li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的<code>code</code>属性中，为<code>max_stack</code>的值。</li><li>栈中的任何一个元素都是可以任意的Java数据类型。 <ul><li>32bit 的类型占用一个栈单位深度</li><li>64bit 的类型占用两个栈单位深度</li></ul></li><li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈(push)和出栈(pop)操作来完成一次数据访问。</li><li>每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出(Last-In-First-Out)的操作数栈，也可以称之为表达式栈（Expression Stack）。</li><li>操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈(push)/出栈(pop)</li><li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。比如，指向复制、交换、求和等操作。</li><li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新pc寄存器中下一条需要执行的字节码指令。</li><li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</li><li>另外，我们说Java虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。</li></ul><h2 id="动态链接-或指向运行时常量池的方法引用" tabindex="-1"><a class="header-anchor" href="#动态链接-或指向运行时常量池的方法引用"><span>动态链接（或指向运行时常量池的方法引用）</span></a></h2><ul><li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接(Dynamic Linking)。比如<code>invokedynamic</code>指令</li><li>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用(symbolic Reference)保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</li></ul><h2 id="方法的调用" tabindex="-1"><a class="header-anchor" href="#方法的调用"><span>方法的调用</span></a></h2><h3 id="静态链接-动态链接" tabindex="-1"><a class="header-anchor" href="#静态链接-动态链接"><span>静态链接/动态链接</span></a></h3><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关。</p><ul><li>静态链接：</li></ul><p>当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p><ul><li>动态链接：</li></ul><p>如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</p><h3 id="早期绑定-晚期绑定" tabindex="-1"><a class="header-anchor" href="#早期绑定-晚期绑定"><span>早期绑定/晚期绑定</span></a></h3><p>对应的方法的绑定机制为：早期绑定(Early Binding)和晚期绑定(Late Binding)。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</strong></p><ul><li>早期绑定</li></ul><p>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p><ul><li>晚期绑定</li></ul><p>如果<strong>被调用的方法在编译期无法被确定下来</strong>，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</p><h3 id="虚方法-非虚方法" tabindex="-1"><a class="header-anchor" href="#虚方法-非虚方法"><span>虚方法/非虚方法</span></a></h3><p>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。</p><p>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法。</p><p>其他方法称为虚方法。</p><p>参考: <a href="https://www.jianshu.com/p/d74e92f93752" target="_blank" rel="noopener noreferrer">invokedynamic</a></p><h3 id="方法重写的本质" tabindex="-1"><a class="header-anchor" href="#方法重写的本质"><span>方法重写的本质</span></a></h3><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作 C。</li><li>如果在类型 C 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回 <code>java.lang.IllegalAccessError</code> 异常。</li><li>否则，按照继承关系从下往上依次对 C 的各个父类进行第2步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出<code>java.lang.AbstractMethodEtror</code>异常。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p><code>IllegalAccessError</code> 介绍： 程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</p></div><h3 id="虚方法表" tabindex="-1"><a class="header-anchor" href="#虚方法表"><span>虚方法表</span></a></h3><ul><li>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，JVM 采用在类的方法区建立一个虚方法表(virtual method table)（非虚方法不会出现在表中）来实现。使用索引表来代替查找。</li><li>每个类中都有一个虚方法表，表中存放着各个方法的实际入囗。</li><li>虚方法表什么时候被创建？虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</li></ul><h2 id="方法返回地址" tabindex="-1"><a class="header-anchor" href="#方法返回地址"><span>方法返回地址</span></a></h2><ul><li>存放调用该方法的pc寄存器的值。</li><li>一个方法的结束，有两种方式： <ul><li>正常执行完成</li><li>出现未处理的异常，非正常退出</li></ul></li><li>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的 PC 计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</li></ul><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置 PC 寄存器值等，让调用者方法继续执行下去。</p><blockquote><p><strong>正常完成出口和异常完成出口的区别</strong>：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</p></blockquote><p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p><ol><li>执行引擎遇到任意一个方法返回的字节码指令(return)，会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong>。 <ul><li>一个方法在正常调用完成之后需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定。</li><li>在字节码指令中，返回指令包含 <code>ireturn</code>（当返回值是boolean、byte、char、short 和 int类型时使用）、<code>lreturn</code>、<code>freturn</code>、<code>dreturn</code>以及 <code>areturn</code>，另外还有一个<code>return</code>指令供声明为 void 的方法、实例初始化方法、类和接囗的初始化方法使用。</li></ul></li><li>在方法执行的过程中遇到了异常(Exception)，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<strong>异常完成出口</strong>。方法执行过程抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</li></ol><h2 id="一些附加信息" tabindex="-1"><a class="header-anchor" href="#一些附加信息"><span>一些附加信息</span></a></h2><p>栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息。</p><h2 id="栈的相关面试题" tabindex="-1"><a class="header-anchor" href="#栈的相关面试题"><span>栈的相关面试题</span></a></h2><h3 id="_1-举例栈溢出的情况-stackoverflowerror" tabindex="-1"><a class="header-anchor" href="#_1-举例栈溢出的情况-stackoverflowerror"><span>1. 举例栈溢出的情况？（StackOverflowError）</span></a></h3><p>通过 <code>-Xss</code> 设置。参考之前的内容。</p><h3 id="_2-调整栈大小-就能保证不出现溢出吗" tabindex="-1"><a class="header-anchor" href="#_2-调整栈大小-就能保证不出现溢出吗"><span>2. 调整栈大小，就能保证不出现溢出吗？</span></a></h3><p>不能。如递归不写退出条件时，还是会出现溢出。</p><h3 id="_3-分配的栈内存越大越好吗" tabindex="-1"><a class="header-anchor" href="#_3-分配的栈内存越大越好吗"><span>3. 分配的栈内存越大越好吗？</span></a></h3><p>不是，内存总量确定的情况下，栈内存分配过大，会影响其他内存结构的正常使用。</p><h3 id="_4-垃圾回收是否会涉及到虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_4-垃圾回收是否会涉及到虚拟机栈"><span>4. 垃圾回收是否会涉及到虚拟机栈？</span></a></h3><p>不会。</p><h3 id="_5-方法中定义-使用的局部变量是否线程安全" tabindex="-1"><a class="header-anchor" href="#_5-方法中定义-使用的局部变量是否线程安全"><span>5. 方法中定义/使用的局部变量是否线程安全？</span></a></h3><p>具体问题具体分析。</p><ul><li>在方法内定义 <code>StringBuilder sb = new StringBuilder();</code> 并在后续对其进行 append操作，是线程安全的。</li><li>如果对方法入参中的 StringBuilder 进行 append，不安全。因为这个入参有可能被多个线程调用。</li></ul>`,73),t=[r];function s(c,d){return l(),a("div",null,t)}const p=e(n,[["render",s],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/01java/40jvm/stack/","title":"虚拟机栈","lang":"zh-CN","frontmatter":{"title":"虚拟机栈","date":"2022-05-21T16:32:26.000Z","order":15,"permalink":"/01java/40jvm/stack/","icon":"wenzhang","description":"虚拟机栈概述 出现背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要史多的指令。 栈是运行时的单位，而堆是存储的单位。 虚拟机栈基本内容 Java虚拟机栈是什么？ Java虚拟机栈（Java Virtual Mach...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/stack/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"虚拟机栈"}],["meta",{"property":"og:description","content":"虚拟机栈概述 出现背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要史多的指令。 栈是运行时的单位，而堆是存储的单位。 虚拟机栈基本内容 Java虚拟机栈是什么？ Java虚拟机栈（Java Virtual Mach..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚拟机栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"虚拟机栈概述","slug":"虚拟机栈概述","link":"#虚拟机栈概述","children":[{"level":3,"title":"出现背景","slug":"出现背景","link":"#出现背景","children":[]},{"level":3,"title":"虚拟机栈基本内容","slug":"虚拟机栈基本内容","link":"#虚拟机栈基本内容","children":[]}]},{"level":2,"title":"栈的存储单位","slug":"栈的存储单位","link":"#栈的存储单位","children":[{"level":3,"title":"栈中存储什么？","slug":"栈中存储什么","link":"#栈中存储什么","children":[]},{"level":3,"title":"栈运行原理","slug":"栈运行原理","link":"#栈运行原理","children":[]},{"level":3,"title":"栈帧的内部结构","slug":"栈帧的内部结构","link":"#栈帧的内部结构","children":[]}]},{"level":2,"title":"局部变量表（Local Variables）","slug":"局部变量表-local-variables","link":"#局部变量表-local-variables","children":[]},{"level":2,"title":"操作数栈（Operand Stack）","slug":"操作数栈-operand-stack","link":"#操作数栈-operand-stack","children":[]},{"level":2,"title":"动态链接（或指向运行时常量池的方法引用）","slug":"动态链接-或指向运行时常量池的方法引用","link":"#动态链接-或指向运行时常量池的方法引用","children":[]},{"level":2,"title":"方法的调用","slug":"方法的调用","link":"#方法的调用","children":[{"level":3,"title":"静态链接/动态链接","slug":"静态链接-动态链接","link":"#静态链接-动态链接","children":[]},{"level":3,"title":"早期绑定/晚期绑定","slug":"早期绑定-晚期绑定","link":"#早期绑定-晚期绑定","children":[]},{"level":3,"title":"虚方法/非虚方法","slug":"虚方法-非虚方法","link":"#虚方法-非虚方法","children":[]},{"level":3,"title":"方法重写的本质","slug":"方法重写的本质","link":"#方法重写的本质","children":[]},{"level":3,"title":"虚方法表","slug":"虚方法表","link":"#虚方法表","children":[]}]},{"level":2,"title":"方法返回地址","slug":"方法返回地址","link":"#方法返回地址","children":[]},{"level":2,"title":"一些附加信息","slug":"一些附加信息","link":"#一些附加信息","children":[]},{"level":2,"title":"栈的相关面试题","slug":"栈的相关面试题","link":"#栈的相关面试题","children":[{"level":3,"title":"1. 举例栈溢出的情况？（StackOverflowError）","slug":"_1-举例栈溢出的情况-stackoverflowerror","link":"#_1-举例栈溢出的情况-stackoverflowerror","children":[]},{"level":3,"title":"2. 调整栈大小，就能保证不出现溢出吗？","slug":"_2-调整栈大小-就能保证不出现溢出吗","link":"#_2-调整栈大小-就能保证不出现溢出吗","children":[]},{"level":3,"title":"3. 分配的栈内存越大越好吗？","slug":"_3-分配的栈内存越大越好吗","link":"#_3-分配的栈内存越大越好吗","children":[]},{"level":3,"title":"4. 垃圾回收是否会涉及到虚拟机栈？","slug":"_4-垃圾回收是否会涉及到虚拟机栈","link":"#_4-垃圾回收是否会涉及到虚拟机栈","children":[]},{"level":3,"title":"5. 方法中定义/使用的局部变量是否线程安全？","slug":"_5-方法中定义-使用的局部变量是否线程安全","link":"#_5-方法中定义-使用的局部变量是否线程安全","children":[]}]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":14.15,"words":4246},"filePathRelative":"01java/40jvm/15.虚拟机栈.md","localizedDate":"2022年5月22日","autoDesc":true}');export{p as comp,u as data};
