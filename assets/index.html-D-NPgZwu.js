import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as i,a as l,d as c,w as k,e as s,r as d,o as b,b as o}from"./app-BUJ2iQsf.js";const m={},n=l("p",null,"以下内容中题目为转载，相关代码实现为本人实现or整理自网络。 部分之前总结过的题可以点击进入对应文章链接，没有总结的会在后续补充",-1),h=s('<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 实现一个支持动态扩容的数组</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 实现一个大小固定的有序数组，支持动态增删改操作</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 实现两个有序数组合并为一个有序数组</label></li></ul><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h2>',3),r={class:"task-list-container"},p=l("li",{class:"task-list-item"},[l("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"}),l("label",{class:"task-list-item-label",for:"task-item-3"}," 实现单链表、循环链表、双向链表，支持增删操作")],-1),x={class:"task-list-item"},u=l("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",checked:"checked",disabled:"disabled"},null,-1),f={class:"task-list-item-label",for:"task-item-4"},y=s('<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 实现两个有序的链表合并为一个有序链表</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 实现求链表的中间结点</label></li>',2),_=s('<h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 用数组实现一个顺序栈</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 用链表实现一个链式栈</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 编程模拟实现一个浏览器的前进、后退功能</label></li></ul><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> 用数组实现一个顺序队列</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 用链表实现一个链式队列</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> 实现一个循环队列</label></li></ul><h2 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> 编程实现斐波那契数列求值f(n)=f(n-1)+f(n-2)</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> 编程实现求阶乘n!</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> 编程实现一组数据集合的全排列</label></li></ul><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> 实现归并排序、快速排序、插入排序、冒泡排序、选择排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> 编程实现O(n)时间复杂度内找到一组数据的第K大元素</label></li></ul><h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> 实现一个有序数组的二分查找算法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> 实现模糊二分查找算法（比如大于等于给定值的第一个元素）</label></li></ul><h2 id="散列表" tabindex="-1"><a class="header-anchor" href="#散列表"><span>散列表</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> 实现一个基于链表法解决冲突问题的散列表</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-21" disabled="disabled"><label class="task-list-item-label" for="task-item-21"> 实现一个LRU缓存淘汰算法</label></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-22" disabled="disabled"><label class="task-list-item-label" for="task-item-22"> 实现一个字符集，只包含a～z这26个英文字母的Trie树</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-23" disabled="disabled"><label class="task-list-item-label" for="task-item-23"> 实现朴素的字符串匹配算法</label></li></ul><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-24" disabled="disabled"><label class="task-list-item-label" for="task-item-24"> 实现一个二叉查找树，并且支持插入、删除、查找操作</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-25" disabled="disabled"><label class="task-list-item-label" for="task-item-25"> 实现查找二叉查找树中某个节点的后继、前驱节点</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-26" disabled="disabled"><label class="task-list-item-label" for="task-item-26"> 实现二叉树前、中、后序以及按层遍历</label></li></ul><h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-27" disabled="disabled"><label class="task-list-item-label" for="task-item-27"> 实现一个小顶堆、大顶堆、优先级队列</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-28" disabled="disabled"><label class="task-list-item-label" for="task-item-28"> 实现堆排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-29" disabled="disabled"><label class="task-list-item-label" for="task-item-29"> 利用优先级队列合并K个有序数组</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-30" disabled="disabled"><label class="task-list-item-label" for="task-item-30"> 求一组动态数据集合的最大Top K</label></li></ul><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-31" disabled="disabled"><label class="task-list-item-label" for="task-item-31"> 实现有向图、无向图、有权图、无权图的邻接矩阵和邻接表表示方法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-32" disabled="disabled"><label class="task-list-item-label" for="task-item-32"> 实现图的深度优先搜索、广度优先搜索</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-33" disabled="disabled"><label class="task-list-item-label" for="task-item-33"> 实现Dijkstra算法、A*算法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-34" disabled="disabled"><label class="task-list-item-label" for="task-item-34"> 实现拓扑排序的Kahn算法、DFS算法</label></li></ul><h2 id="回溯" tabindex="-1"><a class="header-anchor" href="#回溯"><span>回溯</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-35" disabled="disabled"><label class="task-list-item-label" for="task-item-35"> 利用回溯算法求解八皇后问题</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-36" disabled="disabled"><label class="task-list-item-label" for="task-item-36"> 利用回溯算法求解0-1背包问题</label></li></ul><h2 id="分治" tabindex="-1"><a class="header-anchor" href="#分治"><span>分治</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-37" disabled="disabled"><label class="task-list-item-label" for="task-item-37"> 利用分治算法求一组数据的逆序对个数</label></li></ul><h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-38" disabled="disabled"><label class="task-list-item-label" for="task-item-38"> 0-1背包问题</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-39" disabled="disabled"><label class="task-list-item-label" for="task-item-39"> 最小路径和</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-40" disabled="disabled"><label class="task-list-item-label" for="task-item-40"> 编程实现莱文斯坦最短编辑距离</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-41" disabled="disabled"><label class="task-list-item-label" for="task-item-41"> 编程实现查找两个字符串的最长公共子序列</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-42" disabled="disabled"><label class="task-list-item-label" for="task-item-42"> 编程实现一个数据序列的最长递增子序列</label></li></ul>',26);function g(v,T){const t=d("RouteLink");return b(),a("div",null,[n,i(" more "),h,l("ul",r,[p,l("li",x,[u,l("label",f,[c(t,{to:"/40algo/30listnode/lc206/"},{default:k(()=>[o("实现单链表反转")]),_:1})])]),y]),_])}const C=e(m,[["render",g],["__file","index.html.vue"]]),V=JSON.parse('{"path":"/40algo/50/","title":"数据结构和算法必知必会的50个代码实现","lang":"zh-CN","frontmatter":{"title":"数据结构和算法必知必会的50个代码实现","shortTitle":"必知必会","date":"2019-12-26T20:24:05.000Z","permalink":"/40algo/50/","order":1,"icon":"test","description":"以下内容中题目为转载，相关代码实现为本人实现or整理自网络。 部分之前总结过的题可以点击进入对应文章链接，没有总结的会在后续补充 数组 实现一个支持动态扩容的数组 实现一个大小固定的有序数组，支持动态增删改操作 实现两个有序数组合并为一个有序数组 链表 实现单链表、循环链表、双向链表，支持增删操作 实现两个有序的链表合并为一个有序链表 实现求链表的中间...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/40algo/50/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"数据结构和算法必知必会的50个代码实现"}],["meta",{"property":"og:description","content":"以下内容中题目为转载，相关代码实现为本人实现or整理自网络。 部分之前总结过的题可以点击进入对应文章链接，没有总结的会在后续补充 数组 实现一个支持动态扩容的数组 实现一个大小固定的有序数组，支持动态增删改操作 实现两个有序数组合并为一个有序数组 链表 实现单链表、循环链表、双向链表，支持增删操作 实现两个有序的链表合并为一个有序链表 实现求链表的中间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2019-12-26T20:24:05.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构和算法必知必会的50个代码实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-26T20:24:05.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":2,"title":"递归","slug":"递归","link":"#递归","children":[]},{"level":2,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]},{"level":2,"title":"散列表","slug":"散列表","link":"#散列表","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]},{"level":2,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":2,"title":"图","slug":"图","link":"#图","children":[]},{"level":2,"title":"回溯","slug":"回溯","link":"#回溯","children":[]},{"level":2,"title":"分治","slug":"分治","link":"#分治","children":[]},{"level":2,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":2.58,"words":775},"filePathRelative":"40algo/01.50code.md","localizedDate":"2019年12月27日","autoDesc":true}');export{C as comp,V as data};
