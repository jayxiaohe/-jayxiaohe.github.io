import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as a,e as s}from"./app-BUJ2iQsf.js";const e={},n=s(`<h2 id="堆的核心概念" tabindex="-1"><a class="header-anchor" href="#堆的核心概念"><span>堆的核心概念</span></a></h2><h3 id="堆的核心概述" tabindex="-1"><a class="header-anchor" href="#堆的核心概述"><span>堆的核心概述</span></a></h3><blockquote><p>堆是线程共享的，和方法区（Runtime）一样。它们是进程私有的，线程共享的。</p></blockquote><ul><li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li><li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM 管理的最大一块内存空间。堆内存的大小是可以调节的。</li><li>《Java虚拟机规范》规定，堆可以处于物理上不连续 的内存空间中，但在逻辑上它应该被视为连续的 。</li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区(Thread Local AIIocation Buffer, <code>TLAB</code>)。</li><li>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（&quot;几乎&quot;所有的对象实例都在这里(<code>堆</code>)分配内存。一一从实际使用角度看的）。</li><li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li><li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</li><li>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</li></ul><h3 id="内存细分" tabindex="-1"><a class="header-anchor" href="#内存细分"><span>内存细分</span></a></h3><p>现代垃圾收集器大部分都基于<mark>分代收集理论</mark>设计，堆空间细分为：</p><ul><li>Java7 及之前堆内存锣辑上分为三部分：新生代+老年代+永久区 <ul><li>Young Generation Space 新生代 Young/New。又被划分为Eden区和Survivor区。</li><li>Tenure generation space 老年代 Old/Tenure</li><li>Permanent Space 永久区 Perm</li></ul></li><li>Java8 及之后堆内存逻辑上分为三部分：新生代+老年代+元空间 <ul><li>Young Generation Space 新生代 Young/New。又被划分为Eden区和Survivor区。</li><li>Tenure generation space 老年代 Old/Tenure</li><li>MetaSpace 元空间 Meta</li></ul></li></ul><blockquote><p>JDK 1.7 堆空间内部结构</p></blockquote><figure><img src="https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/202205220052286.jpeg" alt="1596950825906-aafafd72-7bac-456a-8c02-14dc4f801513" tabindex="0" loading="lazy"><figcaption>1596950825906-aafafd72-7bac-456a-8c02-14dc4f801513</figcaption></figure><p>其中，永久代可以不考虑。把它看作方法区的具体实现。</p><h2 id="设置堆内存大小与oom" tabindex="-1"><a class="header-anchor" href="#设置堆内存大小与oom"><span>设置堆内存大小与OOM</span></a></h2><h3 id="设置" tabindex="-1"><a class="header-anchor" href="#设置"><span>设置</span></a></h3><ul><li>Java 堆区用于存储Java对象实例，那么堆的大小在启动时就己经设定好了，可以通过选项<code>-Xmx</code> 和 <code>-Xms</code> 来进行设置。 <ul><li><code>-Xms</code> 用于表示堆区的起始内存，等价于 <code>-XX:InitialHeapSize</code></li><li><code>-Xmx</code> 则用于表示堆区的最大内存，等价于 <code>-XX:MaxHeapSize</code></li></ul></li><li>一旦堆区中的内存大小超过 <code>-Xmx</code> 所指定的最大内存时，将会抛出 <code>OutOfMemoryError</code> 异常。</li><li>通常会将<code>-Xmx</code> 和 <code>-Xms</code> 两个参数配置相同的值。其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</li><li><code>-Xmx</code> 和 <code>-Xms</code> 两个参数配置的值包含堆空间中的新生代 + 老年代。<strong>不包含</strong> 永久代/元空间。</li></ul><h3 id="默认" tabindex="-1"><a class="header-anchor" href="#默认"><span>默认</span></a></h3><ul><li>默认情况下，初始内存大小：物理电脑内存大小／64；最大内存大小：物理电脑内存大小 / 4。</li></ul><h3 id="如何查看设置的参数" tabindex="-1"><a class="header-anchor" href="#如何查看设置的参数"><span>如何查看设置的参数</span></a></h3><ul><li>方式1：jps 获取进程id；jstat -gc 进程id <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220055014.png" alt="" loading="lazy"></li><li>方式2：-XX:+PrintGCDetails <img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220056992.png" alt="" loading="lazy"> 如上两图，查看的方式不同，但结果是一致的。</li></ul><h2 id="年轻代与老年代" tabindex="-1"><a class="header-anchor" href="#年轻代与老年代"><span>年轻代与老年代</span></a></h2><ul><li>存储在堆中的Java对象可以被划分为两类。 <ul><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期非常长，在某些极端的情况下还能够与JVM的生命周期保持一致。</li></ul></li><li>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代(OldGen)</li><li>其中年轻代又可以划分为 <code>Eden</code> 空间、<code>survivor0</code> 空间和 <code>survivor1</code>（有时也叫做<code>from</code>区、<code>to</code>区）</li><li>配置新生代与老年代在堆结构的占比(一般不会修改) <ul><li>默认<code>-XX:NewRatio=2</code>，表示新生代占1，老年代占2，新生代占整个堆的1/3</li><li>可以改为<code>-XX:NewRatio=4</code>，表示新生代占1，老年代占4，新生代占整个堆的1/5</li></ul></li><li>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1。可以通过选项 <code>-XX:SurvivorRatio</code> 调整这个空间比例。比如<code>-XX：SurvivorRatio=8</code></li><li>几乎所有的Java对象都是在Eden区被new出来的。</li><li>绝大部分的Java对象的销毁都在新生代进行了。</li></ul><blockquote><p>IBM公司的专门研究表明，新生代中 80% 的对象都是“朝生夕死”的。</p></blockquote><ul><li>可以使用选项<code>-Xmn</code>设置新生代最大内存大小。这个参数一般使用默认值就可以了。</li><li>虽然新生代中 Eden 和 S0、S1 的比例默认是8:1:1，但实际可能并不是这样。存在自适应的内存分配策略。但如果显示地使用 <code>—XX：SurvivorRatio=8</code> 来指定比例，则这个比例必然成立。</li></ul><h2 id="对象分配过程" tabindex="-1"><a class="header-anchor" href="#对象分配过程"><span>对象分配过程</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>为新对象分配内存是一件非常严谨和复杂的任务，Java的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。</p><ol><li>new 的对象先放Eden区。此区有大小限制。</li><li>当Eden的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对Eden区进行垃圾回收(YGC/Minor GC)，将Eden区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到Eden区。</li><li>然后将Eden中的剩余对象移动到 survivor0 区。</li><li>如果再次触发垃圾回收，此时上次幸存下来的对象放到 survivor0 区的，如果没有回收，就会放到 survivor1 区。</li><li>如果再次经历垃圾回收，此时会重新放回 survivor0 区，接着再去 survivor1 区。</li><li>啥时候能去养老区（老年代）呢？可以设置次数。默认是15次。</li></ol><blockquote><p>可以设置参数：<code>-XX:MaxTenuringThreshold=&lt;N&gt;</code> 设置对象转移到老年代的年龄。</p></blockquote><ol start="7"><li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC（MajorGC），进行养老区的内存清理。</li><li>若养老区执行了 Major GC 之后发现依然无法进行对象的保存，就会产生<code>OOM</code>异常。</li><li>针对幸存者S0，S1 区的总结：复制之后有交换，谁空谁就是<code>to</code>，另一个就是<code>from</code>。</li><li>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集。</li></ol><h3 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况"><span>特殊情况</span></a></h3><figure><img src="https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220101803.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用调优工具" tabindex="-1"><a class="header-anchor" href="#常用调优工具"><span>常用调优工具</span></a></h3><ul><li>JDK命令行（jinfo, jstat, javap, jmap...）</li><li>EcIipse:Memory Analyzer Tool</li><li>Jconsole</li><li>VisualVM</li><li>Jprofiler</li><li>Java Flight Recorder</li><li>GCViewer</li><li>GC Easy</li></ul><h2 id="minor-gc、major-gc、full-gc" tabindex="-1"><a class="header-anchor" href="#minor-gc、major-gc、full-gc"><span>Minor GC、Major GC、Full GC</span></a></h2><p>JVM在进行GC时，并非每次都对上面三个内存区域（新生代、老年代、方法区）一起回收的，大部分时候回收的都是指新生代。针对 HotSpot VM 的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p><ul><li>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为： <ul><li>新生代收集(Minor GC / Young GC)：只是新生代的垃圾收集</li><li>老年代收集(Major GC / Old GC）：只是老年代的垃圾收集。</li><li>混合收集（Mixed GC)：收集整个新生代以及部分老年代的垃圾收集。目前，只有<code>G1 GC</code>会有这种行为。</li></ul></li><li>整堆收集（Full GC）：收集整个java堆和方法区的垃圾收集。</li></ul><blockquote><p>目前，只有CMS GC会有单独收集老年代的行为。</p><p><strong>注意</strong>，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。</p></blockquote><h3 id="_1-年轻代gc-minor-gc-触发机制" tabindex="-1"><a class="header-anchor" href="#_1-年轻代gc-minor-gc-触发机制"><span>1. 年轻代GC(Minor GC)触发机制</span></a></h3><ul><li>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden满，survivor满不会引发GC（每次Minor GC会清理年轻代的内存）。</li><li>因为Java对象大多都具备朝生夕灭的特性，所以 Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</li><li>Minor GC会引发<code>STW</code>。暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。</li></ul><blockquote><p><strong>survivor0、survivor1的GC是被动的。触发的条件是Eden满。</strong></p></blockquote><h3 id="_2-老年代gc-major-gc-full-gc-触发机制" tabindex="-1"><a class="header-anchor" href="#_2-老年代gc-major-gc-full-gc-触发机制"><span>2. 老年代GC(Major GC / Full GC)触发机制</span></a></h3><ul><li>指发生在老年代的GC，对象从老年代消失时，我们说 <code>Major GC</code> 或 <code>Full GC</code> 发生了。</li><li>出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在<code>parallel Scavenge</code> 收集器的收集策略里就有直接进行Major的策略选择过程）。也就是在老年代空间不足时，会先尝试触发MinorGC。如果之后空间还不足，则触发Major GC。</li><li>MajorGC 的速度一般会比 MinorGC 慢10倍以上，STW的时间更长。</li><li>如果MajorGC后，内存还不足，就报OOM了。</li></ul><h3 id="_3-full-gc-触发机制" tabindex="-1"><a class="header-anchor" href="#_3-full-gc-触发机制"><span>3. Full GC 触发机制</span></a></h3><p>触发Full执行的情况有如下五种：</p><ol><li>调用system.gc()时，系统建议执行FullGC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC 后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor space0（From Space)区向 survivor space1（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li></ol><blockquote><p>说明：full gc是开发或调优中尽量要避免的。这样暂时时间会短一些。</p></blockquote><h2 id="堆空间分代思想" tabindex="-1"><a class="header-anchor" href="#堆空间分代思想"><span>堆空间分代思想</span></a></h2><blockquote><p><strong>为什么需要java堆分代？不分代就不能正常工作了吗？</strong></p></blockquote><p>经研究，不同对象的生命周期不同。70% ~ 99%的对象是临时对象。</p><ul><li>新生代：有Eden、两块大小相同的survivor（又称为from/to, s0/s1）构成，to 总为空。</li><li>老年代：存放新生代中经历多次 GC 仍然存活的对象。</li></ul><p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用,这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p><h2 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略"><span>内存分配策略</span></a></h2><p>如果对象在Eden出生并经过第一次MinorGC后仍然存活，并且能被survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代中。</p><blockquote><p>对象晋升老年代的年龄阈值，可以通过选项<code>-XX：MaxTenuringThreshold</code>来设置。</p></blockquote><p><strong>针对不同年龄段的对象分配原则如下所示：</strong></p><ul><li>优先分配到Eden</li><li>大对象直接分配到老年代（尽量避免程序中出现过多的大对象）</li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断 <ul><li>如果survivor区中相同年龄的所有对象大小的总和大于survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到<code>MaxTenuringThreshold</code>中要求的年龄。</li></ul></li><li>仝间分配担保：<code>—XX：HandlePromotionFailure</code></li></ul><h2 id="为对象分配内存-tlab" tabindex="-1"><a class="header-anchor" href="#为对象分配内存-tlab"><span>为对象分配内存：TLAB</span></a></h2><h3 id="什么是tlab" tabindex="-1"><a class="header-anchor" href="#什么是tlab"><span>什么是TLAB?</span></a></h3><ul><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</li><li>多线程同时分配内存时，使用TLAB可以避免一系列的线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配筻略。</li><li>所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</li></ul><h3 id="为什么有tlab-thread-local-allocation-buffer" tabindex="-1"><a class="header-anchor" href="#为什么有tlab-thread-local-allocation-buffer"><span>为什么有TLAB（Thread Local Allocation Buffer）?</span></a></h3><ul><li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li><li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</li></ul><h3 id="tlab的其他说明" tabindex="-1"><a class="header-anchor" href="#tlab的其他说明"><span>TLAB的其他说明</span></a></h3><ul><li>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将其作为内存分配的首选。</li><li>在程序中，开发人员可以通过选项<code>--XX:+UseTLAB</code> 设置是否开启TLAB空间(默认是开启的)</li><li>默认情况下，TLAB空间的内存非常小，仅占整个Eden空间的1%，当然我们可以通过选项<code>-XX:TLABwasteTargetPercent</code> 设置TLAB空间所占用Eden空间的百分比大小。</li><li>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</li></ul><h2 id="小结-堆空间的参数设置" tabindex="-1"><a class="header-anchor" href="#小结-堆空间的参数设置"><span>小结：堆空间的参数设置</span></a></h2><ul><li>-XX:+PrintFlagsInitial: 查看所有的参数的默认初始值</li><li>-XX:+PrintFlagsFinal: 查看所有的参数的最终值（可能会存在修改，不再是初始值） 具体查看某个参数值的指令： <ol><li><code>jps</code>: 查看当前运行中的进程</li><li><code>jinfo -flag 参数名 进程id</code></li></ol></li><li>-Xms: 初始堆空间内存（默认为物理内存的1/64）</li><li>-Xmx: 最大堆空间内存（默认为物理内存的1/4）</li><li>-Xmn: 设置新生代的大小。（初始值及最大值）</li><li>-XX:NewRatio: 配置新生代与老年代在堆结构的占比（默认是2。新生代1/3，老年代2/3）</li><li>-XX:survivorRatio：设新生代中Eden和S0/S1空间的比例（默认是8）</li><li>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄 <ul><li>最大值是15。parallel收集器的默认值是15，CMS收集器的默认值是6。</li></ul></li><li>-XX:+printGCDetails：输出详细的GC处理日志 <ul><li>打印gc简要信息：① -XX:PrintGC   ② -verbose:gc 二者打印的结果相同</li></ul></li><li>-XX:HandlePromotionFailure: 是否设置空间分配担保</li></ul><h3 id="handlepromotionfailure-参数说明" tabindex="-1"><a class="header-anchor" href="#handlepromotionfailure-参数说明"><span>HandlePromotionFailure 参数说明</span></a></h3><p>在发生MinorGC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p><ul><li>如果大于，则此次MinorGC是安全的</li><li>如果小于，则虚拟机会查看<code>-XX:HandlePromotionFailure</code> 设置值是否允许担保失败。 <ul><li>如果HandlePromotionFailure=true,那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。 <ul><li>如果大于，则尝试进行一次MinorGC，但这次MinorGC依然是有风险的。</li><li>如果小于，则改为进行一次FullGC。</li></ul></li><li>如果HandlePromotionFailure=false，则改为进行一次FullGC。</li></ul></li></ul><blockquote><p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionrailure参数，但是在代码中己经不会再使用它。JDK6 Update24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行MinorGC，否则将进行FullGC。</p></blockquote><h2 id="堆是分配对象的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#堆是分配对象的唯一选择吗"><span>堆是分配对象的唯一选择吗</span></a></h2><p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述： 随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p><p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是“<strong>如果经过逃逸分析(Escape Analysis)后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。</strong>”这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><p>此外，前面提到的基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现<code>off-heap</code>，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p><blockquote><p><strong>只有在Server模式下才可以启用逃逸分析。可通过<code>java -version</code>查看</strong></p></blockquote><h3 id="逃逸分析概述" tabindex="-1"><a class="header-anchor" href="#逃逸分析概述"><span>逃逸分析概述</span></a></h3><ul><li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li><li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li><li>逃逸分析的基本行为就是分析对象动态作用域： <ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul></li></ul><blockquote><p>在JDK6u23版本之后，HotSpot中默认就己经开启了逃逸分析。如果使用的是较早的版本，开发人员则可以通过：</p><ul><li>选项<code>-XX:+DoEscapeAnalysis</code>显式开启逃逸分析</li><li>选项<code>-XX:+PrintEscapeAnalysis</code>查看逃逸分析的筛选结果。</li></ul></blockquote><div class="hint-container note"><p class="hint-container-title">结论</p><p><strong>开发中能使用局部变量的，就不要使用在方法外定义。</strong></p></div><h3 id="逃逸分析-代码优化" tabindex="-1"><a class="header-anchor" href="#逃逸分析-代码优化"><span>逃逸分析：代码优化</span></a></h3><p>使用逃逸分析，编译器可以对代码做如下优化：</p><ol><li>栈上分配。将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</li><li>同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li><li>分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器(对Java而言，就是栈)中。</li></ol><h4 id="_1-栈上分配" tabindex="-1"><a class="header-anchor" href="#_1-栈上分配"><span>1. 栈上分配</span></a></h4><ul><li>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</li><li>常见的栈上分配的场景：给成员变量赋值、方法返回值、实例引用传递。</li></ul><h4 id="_2-同步省略-消除" tabindex="-1"><a class="header-anchor" href="#_2-同步省略-消除"><span>2. 同步省略（消除）</span></a></h4><ul><li>线程同步的佧价是相当高的，同步的后果是降低并发性和性能。</li><li>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</li></ul><h4 id="_3-标量替换" tabindex="-1"><a class="header-anchor" href="#_3-标量替换"><span>3. 标量替换</span></a></h4><p><code>标量(Scalar)</code>是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p><p>相对的，那些还可以分解的数据叫做<code>聚合量(Aggregate)</code>，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p><p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">        alloc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> alloc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">        Point</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> point</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">x = </span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> point</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">, y = </span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> point</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#999999;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>alloc()</code>方法，经过标量替换后，会变成</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#393a34;--shiki-dark:#e1e4e8;--shiki-light-bg:#ffffff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes vitesse-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;"> alloc</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">  System</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#E1E4E8;">out</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">x = </span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#9ECBFF;">, y = </span><span style="--shiki-light:#B5695977;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有什么好处？可以大大减少堆内存的占用。因为不用创建对象了，也就不用分配内存了。</p><p>标量替换为栈上分配提供了很好的基础。</p><blockquote><p>参数<code>-XX:+EliminateAllocations</code>：开启了标量替换（默认打开），允许将对象打散分配在栈上。</p><p>但这不能说明把对象分配在了栈上。这种情况没有创建对象。</p></blockquote><h3 id="逃逸分析-并不成熟" tabindex="-1"><a class="header-anchor" href="#逃逸分析-并不成熟"><span>逃逸分析：并不成熟</span></a></h3><ul><li>关于逃逸分析的论文在1999年就己经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟的。</li><li>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</li><li>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</li><li>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。</li><li>注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JVM设计者的选择。Oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里己经说明，所以可以明确所有的对象实例都是创建在堆上。</li><li>目前很多书籍还是基于JDK7以前的版本，JDK己经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代己经被元数据区取代。但是，intern字符串的缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><ul><li>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</li><li>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。</li><li>当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGC。当GC发生在老年代时则被称为MajorGC或者FullGC。一般的，MinorGC的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率大大低于年轻代。</li></ul><h2 id="参考链接-其他工具" tabindex="-1"><a class="header-anchor" href="#参考链接-其他工具"><span>参考链接/其他工具</span></a></h2><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener noreferrer">1. JVM参数-Oracle官网</a></p><p><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener noreferrer">2. arthas - 阿里开源的Java诊断工具</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/performance-enhancements-7.html" target="_blank" rel="noopener noreferrer">3. Escape Analysis</a></p>`,101),t=[n];function h(r,o){return a(),l("div",null,t)}const k=i(e,[["render",h],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/01java/40jvm/heap/","title":"堆","lang":"zh-CN","frontmatter":{"title":"堆","date":"2022-05-21T16:32:26.000Z","order":37,"permalink":"/01java/40jvm/heap/","icon":"wenzhang","description":"堆的核心概念 堆的核心概述 堆是线程共享的，和方法区（Runtime）一样。它们是进程私有的，线程共享的。 一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。 Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM 管理的最大一块内存空间。堆内存的大小是可以调节的。 《Java虚拟机规范》规定，堆可以处于物理上不连续 的...","head":[["meta",{"property":"og:url","content":"https://i.iyes.life/01java/40jvm/heap/"}],["meta",{"property":"og:site_name","content":"Mr.He"}],["meta",{"property":"og:title","content":"堆"}],["meta",{"property":"og:description","content":"堆的核心概念 堆的核心概述 堆是线程共享的，和方法区（Runtime）一样。它们是进程私有的，线程共享的。 一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。 Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM 管理的最大一块内存空间。堆内存的大小是可以调节的。 《Java虚拟机规范》规定，堆可以处于物理上不连续 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/202205220052286.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-01T16:22:14.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:published_time","content":"2022-05-21T16:32:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-01T16:22:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"堆\\",\\"image\\":[\\"https://raw.githubusercontent.com/jayxiaohe/blog_img/main/img/202205220052286.jpeg\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220055014.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220056992.png\\",\\"https://fastly.jsdelivr.net/gh/jayxiaohe/blog_img/img/202205220101803.png\\"],\\"datePublished\\":\\"2022-05-21T16:32:26.000Z\\",\\"dateModified\\":\\"2023-01-01T16:22:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"https://i.iyes.life\\"}]}"]]},"headers":[{"level":2,"title":"堆的核心概念","slug":"堆的核心概念","link":"#堆的核心概念","children":[{"level":3,"title":"堆的核心概述","slug":"堆的核心概述","link":"#堆的核心概述","children":[]},{"level":3,"title":"内存细分","slug":"内存细分","link":"#内存细分","children":[]}]},{"level":2,"title":"设置堆内存大小与OOM","slug":"设置堆内存大小与oom","link":"#设置堆内存大小与oom","children":[{"level":3,"title":"设置","slug":"设置","link":"#设置","children":[]},{"level":3,"title":"默认","slug":"默认","link":"#默认","children":[]},{"level":3,"title":"如何查看设置的参数","slug":"如何查看设置的参数","link":"#如何查看设置的参数","children":[]}]},{"level":2,"title":"年轻代与老年代","slug":"年轻代与老年代","link":"#年轻代与老年代","children":[]},{"level":2,"title":"对象分配过程","slug":"对象分配过程","link":"#对象分配过程","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[]},{"level":3,"title":"常用调优工具","slug":"常用调优工具","link":"#常用调优工具","children":[]}]},{"level":2,"title":"Minor GC、Major GC、Full GC","slug":"minor-gc、major-gc、full-gc","link":"#minor-gc、major-gc、full-gc","children":[{"level":3,"title":"1. 年轻代GC(Minor GC)触发机制","slug":"_1-年轻代gc-minor-gc-触发机制","link":"#_1-年轻代gc-minor-gc-触发机制","children":[]},{"level":3,"title":"2. 老年代GC(Major GC / Full GC)触发机制","slug":"_2-老年代gc-major-gc-full-gc-触发机制","link":"#_2-老年代gc-major-gc-full-gc-触发机制","children":[]},{"level":3,"title":"3. Full GC 触发机制","slug":"_3-full-gc-触发机制","link":"#_3-full-gc-触发机制","children":[]}]},{"level":2,"title":"堆空间分代思想","slug":"堆空间分代思想","link":"#堆空间分代思想","children":[]},{"level":2,"title":"内存分配策略","slug":"内存分配策略","link":"#内存分配策略","children":[]},{"level":2,"title":"为对象分配内存：TLAB","slug":"为对象分配内存-tlab","link":"#为对象分配内存-tlab","children":[{"level":3,"title":"什么是TLAB?","slug":"什么是tlab","link":"#什么是tlab","children":[]},{"level":3,"title":"为什么有TLAB（Thread Local Allocation Buffer）?","slug":"为什么有tlab-thread-local-allocation-buffer","link":"#为什么有tlab-thread-local-allocation-buffer","children":[]},{"level":3,"title":"TLAB的其他说明","slug":"tlab的其他说明","link":"#tlab的其他说明","children":[]}]},{"level":2,"title":"小结：堆空间的参数设置","slug":"小结-堆空间的参数设置","link":"#小结-堆空间的参数设置","children":[{"level":3,"title":"HandlePromotionFailure 参数说明","slug":"handlepromotionfailure-参数说明","link":"#handlepromotionfailure-参数说明","children":[]}]},{"level":2,"title":"堆是分配对象的唯一选择吗","slug":"堆是分配对象的唯一选择吗","link":"#堆是分配对象的唯一选择吗","children":[{"level":3,"title":"逃逸分析概述","slug":"逃逸分析概述","link":"#逃逸分析概述","children":[]},{"level":3,"title":"逃逸分析：代码优化","slug":"逃逸分析-代码优化","link":"#逃逸分析-代码优化","children":[]},{"level":3,"title":"逃逸分析：并不成熟","slug":"逃逸分析-并不成熟","link":"#逃逸分析-并不成熟","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"参考链接/其他工具","slug":"参考链接-其他工具","link":"#参考链接-其他工具","children":[]}],"git":{"createdTime":1664722755000,"updatedTime":1672590134000,"contributors":[{"name":"jayxiaohe","email":"495302067@qq.com","commits":1}]},"readingTime":{"minutes":20.59,"words":6176},"filePathRelative":"01java/40jvm/37.堆.md","localizedDate":"2022年5月22日","autoDesc":true}');export{k as comp,c as data};
